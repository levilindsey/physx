{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/lsl-animatex/index.js","node_modules/lsl-animatex/src/animation-job.js","node_modules/lsl-animatex/src/animator.js","node_modules/lsl-animatex/src/frame-latency-profiler.js","node_modules/lsl-animatex/src/index.js","node_modules/lsl-animatex/src/persistent-animation-job.js","node_modules/lsl-animatex/src/transient-animation-job.js","node_modules/lsl-animatex/src/util.js","src/collisions/collidables/index.js","src/collisions/collidables/src/aabb-collidable.js","src/collisions/collidables/src/capsule-collidable.js","src/collisions/collidables/src/collidable.js","src/collisions/collidables/src/line-segment.js","src/collisions/collidables/src/obb-collidable.js","src/collisions/collidables/src/sphere-collidable.js","src/collisions/collision-detection/index.js","src/collisions/collision-detection/src/aabb-collision-detection.js","src/collisions/collision-detection/src/capsule-collision-detection.js","src/collisions/collision-detection/src/obb-collision-detection.js","src/collisions/collision-detection/src/sphere-collision-detection.js","src/collisions/contact-calculation/index.js","src/collisions/contact-calculation/src/aabb-contact-calculation.js","src/collisions/contact-calculation/src/capsule-contact-calculation.js","src/collisions/contact-calculation/src/obb-contact-calculation.js","src/collisions/contact-calculation/src/sphere-contact-calculation.js","src/collisions/index.js","src/collisions/src/collidable-factories.js","src/collisions/src/collidable-physics-job.js","src/collisions/src/collidable-store.js","src/collisions/src/collision-handler.js","src/collisions/src/collision-utils.js","src/index.js","src/integrator/index.js","src/integrator/src/integrator.js","src/integrator/src/rk4-integrator.js","src/src/physics-engine.js","src/src/physics-job.js","src/src/physics-state.js","src/util/index.js","src/util/src/force-utils.js","src/util/src/geometry.js","src/util/src/inertia-tensor-utils.js","src/util/src/util.js"],"names":[],"mappings":"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","file":"physx.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export * from './src';\n","/**\n * An AnimationJob is used with the animator controller to update and re-draw something each frame.\n *\n * @abstract\n */\nclass AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    // AnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === AnimationJob) {\n      throw new TypeError('Cannot construct AnimationJob instances directly');\n    }\n\n    this._startTime = 0;\n    this._isComplete = true;\n    this._onComplete = onComplete;\n  }\n\n  /**\n   * Indicates whether this AnimationJob is complete.\n   *\n   * @return {boolean}\n   */\n  get isComplete() {\n    return this._isComplete;\n  }\n\n  /**\n   * Sets this AnimationJob as started.\n   *\n   * @param {DOMHighResTimeStamp} startTime\n   */\n  start(startTime) {\n    this._startTime = startTime;\n    this._isComplete = false;\n  }\n\n  /**\n   * Updates the animation progress of this AnimationJob to match the given time.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Draws the current state of this AnimationJob.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Handles any necessary state for this AnimationJob being finished.\n   *\n   * @param {boolean} isCancelled\n   */\n  finish(isCancelled) {\n    console.log(`${this.constructor.name} ${isCancelled ? 'cancelled' : 'completed'}`);\n\n    this._isComplete = true;\n\n    if (this._onComplete) {\n      this._onComplete();\n    }\n  }\n}\n\nexport {AnimationJob};\n","import {FrameLatencyProfiler} from './frame-latency-profiler';\nimport {PersistentAnimationJob} from './persistent-animation-job';\nimport {TransientAnimationJob} from './transient-animation-job';\n\nconst _DELTA_TIME_UPPER_THRESHOLD = 200;\nconst _FRAME_DURATION_WARNING_THRESHOLD = 1000 / 30;\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Animation frame period';\n\n/**\n * This class handles the animation loop.\n *\n * This class's responsibilities include:\n * - updating modules for the current frame,\n * - drawing renderables for the current frame,\n * - starting and stopping transient animation jobs,\n * - capping time step durations at a max threshold.\n */\nclass Animator {\n  constructor() {\n    this._jobs = [];\n    this._previousTime = null;\n    this._isPaused = true;\n    this._requestAnimationFrameId = null;\n    this._totalUnpausedRunTime = 0;\n    this._lastUnpauseTime = null;\n    this._latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD,\n        _FRAME_DURATION_WARNING_THRESHOLD, _LATENCY_LOG_LABEL);\n  }\n\n  /**\n   * Starts the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  startJob(job) {\n    // Is this a restart?\n    if (!job.isComplete) {\n      console.debug(`Restarting AnimationJob: ${job.constructor.name}`);\n\n      if (job instanceof PersistentAnimationJob) {\n        job.reset();\n      } else {\n        job.finish(true);\n        job.start(window.performance.now());\n      }\n    } else {\n      console.debug(`Starting AnimationJob: ${job.constructor.name}`);\n\n      job.start(this._previousTime);\n      this._jobs.push(job);\n    }\n\n    this._startAnimationLoop();\n  }\n\n  /**\n   * Cancels the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  cancelJob(job) {\n    console.debug(`Cancelling AnimationJob: ${job.constructor.name}`);\n    job.finish(true);\n  }\n\n  /**\n   * Cancels all running AnimationJobs.\n   */\n  cancelAll() {\n    while (this._jobs.length) {\n      this.cancelJob(this._jobs[0]);\n    }\n  }\n\n  /** @returns {DOMHighResTimeStamp} */\n  get currentTime() {\n    return this._previousTime;\n  }\n\n  /** @returns {boolean} */\n  get isPaused() {\n    return this._isPaused;\n  }\n\n  pause() {\n    this._stopAnimationLoop();\n    console.debug('Animator paused');\n  }\n\n  unpause() {\n    this._startAnimationLoop();\n    console.debug('Animator unpaused');\n  }\n\n  /**\n   * This is the animation loop that drives all of the animation.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @private\n   */\n  _animationLoop(currentTime) {\n    // When pausing and restarting, it's possible for the previous time to be slightly inconsistent\n    // with the animationFrame time.\n    if (currentTime < this._previousTime) {\n      this._previousTime = currentTime - 1;\n    }\n\n    let deltaTime = currentTime - this._previousTime;\n    this._previousTime = currentTime;\n\n    this._latencyProfiler.recordFrameLatency(deltaTime);\n\n    // Large delays between frames can cause lead to instability in the system, so this caps them to\n    // a max threshold.\n    deltaTime = deltaTime > _DELTA_TIME_UPPER_THRESHOLD ?\n        _DELTA_TIME_UPPER_THRESHOLD : deltaTime;\n\n    if (!this._isPaused) {\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(currentTime => this._animationLoop(currentTime));\n      this._updateJobs(currentTime, deltaTime);\n      this._drawJobs();\n    }\n  }\n\n  /**\n   * Updates all of the active AnimationJobs.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateJobs(currentTime, deltaTime) {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      let job = this._jobs[i];\n\n      // Remove jobs from the list after they are complete.\n      if (job.isComplete) {\n        this._removeJob(job, i);\n        i--;\n        count--;\n        continue;\n      }\n\n      // Check whether the job is transient and has reached its end.\n      if (job instanceof TransientAnimationJob && job.endTime < currentTime) {\n        job.finish(false);\n      } else {\n        job.update(currentTime, deltaTime);\n      }\n    }\n  }\n\n  /**\n   * Removes the given job from the collection of active, animating jobs.\n   *\n   * @param {AnimationJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    console.debug(`Removing AnimationJob: ${job.constructor.name}`);\n\n    if (index >= 0) {\n      this._jobs.splice(index, 1);\n    } else {\n      const count = this._jobs.length;\n      for (index = 0; index < count; index++) {\n        if (this._jobs[index] === job) {\n          this._jobs.splice(index, 1);\n          break;\n        }\n      }\n    }\n\n    // Stop the animation loop when there are no more jobs to animate.\n    if (this._jobs.length === 0) {\n      this._stopAnimationLoop();\n    }\n  }\n\n  /**\n   * Draws all of the active AnimationJobs.\n   *\n   * @private\n   */\n  _drawJobs() {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      this._jobs[i].draw();\n    }\n  }\n\n  /**\n   * Starts the animation loop if it is not already running.\n   *\n   * This method is idempotent.\n   *\n   * @private\n   */\n  _startAnimationLoop() {\n    if (this._isPaused) {\n      this._lastUnpauseTime = window.performance.now();\n    }\n    this._isPaused = false;\n\n    // Only actually start the loop if it isn't already running and the page has focus.\n    if (!this._requestAnimationFrameId && !document.hidden) {\n      this._latencyProfiler.start();\n      this._previousTime = window.performance.now();\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(time => this._animationLoop(time));\n    }\n  }\n\n  /**\n   * Stops the animation loop.\n   *\n   * @private\n   */\n  _stopAnimationLoop() {\n    if (!this._isPaused) {\n      this._totalUnpausedRunTime += this._timeSinceLastPaused;\n    }\n    this._isPaused = true;\n    window.cancelAnimationFrame(this._requestAnimationFrameId);\n    this._requestAnimationFrameId = null;\n    this._latencyProfiler.stop();\n  }\n\n  /**\n   * Creates a promise that will resolve on the next animation loop.\n   *\n   * @returns {Promise}\n   */\n  resolveOnNextFrame() {\n    return new Promise(window.requestAnimationFrame);\n  }\n\n  /**\n   * Gets the total amount of time the animator has been running while not paused.\n   *\n   * @returns {DOMHighResTimeStamp}\n   */\n  get totalRunTime() {\n    return this._isPaused\n        ? this._totalUnpausedRunTime\n        : this._totalUnpausedRunTime + this._timeSinceLastPaused;\n  }\n\n  /**\n   * @returns {DOMHighResTimeStamp}\n   */\n  get _timeSinceLastPaused() {\n    return window.performance.now() - this._lastUnpauseTime;\n  }\n}\n\nconst animator = new Animator();\n\nexport {animator};\n\n/**\n * @typedef {number} DOMHighResTimeStamp A number of milliseconds, accurate to one thousandth of a\n * millisecond.\n */\n\n","/**\n * This class keeps track of avg/min/max frame latencies over the last logging time period and\n * periodically logs these values.\n */\nclass FrameLatencyProfiler {\n  /**\n   * @param {number} logPeriod The period at which to print latency log messages. In milliseconds.\n   * @param {number} latencyWarningThreshold If the average latency exceeds this threshold, then the\n   * log message is shown as a warning. In milliseconds.\n   * @param {string} logLabel A label to show for each latency log message.\n   */\n  constructor(logPeriod, latencyWarningThreshold, logLabel) {\n    this._logPeriod = logPeriod;\n    this._latencyWarningThreshold = latencyWarningThreshold;\n    this._logLabel = logLabel;\n\n    this._frameCount = null;\n    this._maxFrameLatency = null;\n    this._minFrameLatency = null;\n    this._avgFrameLatency = null;\n\n    this._intervalId = null;\n  }\n\n  start() {\n    this.stop();\n    this.reset();\n\n    this._intervalId = setInterval(() => {\n      this.logFrameLatency();\n      this.reset();\n    }, this._logPeriod);\n  }\n\n  stop() {\n    clearInterval(this._intervalId);\n  }\n\n  reset() {\n    this._frameCount = 0;\n    this._maxFrameLatency = Number.MIN_VALUE;\n    this._minFrameLatency = Number.MAX_VALUE;\n    this._avgFrameLatency = 0;\n  }\n\n  /**\n   * Keeps track of a running average, min value, and max value for the frame latencies.\n   *\n   * @param {DOMHighResTimeStamp} frameLatency\n   */\n  recordFrameLatency(frameLatency) {\n    this._frameCount++;\n    this._maxFrameLatency =\n        this._maxFrameLatency < frameLatency ? frameLatency : this._maxFrameLatency;\n    this._minFrameLatency =\n        this._minFrameLatency > frameLatency ? frameLatency : this._minFrameLatency;\n    this._avgFrameLatency =\n        this._avgFrameLatency + (frameLatency - this._avgFrameLatency) / this._frameCount;\n  }\n\n  logFrameLatency() {\n    if (this._frameCount > 0) {\n      const message = `${this._logLabel}:  AVG=${this._avgFrameLatency.toFixed(3)}  ` +\n          `(MAX=${this._maxFrameLatency.toFixed(3)}; MIN=${this._minFrameLatency.toFixed(3)})`;\n      if (this._maxFrameLatency >= this._latencyWarningThreshold) {\n        console.warn(message);\n      } else {\n        console.debug(message);\n      }\n    }\n  }\n}\n\nexport {FrameLatencyProfiler};\n","export * from './animation-job';\nexport * from './animator';\nexport * from './frame-latency-profiler';\nexport * from './persistent-animation-job';\nexport * from './transient-animation-job';\n","import {AnimationJob} from './animation-job';\n\n/**\n * A PersistentAnimationJob recurs or has an indefinite duration.\n *\n * @abstract\n */\nclass PersistentAnimationJob extends AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    super(onComplete);\n\n    // PersistentAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === PersistentAnimationJob) {\n      throw new TypeError('Cannot construct PersistentAnimationJob instances directly');\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  reset() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {PersistentAnimationJob};\n","import {_util} from './util';\n\nimport {AnimationJob} from './animation-job';\n\n/**\n * A TransientAnimationJob is temporary and has a definite beginning and end.\n *\n * @abstract\n */\nclass TransientAnimationJob extends AnimationJob {\n  /**\n   * @param {number} duration\n   * @param {number} delay\n   * @param {Function|String} easingFunction\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(duration, delay, easingFunction, onComplete) {\n    super(onComplete);\n\n    // TransientAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === TransientAnimationJob) {\n      throw new TypeError('Cannot construct TransientAnimationJob instances directly');\n    }\n\n    this._duration = duration;\n    this._delay = delay;\n    this._easingFunction = typeof easingFunction === 'function'\n        ? easingFunction\n        : _util.easingFunctions[easingFunction];\n  }\n\n  /**\n   * @returns {number}\n   */\n  get endTime() {\n    return this._startTime + this._duration + this._delay;\n  }\n}\n\nexport {TransientAnimationJob};\n","/**\n * This module defines a collection of static utility functions.\n */\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\nconst _util = {\n  easingFunctions,\n};\n\nexport {\n  _util,\n};\n","export * from './src/aabb-collidable';\nexport * from './src/capsule-collidable';\nexport * from './src/collidable';\nexport * from './src/line-segment';\nexport * from './src/obb-collidable';\nexport * from './src/sphere-collidable';\n","import {Collidable} from './collidable';\nimport {LineSegment} from './line-segment';\nimport {tmpVec1, tmpVec2} from '../../../util';\n\n/**\n * This class represents an axially-aligned bounding box (AABB).\n *\n * This is primarily useful for collision detection. An AABB is only appropriate for some\n * geometries. For other geometries, an oriented bounding box (OBB) or a bounding sphere may be more\n * appropriate.\n */\nclass Aabb extends Collidable {\n  /**\n   * @param {number} minX\n   * @param {number} minY\n   * @param {number} minZ\n   * @param {number} maxX\n   * @param {number} maxY\n   * @param {number} maxZ\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(minX, minY, minZ, maxX, maxY, maxZ, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.minX = minX;\n    this.minY = minY;\n    this.minZ = minZ;\n    this.maxX = maxX;\n    this.maxY = maxY;\n    this.maxZ = maxZ;\n  }\n\n  /**\n   * Creates a new bounding box with the dimensions of an axially-aligned cube centered around the \n   * given center and with the given half-side length.\n   *\n   * @param {vec3} center\n   * @param {number} halfSideLength\n   */\n  static createAsUniformAroundCenter(center, halfSideLength) {\n    const bounds = new Aabb(0, 0, 0, 0, 0, 0);\n    bounds.setAsUniformAroundCenter(center, halfSideLength);\n    return bounds;\n  }\n\n  /**\n   * Updates the dimensions of this bounding box to represent an axially-aligned cube centered\n   * around the given center and with the given half-side length.\n   *\n   * @param {vec3} center\n   * @param {number} halfSideLength\n   */\n  setAsUniformAroundCenter(center, halfSideLength) {\n    this.minX = center[0] - halfSideLength;\n    this.minY = center[1] - halfSideLength;\n    this.minZ = center[2] - halfSideLength;\n    this.maxX = center[0] + halfSideLength;\n    this.maxY = center[1] + halfSideLength;\n    this.maxZ = center[2] + halfSideLength;\n  }\n\n  /** @returns {number} */\n  get rangeX() {\n    return this.maxX - this.minX;\n  }\n  /** @returns {number} */\n  get rangeY() {\n    return this.maxY - this.minY;\n  }\n  /** @returns {number} */\n  get rangeZ() {\n    return this.maxZ - this.minZ;\n  }\n\n  /** @returns {number} */\n  get centerX() {\n    return this.minX + this.rangeX / 2;\n  }\n  /** @returns {number} */\n  get centerY() {\n    return this.minY + this.rangeY / 2;\n  }\n  /** @returns {number} */\n  get centerZ() {\n    return this.minZ + this.rangeZ / 2;\n  }\n\n  /** @returns {number} */\n  get surfaceArea() {\n    const rangeX = this.rangeX;\n    const rangeY = this.rangeY;\n    const rangeZ = this.rangeZ;\n    return 2 * (rangeX * rangeY + rangeX * rangeZ + rangeY * rangeZ);\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    // Reuse the same object when this is called multiple times.\n    this._centerOfVolume = this._centerOfVolume || vec3.create();\n    vec3.set(this._centerOfVolume, this.centerX, this.centerY, this.centerZ);\n    return this._centerOfVolume;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    return this;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    const rangeX = this.rangeX;\n    const rangeY = this.rangeY;\n    const rangeZ = this.rangeZ;\n    this.minX = value[0] - rangeX / 2;\n    this.minY = value[1] - rangeY / 2;\n    this.minZ = value[2] - rangeZ / 2;\n    this.maxX = value[0] + rangeX / 2;\n    this.maxY = value[1] + rangeY / 2;\n    this.maxZ = value[2] + rangeZ / 2;\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    // Do nothing.\n  }\n\n  /**\n   * Calls the given callback once for each vertex.\n   *\n   * Stops as soon as the callback returns true for a vertex.\n   *\n   * @param {VertexCallback} callback\n   * @param {vec3} [vertex] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someVertex(callback, vertex) {\n    vertex = vertex || tmpVec1;\n\n    vec3.set(vertex, this.minX, this.minY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.minY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.minX, this.maxY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.maxY, this.minZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.minX, this.minY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.minY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.minX, this.maxY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    vec3.set(vertex, this.maxX, this.maxY, this.maxZ);\n    if (callback(vertex)) return true;\n\n    return false;\n  }\n\n  /**\n   * Calls the given callback once for each edge.\n   *\n   * @param {EdgeCallback} callback\n   * @param {LineSegment} [edge] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someEdge(callback, edge) {\n    edge = edge || _segment;\n\n    //\n    // Edges along front face.\n    //\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.minY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.maxY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.minX, this.maxY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.minZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    //\n    // Edges along back face.\n    //\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.maxZ);\n    vec3.set(tmpVec2, this.maxX, this.minY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.maxY, this.maxZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.maxZ);\n    vec3.set(tmpVec2, this.minX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.minY, this.maxZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    //\n    // Edges between front and back faces.\n    //\n\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.minX, this.minY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.minY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.minY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.minX, this.maxY, this.minZ);\n    vec3.set(tmpVec2, this.minX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    vec3.set(tmpVec1, this.maxX, this.maxY, this.minZ);\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\n    edge.reset(tmpVec1, tmpVec2);\n    if (callback(edge)) return true;\n\n    return false;\n  }\n}\n\nconst _segment = new LineSegment(vec3.create(), vec3.create());\n\nexport {Aabb};\n","import {Collidable} from './collidable';\nimport {LineSegment} from './line-segment';\n\n/**\n * This class represents a capsule.\n *\n * - A capsule is a cylinder with semi-spheres on either end.\n * - A capsule can represent a rough approximation of many useful shapes.\n * - A capsule can be used for relatively efficient collision detection.\n */\nclass Capsule extends Collidable {\n  /**\n   * The default orientation of the capsule is along the z-axis.\n   *\n   * @param {number} halfDistance Half the distance from the centers of the capsule end spheres.\n   * @param {number} radius\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(halfDistance, radius, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.halfDistance = halfDistance;\n    this.segment = new LineSegment(vec3.fromValues(0, 0, -halfDistance),\n        vec3.fromValues(0, 0, halfDistance));\n    this.radius = radius;\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    return this.segment.center;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    return this;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    this.segment.center = value;\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    this.segment.orientation = value;\n  }\n}\n\nexport {Capsule};\n","/**\n * This class represents a 3D collidable rigid object.\n *\n * This is useful for collision detection and response.\n *\n * @abstract\n */\nclass Collidable {\n  /**\n   * @param {boolean} isStationary\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(isStationary, physicsJob) {\n    // Collidable is an abstract class. It should not be instantiated directly.\n    if (new.target === Collidable) {\n      throw new TypeError('Cannot construct Collidable instances directly');\n    }\n\n    this.isStationary = isStationary;\n    this.physicsJob = physicsJob;\n    this.collisions = [];\n    this.previousCollisions = [];\n  }\n\n  /**\n   * Implementing classes can override this to provide a center of mass that is different than the\n   * center of volume.\n   *\n   * @returns {vec3}\n   */\n  get centerOfMass() {\n    return this.centerOfVolume;\n  }\n\n  /**\n   * @returns {vec3}\n   * @abstract\n   */\n  get centerOfVolume() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @returns {Collidable}\n   * @abstract\n   */\n  get boundingVolume() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @param {vec3} value\n   * @abstract\n   */\n  set position(value) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @param {quat} value\n   * @abstract\n   */\n  set orientation(value) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {Collidable};\n","import {tmpVec1, tmpVec2} from '../../../util';\n\n/**\n * This class represents a line segment.\n */\nclass LineSegment {\n  /**\n   * @param {vec3} start\n   * @param {vec3} end\n   */\n  constructor(start, end) {\n    this.start = vec3.create();\n    this.end = vec3.create();\n    this._center = vec3.create();\n    this._originalOrientationStart = vec3.create();\n    this._originalOrientationEnd = vec3.create();\n    this.reset(start, end);\n  }\n\n  /**\n   * @param {vec3} start\n   * @param {vec3} end\n   */\n  reset(start, end) {\n    vec3.copy(this.start, start);\n    vec3.copy(this.end, end);\n    vec3.subtract(this._originalOrientationStart, this.start, this.center);\n    vec3.subtract(this._originalOrientationEnd, this.end, this.center);\n  }\n\n  /** @returns {LineSegment} */\n  clone() {\n    const segment = new LineSegment(this.start, this.end);\n    segment._originalOrientationStart = this._originalOrientationStart;\n    segment._originalOrientationEnd = this._originalOrientationEnd;\n    return segment;\n  }\n\n  /**\n   * The UN-NORMALIZED direction of this segment.\n   *\n   * @returns {vec3}\n   */\n  get dir() {\n    // Reuse the same object when this is called multiple times.\n    this._dir = this._dir || vec3.create();\n    return vec3.subtract(this._dir, this.end, this.start);\n  }\n\n  /** @returns {vec3} */\n  get center() {\n    vec3.lerp(this._center, this.start, this.end, 0.5);\n    return this._center;\n  }\n\n  /** @param {vec3} value */\n  set center(value) {\n    // Reuse the same object when this is called multiple times.\n    this._displacement = this._displacement || vec3.create();\n    vec3.subtract(this._displacement, value, this.center);\n\n    vec3.add(this.start, this.start, this._displacement);\n    vec3.add(this.end, this.end, this._displacement);\n  }\n\n  /** @param {quat} value */\n  set orientation(value) {\n    vec3.transformQuat(tmpVec1, this._originalOrientationStart, value);\n    vec3.transformQuat(tmpVec2, this._originalOrientationEnd, value);\n\n    // We don't want this to be re-calculated between start/end updates.\n    const center = this.center;\n\n    vec3.add(this.start, center, tmpVec1);\n    vec3.add(this.end, center, tmpVec2);\n  }\n}\n\nexport {LineSegment};\n","import {Collidable} from './collidable';\nimport {Sphere} from './sphere-collidable';\nimport {LineSegment} from './line-segment';\n\n/**\n * This class represents an oriented bounding box (OBB).\n *\n * This is useful both for collision detection and for representing any rotated rectangular cuboid.\n * An OBB is only appropriate for some geometries. For other geometries, an axially-aligned bounding\n * box (AABB) or a bounding sphere may be more appropriate.\n */\nclass Obb extends Collidable {\n  /**\n   * Defaults to being centered at the origin with its local axes aligned with the world axes.\n   *\n   * @param {number} halfSideLengthX\n   * @param {number} halfSideLengthY\n   * @param {number} halfSideLengthZ\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(halfSideLengthX, halfSideLengthY, halfSideLengthZ, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.extents = [\n      vec3.fromValues(halfSideLengthX, 0, 0),\n      vec3.fromValues(0, halfSideLengthY, 0),\n      vec3.fromValues(0, 0, halfSideLengthZ)\n    ];\n    this.axes = [\n      vec3.fromValues(1, 0, 0),\n      vec3.fromValues(0, 1, 0),\n      vec3.fromValues(0, 0, 1)\n    ];\n    this.halfSideLengths = [\n      halfSideLengthX,\n      halfSideLengthY,\n      halfSideLengthZ\n    ];\n    this._center = vec3.create();\n    this._orientation = quat.create();\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    return this._center;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    // Reuse the same value when this is called multiple times.\n    if (!this._boundingSphere) {\n      const radius = Math.sqrt(this.halfSideLengthX * this.halfSideLengthX +\n          this.halfSideLengthY * this.halfSideLengthY +\n          this.halfSideLengthZ * this.halfSideLengthZ);\n      this._boundingSphere = new Sphere(0, 0, 0, radius, this.isStationary);\n    }\n    this._boundingSphere.position = this._center;\n    return this._boundingSphere;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    vec3.copy(this._center, value);\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    quat.copy(this._orientation, value);\n    this._updateExtents();\n  }\n  /** @returns {quat} */\n  get orientation() {\n    return this._orientation;\n  }\n\n  /** @returns {number} */\n  get halfSideLengthX() {\n    return this.halfSideLengths[0];\n  }\n  /** @param {number} value */\n  set halfSideLengthX(value) {\n    this.halfSideLengths[0] = value;\n    this._updateExtents();\n  }\n\n  /** @returns {number} */\n  get halfSideLengthY() {\n    return this.halfSideLengths[1];\n  }\n  /** @param {number} value */\n  set halfSideLengthY(value) {\n    this.halfSideLengths[1] = value;\n    this._updateExtents();\n  }\n\n  /** @returns {number} */\n  get halfSideLengthZ() {\n    return this.halfSideLengths[2];\n  }\n  /** @param {number} value */\n  set halfSideLengthZ(value) {\n    this.halfSideLengths[2] = value;\n    this._updateExtents();\n  }\n\n  /**\n   * Calls the given callback once for each vertex.\n   *\n   * Stops as soon as the callback returns true for a vertex.\n   *\n   * @param {VertexCallback} callback\n   * @param {vec3} [vertex] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someVertex(callback, vertex) {\n    vertex = vertex || _vertex1;\n\n    for (let xScale = -1; xScale <= 1; xScale += 2) {\n      for (let yScale = -1; yScale <= 1; yScale += 2) {\n        for (let zScale = -1; zScale <= 1; zScale += 2) {\n          vec3.copy(vertex, this._center);\n          vec3.scaleAndAdd(vertex, vertex, this.extents[0], xScale);\n          vec3.scaleAndAdd(vertex, vertex, this.extents[1], yScale);\n          vec3.scaleAndAdd(vertex, vertex, this.extents[2], zScale);\n          if (callback(vertex)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Calls the given callback once for each edge.\n   *\n   * @param {EdgeCallback} callback\n   * @param {LineSegment} [edge] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someEdge(callback, edge) {\n    edge = edge || _segment;\n\n    return _edgeExtentScales.some(edgeExtentScalePair => {\n      const vertex1ExtentScales = edgeExtentScalePair[0];\n      const vertex2ExtentScales = edgeExtentScalePair[1];\n\n      // Calculate the edge's first and second vertex.\n      vec3.copy(_vertex1, this._center);\n      vec3.copy(_vertex2, this._center);\n      for (let i = 0; i < 3; i++) {\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\n      }\n\n      // Call back with the edge.\n      edge.reset(_vertex1, _vertex2);\n      return callback(edge);\n    });\n  }\n\n  /**\n   * Calls the given callback once for each face.\n   *\n   * @param {FaceCallback} callback\n   * @param {Array.<vec3>} [face] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  someFace(callback, face) {\n    face = face || [];\n\n    return _faceExtentScales.some(faceExtentScales => {\n      const vertex1ExtentScales = faceExtentScales[0];\n      const vertex2ExtentScales = faceExtentScales[1];\n      const vertex3ExtentScales = faceExtentScales[2];\n      const vertex4ExtentScales = faceExtentScales[3];\n\n      // Calculate the face's vertices.\n      vec3.copy(_vertex1, this._center);\n      vec3.copy(_vertex2, this._center);\n      vec3.copy(_vertex3, this._center);\n      vec3.copy(_vertex4, this._center);\n      for (let i = 0; i < 3; i++) {\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i], vertex3ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i], vertex4ExtentScales[i]);\n      }\n\n      // Call back with the face.\n      face.splice(0, 4, _vertex1, _vertex2, _vertex3, _vertex4);\n      return callback(face);\n    });\n  }\n\n  /**\n   * Calls the given callback once for each face with a given additional offset from the center\n   * applied to each face.\n   *\n   * @param {FaceCallback} callback\n   * @param {number} radiusOffset\n   * @param {Array.<vec3>} [face] Output param.\n   * @returns {boolean} True if one of the callbacks returned true.\n   */\n  somePushedOutFace(callback, radiusOffset, face) {\n    face = face || [];\n\n    return _faceExtentScales.some((faceExtentScales, index) => {\n      const vertex1ExtentScales = faceExtentScales[0];\n      const vertex2ExtentScales = faceExtentScales[1];\n      const vertex3ExtentScales = faceExtentScales[2];\n      const vertex4ExtentScales = faceExtentScales[3];\n      const directionOffsets = _pushedOutFaceOffsetDirections[index];\n\n      // Calculate the face's vertices.\n      vec3.copy(_vertex1, this._center);\n      vec3.copy(_vertex2, this._center);\n      vec3.copy(_vertex3, this._center);\n      vec3.copy(_vertex4, this._center);\n      for (let i = 0; i < 3; i++) {\n        // Add the offset for the normal vertex position.\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i], vertex3ExtentScales[i]);\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i], vertex4ExtentScales[i]);\n        // Add the pushed-out offset.\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i],\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\n      }\n\n      // Call back with the face.\n      face.splice(0, 4, _vertex1, _vertex2, _vertex3, _vertex4);\n      return callback(face);\n    });\n  }\n\n  _updateExtents() {\n    vec3.set(_vertex1, this.halfSideLengths[0], 0, 0);\n    vec3.transformQuat(this.extents[0], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, this.halfSideLengths[1], 0);\n    vec3.transformQuat(this.extents[1], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, 0, this.halfSideLengths[2]);\n    vec3.transformQuat(this.extents[2], _vertex1, this._orientation);\n\n    vec3.set(_vertex1, 1, 0, 0);\n    vec3.transformQuat(this.axes[0], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, 1, 0);\n    vec3.transformQuat(this.axes[1], _vertex1, this._orientation);\n    vec3.set(_vertex1, 0, 0, 1);\n    vec3.transformQuat(this.axes[2], _vertex1, this._orientation);\n  }\n}\n\nconst _vertex1 = vec3.create();\nconst _vertex2 = vec3.create();\nconst _vertex3 = vec3.create();\nconst _vertex4 = vec3.create();\nconst _segment = new LineSegment(vec3.create(), vec3.create());\n\nconst _edgeExtentScales = [\n  // Front-face edges.\n  [[1, -1, -1], [1, -1, 1]],\n  [[1, -1, -1], [1, 1, -1]],\n  [[1, 1, 1], [1, -1, 1]],\n  [[1, 1, 1], [1, 1, -1]],\n  // Back-face edges.\n  [[-1, -1, -1], [-1, -1, 1]],\n  [[-1, -1, -1], [-1, 1, -1]],\n  [[-1, 1, 1], [-1, -1, 1]],\n  [[-1, 1, 1], [-1, 1, -1]],\n  // Front-to-back edges.\n  [[1, -1, 1], [-1, -1, 1]],\n  [[1, 1, -1], [-1, 1, -1]],\n  [[1, 1, 1], [-1, 1, 1]],\n  [[1, -1, -1], [-1, -1, -1]],\n];\n\nconst _faceExtentScales = [\n  [[1, -1, -1], [1, -1, 1], [1, 1, 1], [1, 1, -1]],\n  [[-1, -1, -1], [-1, -1, 1], [-1, 1, 1], [-1, 1, -1]],\n  [[-1, 1, -1], [1, 1, -1], [1, 1, 1], [-1, 1, 1]],\n  [[-1, -1, -1], [1, -1, -1], [1, -1, 1], [-1, -1, 1]],\n  [[-1, -1, 1], [1, -1, 1], [1, 1, 1], [-1, 1, 1]],\n  [[-1, -1, -1], [1, -1, -1], [1, 1, -1], [-1, 1, -1]],\n];\n\nconst _pushedOutFaceOffsetDirections = [\n  vec3.fromValues(1, 0, 0),\n  vec3.fromValues(-1, 0, 0),\n  vec3.fromValues(0, 1, 0),\n  vec3.fromValues(0, -1, 0),\n  vec3.fromValues(0, 0, 1),\n  vec3.fromValues(0, 0, -1),\n];\n\nexport {Obb};\n\n/**\n * @callback VertexCallback\n * @param {vec3}\n * @returns {boolean} If true, iteration will stop.\n */\n\n/**\n * @callback EdgeCallback\n * @param {LineSegment}\n * @returns {boolean} If true, iteration will stop.\n */\n\n/**\n * @callback FaceCallback\n * @param {Array.<vec3>}\n * @returns {boolean} If true, iteration will stop.\n */\n","import {Collidable} from './collidable';\n\n/**\n * This class represents a bounding sphere.\n *\n * This is primarily useful for collision detection. A bounding sphere is only appropriate for some\n * geometries. For other geometries, an axially-aligned bounding box may be more appropriate. For\n * others still, an oriented bounding box or a more complicated hierarchical model may be more\n * appropriate.\n */\nclass Sphere extends Collidable {\n  /**\n   * @param {number} centerX\n   * @param {number} centerY\n   * @param {number} centerZ\n   * @param {number} radius\n   * @param {boolean} [isStationary=false]\n   * @param {CollidablePhysicsJob} [physicsJob]\n   */\n  constructor(centerX, centerY, centerZ, radius, isStationary = false, physicsJob) {\n    super(isStationary, physicsJob);\n    this.centerX = centerX;\n    this.centerY = centerY;\n    this.centerZ = centerZ;\n    this.radius = radius;\n  }\n\n  /**\n   * @returns {vec3}\n   * @override\n   */\n  get centerOfVolume() {\n    // Reuse the same object when this is called multiple times.\n    this._center = this._center || vec3.create();\n    vec3.set(this._center, this.centerX, this.centerY, this.centerZ);\n    return this._center;\n  }\n\n  /**\n   * @returns {Collidable}\n   * @override\n   */\n  get boundingVolume() {\n    return this;\n  }\n\n  /**\n   * @param {vec3} value\n   * @override\n   */\n  set position(value) {\n    this.centerX = value[0];\n    this.centerY = value[1];\n    this.centerZ = value[2];\n  }\n\n  /**\n   * @param {quat} value\n   * @override\n   */\n  set orientation(value) {\n    // Do nothing.\n  }\n}\n\nexport {Sphere};\n","import * as aabbCollisionDetection from './src/aabb-collision-detection';\nimport * as capsuleCollisionDetection from './src/capsule-collision-detection';\nimport * as obbCollisionDetection from './src/obb-collision-detection';\nimport * as sphereCollisionDetection from './src/sphere-collision-detection';\n\nexport {\n  aabbCollisionDetection,\n  capsuleCollisionDetection,\n  obbCollisionDetection,\n  sphereCollisionDetection,\n};\n","import * as sphereCollisionDetection from './sphere-collision-detection';\nimport * as obbCollisionDetection from './obb-collision-detection';\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\nimport {aabbVsPoint as geometryAabbVsPoint} from '../../../util';\n\n/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * axially-aligned bounding boxes and other shapes.\n */\n\n/**\n * @param {Aabb} aabb\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction aabbVsPoint(aabb, point) {\n  return geometryAabbVsPoint(aabb, point);\n}\n\n/**\n * @param {Aabb} aabb\n * @param {Sphere} sphere\n * @returns {boolean}\n */\nfunction aabbVsSphere(aabb, sphere) {\n  return sphereCollisionDetection.sphereVsAabb(sphere, aabb);\n}\n\n/**\n * @param {Aabb} aabbA\n * @param {Aabb} aabbB\n * @returns {boolean}\n */\nfunction aabbVsAabb(aabbA, aabbB) {\n  return aabbA.maxX >= aabbB.minX && aabbA.minX <= aabbB.maxX &&\n      aabbA.maxY >= aabbB.minY && aabbA.minY <= aabbB.maxY &&\n      aabbA.maxZ >= aabbB.minZ && aabbA.minZ <= aabbB.maxZ;\n}\n\n/**\n * @param {Aabb} aabb\n * @param {Obb} obb\n * @returns {boolean}\n */\nfunction aabbVsObb(aabb, obb) {\n  return obbCollisionDetection.obbVsAabb(obb, aabb);\n}\n\n/**\n * @param {Aabb} aabb\n * @param {Capsule} capsule\n * @returns {boolean}\n */\nfunction aabbVsCapsule(aabb, capsule) {\n  return capsuleCollisionDetection.capsuleVsAabb(capsule, aabb);\n}\n\nexport {\n  aabbVsPoint,\n  aabbVsSphere,\n  aabbVsAabb,\n  aabbVsObb,\n  aabbVsCapsule,\n};\n","/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * capsules and other shapes.\n */\n\nimport {\n  findClosestPointFromAabbToPoint,\n  findSquaredDistanceBetweenSegments,\n  findSquaredDistanceFromSegmentToPoint,\n  tmpVec1\n} from '../../../util';\nimport * as obbCollisionDetection from './obb-collision-detection';\n\n/**\n * @param {Capsule} capsule\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction capsuleVsPoint(capsule, point) {\n  return findSquaredDistanceFromSegmentToPoint(capsule.segment, point) <=\n      capsule.radius * capsule.radius;\n}\n\n/**\n * @param {Capsule} capsule\n * @param {Sphere} sphere\n * @returns {boolean}\n */\nfunction capsuleVsSphere(capsule, sphere) {\n  const sumOfRadii = capsule.radius + sphere.radius;\n  return findSquaredDistanceFromSegmentToPoint(capsule.segment, sphere.centerOfVolume) <=\n      sumOfRadii * sumOfRadii;\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {Capsule} capsule\n * @param {Aabb} aabb\n * @returns {boolean}\n */\nfunction capsuleVsAabb(capsule, aabb) {\n  const squaredRadius = capsule.radius * capsule.radius;\n\n  // Check whether the two capsule ends intersect the AABB (sphere vs AABB) (addresses the\n  // capsule-vs-AABB-face case).\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, capsule.segment.start);\n  if (vec3.squaredDistance(tmpVec1, capsule.segment.start) <= squaredRadius) {\n    return true;\n  }\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, capsule.segment.end);\n  if (vec3.squaredDistance(tmpVec1, capsule.segment.end) <= squaredRadius) {\n    return true;\n  }\n\n  // Check whether the capsule intersects with any AABB edge (addresses the capsule-vs-AABB-edge\n  // case).\n  return aabb.someEdge(edge =>\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) <= squaredRadius);\n\n  // (The capsule-vs-AABB-vertex case is covered by the capsule-vs-AABB-edge case).\n}\n\n/**\n * @param {Capsule} capsule\n * @param {Obb} obb\n * @returns {boolean}\n */\nfunction capsuleVsObb(capsule, obb) {\n  return obbCollisionDetection.obbVsCapsule(obb, capsule);\n}\n\n/**\n * @param {Capsule} capsuleA\n * @param {Capsule} capsuleB\n * @returns {boolean}\n */\nfunction capsuleVsCapsule(capsuleA, capsuleB) {\n  const sumOfRadii = capsuleA.radius + capsuleB.radius;\n  return findSquaredDistanceBetweenSegments(capsuleA.segment, capsuleB.segment) <=\n      sumOfRadii * sumOfRadii;\n}\n\nexport {\n  capsuleVsPoint,\n  capsuleVsSphere,\n  capsuleVsAabb,\n  capsuleVsObb,\n  capsuleVsCapsule,\n};\n","/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * oriented bounding boxes and other shapes.\n */\n\nimport {\n  findClosestPointFromObbToPoint,\n  findPoiBetweenSegmentAndPlaneRegion,\n  findSquaredDistanceBetweenSegments,\n  tmpVec1,\n  tmpVec2,\n  tmpVec3,\n  tmpVec4\n} from '../../../util';\nimport * as aabbCollisionDetection from './aabb-collision-detection';\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\n\n// TODO: Refactor these to not actually calculate the point of intersection. These checks can\n// instead be done more efficiently using SAT.\n\n/**\n * @param {Obb} obb\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction obbVsPoint(obb, point) {\n  vec3.subtract(tmpVec4, point, obb.centerOfVolume);\n\n  vec3.set(tmpVec1, 1, 0, 0);\n  vec3.transformQuat(tmpVec1, tmpVec1, obb.orientation);\n  const axis1Distance = vec3.dot(tmpVec4, tmpVec1);\n\n  if (axis1Distance >= -obb.halfSideLengthX && axis1Distance <= obb.halfSideLengthX) {\n    vec3.set(tmpVec2, 0, 1, 0);\n    vec3.transformQuat(tmpVec2, tmpVec2, obb.orientation);\n    const axis2Distance = vec3.dot(tmpVec4, tmpVec2);\n\n    if (axis2Distance >= -obb.halfSideLengthY && axis2Distance <= obb.halfSideLengthY) {\n      vec3.set(tmpVec3, 0, 0, 1);\n      vec3.transformQuat(tmpVec3, tmpVec3, obb.orientation);\n      const axis3Distance = vec3.dot(tmpVec4, tmpVec3);\n\n      return axis3Distance >= -obb.halfSideLengthZ && axis3Distance <= obb.halfSideLengthZ;\n    }\n  }\n\n  return false;\n}\n\n/**\n * @param {Obb} obb\n * @param {Sphere} sphere\n * @returns {boolean}\n */\nfunction obbVsSphere(obb, sphere) {\n  findClosestPointFromObbToPoint(tmpVec1, obb, sphere.centerOfVolume);\n  return vec3.squaredDistance(tmpVec1, sphere.centerOfVolume) <=\n      sphere.radius * sphere.radius;\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {Obb} obb\n * @param {Aabb} aabb\n * @returns {boolean}\n */\nfunction obbVsAabb(obb, aabb) {\n  return _obbVsBoxHelper(obb, aabb, aabbCollisionDetection.aabbVsPoint);\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {Obb} obbA\n * @param {Obb} obbB\n * @returns {boolean}\n */\nfunction obbVsObb(obbA, obbB) {\n  return _obbVsBoxHelper(obbA, obbB, obbVsPoint);\n}\n\n/**\n * @param {Obb} obb\n * @param {Obb|Aabb} other\n * @param {Function} otherVsPointCallback\n * @returns {boolean}\n * @private\n */\nfunction _obbVsBoxHelper(obb, other, otherVsPointCallback) {\n  // Check whether any vertices from A lie within B's bounds.\n  if (obb.someVertex(vertex => otherVsPointCallback(other, vertex))) return true;\n\n  // Check whether any vertices from B lie within A's bounds.\n  if (other.someVertex(vertex => obbVsPoint(obb, vertex))) return true;\n\n  // We assume that a vertex-to-face collision would have been detected by one of the two above\n  // checks. Any edge-to-edge collision must involve both an edge from A through a face of B and\n  // vice versa. So it is sufficient to only check the edges of one and the faces of the other.\n  if (other.someEdge(edge =>\n          obb.someFace(face =>\n              findPoiBetweenSegmentAndPlaneRegion(tmpVec1, edge, ...face))))\n    return true;\n\n  return false;\n}\n\n/**\n * @param {Obb} obb\n * @param {Capsule} capsule\n * @returns {boolean}\n */\nfunction obbVsCapsule(obb, capsule) {\n  // Check the edges.\n  const squaredRadius = capsule.radius * capsule.radius;\n  let areIntersecting = obb.someEdge(edge =>\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) < squaredRadius);\n\n  if (areIntersecting) return true;\n\n  // Check the faces.\n  areIntersecting = obb.somePushedOutFace(face =>\n          findPoiBetweenSegmentAndPlaneRegion(tmpVec1, capsule.segment, ...face), capsule.radius);\n\n  // Check for inclusion of one shape inside the other.\n  areIntersecting = areIntersecting || obbVsPoint(obb, capsule.centerOfVolume);\n  areIntersecting = areIntersecting || capsuleCollisionDetection.capsuleVsPoint(capsule,\n      obb.centerOfVolume);\n\n  return areIntersecting;\n}\n\nexport {\n  obbVsPoint,\n  obbVsSphere,\n  obbVsAabb,\n  obbVsObb,\n  obbVsCapsule,\n};\n","import {findClosestPointFromAabbToPoint, tmpVec1} from '../../../util';\nimport * as obbCollisionDetection from './obb-collision-detection';\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\n\n/**\n * This module defines utility methods for detecting whether intersection has occurred between\n * spheres and other shapes.\n */\n\n/**\n * @param {Sphere} sphere\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction sphereVsPoint(sphere, point) {\n  return vec3.squaredDistance(point, sphere.centerOfVolume) <= sphere.radius * sphere.radius;\n}\n\n/**\n * @param {Sphere} sphereA\n * @param {Sphere} sphereB\n * @returns {boolean}\n */\nfunction sphereVsSphere(sphereA, sphereB) {\n  const sumOfRadii = sphereA.radius + sphereB.radius;\n  return vec3.squaredDistance(sphereA.centerOfVolume, sphereB.centerOfVolume) <=\n      sumOfRadii * sumOfRadii;\n}\n\n/**\n * @param {Sphere} sphere\n * @param {Aabb} aabb\n * @returns {boolean}\n */\nfunction sphereVsAabb(sphere, aabb) {\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, sphere.centerOfVolume);\n  return vec3.squaredDistance(tmpVec1, sphere.centerOfVolume) <= sphere.radius * sphere.radius;\n}\n\n/**\n * @param {Sphere} sphere\n * @param {Obb} obb\n * @returns {boolean}\n */\nfunction sphereVsObb(sphere, obb) {\n  return obbCollisionDetection.obbVsSphere(obb, sphere);\n}\n\n/**\n * @param {Sphere} sphere\n * @param {Capsule} capsule\n * @returns {boolean}\n */\nfunction sphereVsCapsule(sphere, capsule) {\n  return capsuleCollisionDetection.capsuleVsSphere(capsule, sphere);\n}\n\nexport {\n  sphereVsPoint,\n  sphereVsSphere,\n  sphereVsAabb,\n  sphereVsObb,\n  sphereVsCapsule,\n};\n","import * as aabbContactCalculation from './src/aabb-contact-calculation';\nimport * as capsuleContactCalculation from './src/capsule-contact-calculation';\nimport * as obbContactCalculation from './src/obb-contact-calculation';\nimport * as sphereContactCalculation from './src/sphere-contact-calculation';\n\nexport {\n  aabbContactCalculation,\n  capsuleContactCalculation,\n  obbContactCalculation,\n  sphereContactCalculation,\n};\n","/**\n * This module defines utility methods for calculating a contact point between axially-aligned \n * bounding boxes and other shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport * as sphereContactCalculation from './sphere-contact-calculation';\nimport * as obbContactCalculation from './obb-contact-calculation';\nimport * as capsuleContactCalculation from './capsule-contact-calculation';\nimport {tmpVec1} from '../../../util';\nimport {aabbCollisionDetection} from '../../collision-detection';\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {vec3} point\n */\nfunction aabbVsPoint(contactPoint, contactNormal, aabb, point) {\n  vec3.copy(contactPoint, point);\n  findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {Sphere} sphere\n */\nfunction aabbVsSphere(contactPoint, contactNormal, aabb, sphere) {\n  sphereContactCalculation.sphereVsAabb(contactPoint, contactNormal, sphere, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabbA\n * @param {Aabb} aabbB\n */\nfunction aabbVsAabb(contactPoint, contactNormal, aabbA, aabbB) {\n  // Compute the contact normal.\n  vec3.set(contactNormal, 0, 0, 0);\n  const xIntersectionDepth = Math.min(aabbA.maxX - aabbB.minX, aabbB.maxX - aabbA.minX);\n  const yIntersectionDepth = Math.min(aabbA.maxY - aabbB.minY, aabbB.maxY - aabbA.minY);\n  const zIntersectionDepth = Math.min(aabbA.maxZ - aabbB.minZ, aabbB.maxZ - aabbA.minZ);\n  // Assume that the direction of intersection corresponds to whichever axis has the shallowest\n  // intersection.\n  if (xIntersectionDepth <= yIntersectionDepth) {\n    if (xIntersectionDepth <= zIntersectionDepth) {\n      contactNormal[0] = aabbA.maxX - aabbB.minX <= aabbB.maxX - aabbA.minX ? 1 : -1;\n    } else {\n      contactNormal[2] = aabbA.maxZ - aabbB.minZ <= aabbB.maxZ - aabbA.minZ ? 1 : -1;\n    }\n  } else {\n    if (yIntersectionDepth <= zIntersectionDepth) {\n      contactNormal[1] = aabbA.maxY - aabbB.minY <= aabbB.maxY - aabbA.minY ? 1 : -1;\n    } else {\n      contactNormal[2] = aabbA.maxZ - aabbB.minZ <= aabbB.maxZ - aabbA.minZ ? 1 : -1;\n    }\n  }\n\n  // TODO: The two AABBs form a square intersection cross-section region along the direction of the\n  // normal. Calculate the center of that square to use as the point of contact.\n  if (!aabbA.someVertex(vertex => aabbCollisionDetection.aabbVsPoint(aabbB, vertex),\n          contactPoint)) {\n    aabbB.someVertex(vertex => aabbCollisionDetection.aabbVsPoint(aabbA, vertex), contactPoint);\n  }\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {Obb} obb\n */\nfunction aabbVsObb(contactPoint, contactNormal, aabb, obb) {\n  obbContactCalculation.obbVsAabb(contactPoint, contactNormal, obb, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Aabb} aabb\n * @param {Capsule} capsule\n */\nfunction aabbVsCapsule(contactPoint, contactNormal, aabb, capsule) {\n  capsuleContactCalculation.capsuleVsAabb(contactPoint, contactNormal, capsule, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactNormal Output param.\n * @param {vec3} contactPoint\n * @param {Aabb} aabb\n * @private\n */\nfunction findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb) {\n  vec3.set(contactNormal, 0, 0, 0);\n  vec3.subtract(tmpVec1, contactPoint, aabb.centerOfVolume);\n  const xDistanceFromFace = aabb.rangeX / 2 - Math.abs(tmpVec1[0]);\n  const yDistanceFromFace = aabb.rangeY / 2 - Math.abs(tmpVec1[1]);\n  const zDistanceFromFace = aabb.rangeZ / 2 - Math.abs(tmpVec1[2]);\n  // Assume that the point is contacting whichever face it's closest to.\n  if (xDistanceFromFace <= yDistanceFromFace) {\n    if (xDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[0] = tmpVec1[0] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = tmpVec1[2] > 0 ? 1 : -1;\n    }\n  } else {\n    if (yDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[1] = tmpVec1[1] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = tmpVec1[2] > 0 ? 1 : -1;\n    }\n  }\n}\n\nexport {\n  aabbVsPoint,\n  aabbVsSphere,\n  aabbVsAabb,\n  aabbVsObb,\n  aabbVsCapsule,\n  findAabbNormalFromContactPoint,\n};\n","/**\n * This module defines utility methods for calculating a contact point between capsules and other \n * shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport {\n  findClosestPointFromAabbToPoint,\n  findClosestPointOnSegmentToPoint,\n  findClosestPointsFromSegmentToSegment,\n  tmpVec1,\n  tmpVec2\n} from '../../../util';\nimport * as obbContactCalculation from './obb-contact-calculation';\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {vec3} point\n */\nfunction capsuleVsPoint(contactPoint, contactNormal, capsule, point) {\n  vec3.copy(contactPoint, point);\n  findClosestPointOnSegmentToPoint(contactNormal, capsule.segment, point);\n  vec3.subtract(contactNormal, contactPoint, contactNormal);\n  vec3.normalize(contactNormal, contactNormal);\n}\n\n/**\n * Finds the closest point on the surface of the capsule to the sphere center.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {Sphere} sphere\n */\nfunction capsuleVsSphere(contactPoint, contactNormal, capsule, sphere) {\n  const sphereCenter = sphere.centerOfVolume;\n  findClosestPointOnSegmentToPoint(contactPoint, capsule.segment, sphereCenter);\n  vec3.subtract(contactNormal, sphereCenter, contactPoint);\n  vec3.normalize(contactNormal, contactNormal);\n  vec3.scaleAndAdd(contactPoint, contactPoint, contactNormal, capsule.radius);\n}\n\n/**\n * Finds the closest point on the surface of the capsule to the AABB.\n *\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {Aabb} aabb\n */\nfunction capsuleVsAabb(contactPoint, contactNormal, capsule, aabb) {\n  // tmpVec1 represents the closest point on the capsule to the AABB. tmpVec2\n  // represents the closest point on the AABB to the capsule.\n\n  //\n  // Check whether the two capsule ends intersect the AABB (sphere vs AABB) (addresses the\n  // capsule-vs-AABB-face case).\n  //\n\n  const squaredRadius = capsule.radius * capsule.radius;\n  let doesAabbIntersectAnEndPoint = false;\n\n  let endPoint = capsule.segment.start;\n  findClosestPointFromAabbToPoint(tmpVec2, aabb, endPoint);\n  if (vec3.squaredDistance(tmpVec2, endPoint) <= squaredRadius) {\n    doesAabbIntersectAnEndPoint = true;\n  } else {\n    endPoint = capsule.segment.end;\n    findClosestPointFromAabbToPoint(tmpVec2, aabb, endPoint);\n    if (vec3.squaredDistance(tmpVec2, endPoint) <= squaredRadius) {\n      doesAabbIntersectAnEndPoint = true;\n    }\n  }\n\n  if (!doesAabbIntersectAnEndPoint) {\n    //\n    // Check whether the capsule intersects with any AABB edge (addresses the capsule-vs-AABB-edge\n    // case).\n    //\n    aabb.someEdge(edge => {\n      findClosestPointsFromSegmentToSegment(tmpVec1, tmpVec2,\n          capsule.segment, edge);\n      const distance = vec3.squaredDistance(tmpVec1, tmpVec2);\n      return distance <= squaredRadius;\n    });\n  }\n\n  // (The capsule-vs-AABB-vertex case is covered by the capsule-vs-AABB-edge case).\n\n  findClosestPointOnSegmentToPoint(tmpVec1, capsule.segment, tmpVec2);\n  vec3.subtract(contactNormal, tmpVec2, tmpVec1);\n  vec3.normalize(contactNormal, contactNormal);\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, capsule.radius);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsule\n * @param {Obb} obb\n */\nfunction capsuleVsObb(contactPoint, contactNormal, capsule, obb) {\n  obbContactCalculation.obbVsCapsule(contactPoint, contactNormal, obb, capsule);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * Finds the closest point on the surface of capsule A to capsule B.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Capsule} capsuleA\n * @param {Capsule} capsuleB\n */\nfunction capsuleVsCapsule(contactPoint, contactNormal, capsuleA, capsuleB) {\n  findClosestPointsFromSegmentToSegment(tmpVec1, tmpVec2,\n      capsuleA.segment, capsuleB.segment);\n  vec3.subtract(contactNormal, tmpVec2, tmpVec1);\n  vec3.normalize(contactNormal, contactNormal);\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, capsuleA.radius);\n}\n\nexport {\n  capsuleVsPoint,\n  capsuleVsSphere,\n  capsuleVsAabb,\n  capsuleVsObb,\n  capsuleVsCapsule,\n};\n","/**\n * This module defines utility methods for calculating a contact point between oriented bounding\n * boxes and other shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport {\n  findPoiBetweenSegmentAndPlaneRegion,\n  findClosestPointFromObbToPoint,\n  findSquaredDistanceBetweenSegments,\n  findClosestPointsFromSegmentToSegment,\n  tmpVec1\n} from '../../../util';\nimport {aabbCollisionDetection, obbCollisionDetection} from '../../collision-detection';\nimport {LineSegment} from '../../collidables';\nimport * as aabbContactCalculation from './aabb-contact-calculation';\n\n// TODO: There are more efficient (but far more complicated) algorithms for finding the point of\n// intersection with OBBs. Port over some other pre-existing solutions for these.\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {vec3} point\n */\nfunction obbVsPoint(contactPoint, contactNormal, obb, point) {\n  vec3.copy(contactPoint, point);\n  findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\n}\n\n/**\n * Finds the closest point anywhere inside the OBB to the center of the sphere.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Sphere} sphere\n */\nfunction obbVsSphere(contactPoint, contactNormal, obb, sphere) {\n  findClosestPointFromObbToPoint(contactPoint, obb, sphere.centerOfVolume);\n  vec3.subtract(contactNormal, sphere.centerOfVolume, contactPoint);\n  vec3.normalize(contactNormal, contactNormal);\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Aabb} aabb\n */\nfunction obbVsAabb(contactPoint, contactNormal, obb, aabb) {\n  return _obbVsBoxHelper(contactPoint, contactNormal, obb, aabb, aabbCollisionDetection.aabbVsPoint,\n      aabbContactCalculation.findAabbNormalFromContactPoint);\n}\n\n/**\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\n * tunnelling problem for the rest of this collision system anyway.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obbA\n * @param {Obb} obbB\n */\nfunction obbVsObb(contactPoint, contactNormal, obbA, obbB) {\n  return _obbVsBoxHelper(contactPoint, contactNormal, obbA, obbB, obbCollisionDetection.obbVsPoint,\n      findObbNormalFromContactPoint);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Obb|Aabb} other\n * @param {Function} otherVsPointCollisionDetectionCallback\n * @param {Function} findOtherNormalFromContactPoint\n * @private\n */\nfunction _obbVsBoxHelper(contactPoint, contactNormal, obb, other,\n                         otherVsPointCollisionDetectionCallback,\n                         findOtherNormalFromContactPoint) {\n  // Check whether any vertices from A lie within B's bounds.\n  if (obb.someVertex(vertex => otherVsPointCollisionDetectionCallback(other, vertex),\n          contactPoint)) {\n    findOtherNormalFromContactPoint(contactNormal, contactPoint, other);\n    vec3.negate(contactNormal, contactNormal);\n    return;\n  }\n\n  // Check whether any vertices from B lie within A's bounds.\n  if (other.someVertex(vertex => obbCollisionDetection.obbVsPoint(obb, vertex), contactPoint)) {\n    findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\n    return;\n  }\n\n  // We assume that a vertex-to-face collision would have been detected by one of the two above\n  // checks. Any edge-to-edge collision must involve both an edge from A through a face of B and\n  // vice versa. So it is sufficient to only check the edges of one and the faces of the other.\n  other.someEdge(edge =>\n      obb.someFace(face => findPoiBetweenSegmentAndPlaneRegion(contactPoint, edge, ...face)));\n  findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Obb} obb\n * @param {Capsule} capsule\n */\nfunction obbVsCapsule(contactPoint, contactNormal, obb, capsule) {\n  // tmpVec1 is the point on the capsule segment that is closest to the OBB.\n\n  //\n  // Check the edges.\n  //\n\n  const segment = new LineSegment(vec3.create(), vec3.create());\n  const squaredRadius = capsule.radius * capsule.radius;\n  const areIntersecting = obb.someEdge(edge =>\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) < squaredRadius, segment);\n\n  if (areIntersecting) {\n    findClosestPointsFromSegmentToSegment(tmpVec1, contactPoint, capsule.segment, segment);\n    vec3.subtract(contactNormal, tmpVec1, contactPoint);\n    vec3.normalize(contactNormal, contactNormal);\n    return;\n  }\n\n  //\n  // Check the faces.\n  //\n\n  obb.somePushedOutFace(face =>\n      findPoiBetweenSegmentAndPlaneRegion(tmpVec1, capsule.segment, ...face), capsule.radius);\n\n  findObbNormalFromContactPoint(contactNormal, tmpVec1, obb);\n\n  // NOTE: This assumes that the angle between the capsule segment and the face plane is not oblique\n  // and that the depth of penetration is shallow. When both of these conditions are not true, the\n  // contact point will be offset from the intersection point on the pushed-out face.\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, -capsule.radius);\n}\n\n/**\n * @param {vec3} contactNormal Output param.\n * @param {vec3} contactPoint\n * @param {Obb} obb\n * @private\n */\nfunction findObbNormalFromContactPoint(contactNormal, contactPoint, obb) {\n  // Calculate the displacement along each axis.\n  const projections = [];\n  vec3.subtract(tmpVec1, contactPoint, obb.centerOfVolume);\n  for (let i = 0; i < 3; i++) {\n    projections[i] = vec3.dot(obb.axes[i], tmpVec1);\n  }\n\n  // Determine which face the normal is pointing away from.\n  vec3.set(contactNormal, 0, 0, 0);\n  const xDistanceFromFace = obb.halfSideLengths[0] - Math.abs(projections[0]);\n  const yDistanceFromFace = obb.halfSideLengths[1] - Math.abs(projections[1]);\n  const zDistanceFromFace = obb.halfSideLengths[2] - Math.abs(projections[2]);\n  // Assume that the point is contacting whichever face it's closest to.\n  if (xDistanceFromFace <= yDistanceFromFace) {\n    if (xDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[0] = projections[0] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = projections[2] > 0 ? 1 : -1;\n    }\n  } else {\n    if (yDistanceFromFace <= zDistanceFromFace) {\n      contactNormal[1] = projections[1] > 0 ? 1 : -1;\n    } else {\n      contactNormal[2] = projections[2] > 0 ? 1 : -1;\n    }\n  }\n\n  // Apply the OBB's orientation to the normal.\n  vec3.transformQuat(contactNormal, contactNormal, obb.orientation);\n}\n\nexport {\n  obbVsPoint,\n  obbVsSphere,\n  obbVsAabb,\n  obbVsObb,\n  obbVsCapsule,\n  findObbNormalFromContactPoint,\n};\n","/**\n * This module defines utility methods for calculating a contact point between spheres and other\n * shapes.\n *\n * - Each of these functions assumes that the objects are actually colliding.\n * - The resulting contact point may be anywhere within the intersection of the two objects.\n */\n\nimport {findClosestPointFromAabbSurfaceToPoint} from '../../../util';\nimport {findAabbNormalFromContactPoint} from './aabb-contact-calculation';\nimport * as obbContactCalculation from './obb-contact-calculation';\nimport * as capsuleContactCalculation from './capsule-contact-calculation';\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {vec3} point\n */\nfunction sphereVsPoint(contactPoint, contactNormal, sphere, point) {\n  vec3.copy(contactPoint, point);\n  // Assume that the point is contacting the closest point on the surface of the sphere.\n  vec3.subtract(contactNormal, point, sphere.centerOfVolume);\n  vec3.normalize(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphereA\n * @param {Sphere} sphereB\n */\nfunction sphereVsSphere(contactPoint, contactNormal, sphereA, sphereB) {\n  vec3.subtract(contactNormal, sphereB.centerOfVolume, sphereA.centerOfVolume);\n  vec3.normalize(contactNormal, contactNormal);\n  // The point on the surface of sphere A that is closest to the center of sphere B.\n  vec3.scaleAndAdd(contactPoint, sphereA.centerOfVolume, contactNormal, sphereA.radius);\n}\n\n/**\n * Finds the closest point on the surface of the AABB to the sphere center.\n *\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {Aabb} aabb\n */\nfunction sphereVsAabb(contactPoint, contactNormal, sphere, aabb) {\n  findClosestPointFromAabbSurfaceToPoint(contactPoint, aabb, sphere.centerOfVolume);\n  findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {Obb} obb\n */\nfunction sphereVsObb(contactPoint, contactNormal, sphere, obb) {\n  obbContactCalculation.obbVsSphere(contactPoint, contactNormal, obb, sphere);\n  vec3.negate(contactNormal, contactNormal);\n}\n\n/**\n * @param {vec3} contactPoint Output param.\n * @param {vec3} contactNormal Output param.\n * @param {Sphere} sphere\n * @param {Capsule} capsule\n */\nfunction sphereVsCapsule(contactPoint, contactNormal, sphere, capsule) {\n  capsuleContactCalculation.capsuleVsSphere(contactPoint, contactNormal, capsule, sphere);\n  vec3.negate(contactNormal, contactNormal);\n}\n\nexport {\n  sphereVsPoint,\n  sphereVsSphere,\n  sphereVsAabb,\n  sphereVsObb,\n  sphereVsCapsule,\n};\n","export * from './collidables';\nexport * from './collision-detection';\nexport * from './contact-calculation';\n\nexport * from './src/collidable-factories';\nexport * from './src/collidable-physics-job';\nexport * from './src/collidable-store';\nexport * from './src/collision-handler';\nexport * from './src/collision-utils';\n","/**\n * This module defines a set of factory functions for creating Collidable instances.\n */\n\nimport {\n  Capsule,\n  Obb,\n  Sphere\n} from '../collidables';\nimport {_geometry} from '../../util';\n\n/**\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createCollidableFromRenderableShape(params, physicsJob) {\n  return _collidableCreators[params.collidableShapeId](params, physicsJob);\n}\n\n/**\n * This assumes the base RenderableShape has a side length of one unit.\n *\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createObbFromRenderableShape(params, physicsJob) {\n  const halfRangeX = params.scale[0] / 2;\n  const halfRangeY = params.scale[1] / 2;\n  const halfRangeZ = params.scale[2] / 2;\n  return new Obb(halfRangeX, halfRangeY, halfRangeZ, params.isStationary, physicsJob);\n}\n\n/**\n * This assumes the base RenderableShape has a \"radius\" of one unit.\n *\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createSphereFromRenderableShape(params, physicsJob) {\n  const radius = params.radius || vec3.length(params.scale) / Math.sqrt(3);\n  return new Sphere(0, 0, 0, radius, params.isStationary, physicsJob);\n}\n\n/**\n * The radius of the created capsule will be an average from the two shortest sides.\n *\n * There are two modes: either we use scale, or we use radius and capsuleEndPointsDistance.\n *\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createCapsuleFromRenderableShape(params, physicsJob) {\n  const scale = params.scale;\n  const capsuleEndPointsDistance = params.capsuleEndPointsDistance;\n  const isStationary = params.isStationary;\n  let radius = params.radius;\n\n  let halfDistance;\n\n  // There are two modes: either we use scale, or we use radius and capsuleEndPointsDistance.\n  if (typeof radius === 'number' && typeof capsuleEndPointsDistance === 'number') {\n    halfDistance = capsuleEndPointsDistance / 2;\n  } else {\n    const copy = vec3.clone(scale);\n    copy.sort();\n\n    const length = copy[2];\n    radius = (copy[0] + copy[1]) / 2;\n    halfDistance = length / 2 - radius;\n  }\n\n  const orientation = quat.create();\n  if (scale[0] > scale[1]) {\n    if (scale[0] > scale[2]) {\n      vec3.rotateY(orientation, orientation, _geometry.HALF_PI);\n    } else {\n      // Do nothing; the capsule defaults to being aligned with the z-axis.\n    }\n  } else {\n    if (scale[1] > scale[2]) {\n      vec3.rotateX(orientation, orientation, -_geometry.HALF_PI);\n    } else {\n      // Do nothing; the capsule defaults to being aligned with the z-axis.\n    }\n  }\n\n  const capsule = new Capsule(halfDistance, radius, isStationary, physicsJob);\n  capsule.orientation = orientation;\n\n  return capsule;\n}\n\n/**\n * @param {CollidableShapeConfig} params\n * @param {CollidablePhysicsJob} [physicsJob]\n * @returns {Collidable}\n */\nfunction createSphereOrCapsuleFromRenderableShape(params, physicsJob) {\n  const scale = params.scale;\n  const radius = params.radius;\n  const capsuleEndPointsDistance = params.capsuleEndPointsDistance;\n\n  const halfLengthX = scale[0] * radius;\n  const halfLengthY = scale[1] * radius;\n  const halfLengthZ = scale[2] * (radius + capsuleEndPointsDistance) / 2;\n\n  const minLength = Math.min(Math.min(halfLengthX, halfLengthY), halfLengthZ);\n  const maxLength = Math.max(Math.max(halfLengthX, halfLengthY), halfLengthZ);\n\n  if (maxLength / minLength >= _SPHERE_VS_CAPSULE_ASPECT_RATIO_THRESHOLD) {\n    return createCapsuleFromRenderableShape(params, physicsJob);\n  } else {\n    return createSphereFromRenderableShape(params, physicsJob);\n  }\n}\n\nconst _SPHERE_VS_CAPSULE_ASPECT_RATIO_THRESHOLD = 2;\n\nconst _collidableCreators = {\n  'CUBE': createObbFromRenderableShape,\n  'SPHERE_OR_CAPSULE': createSphereOrCapsuleFromRenderableShape,\n  'SPHERE': createSphereFromRenderableShape,\n  'CAPSULE': createCapsuleFromRenderableShape,\n};\n\nexport {\n  createCapsuleFromRenderableShape,\n  createCollidableFromRenderableShape,\n  createObbFromRenderableShape,\n  createSphereFromRenderableShape,\n  createSphereOrCapsuleFromRenderableShape,\n};\n\n/**\n * @typedef {Object} CollidableShapeConfig\n * @property {string} collidableShapeId The ID of the type of collidable shape.\n * @property {vec3} [scale]\n * @property {boolean} [isStationary=false] Whether the collidable is fixed in place.\n */\n\n/**\n * @typedef {CollidableShapeConfig} SphericalCollidableShapeParams\n * @property {number} radius\n */\n\n/**\n * @typedef {SphericalCollidableShapeParams} CapsuleCollidableShapeParams\n * @property {number} capsuleEndPointsDistance The distance between the centers of the spheres on either end\n * of the capsule.\n */\n","import {createCollidableFromRenderableShape} from './collidable-factories';\nimport {collidableStore} from './collidable-store';\nimport {PhysicsJob} from '../../src/physics-job';\nimport {createForCollidable} from '../../util';\n\n/**\n * A CollidablePhysicsJob extends the standard PhysicsJob with a collidable geometry.\n */\nclass CollidablePhysicsJob extends PhysicsJob {\n  /**\n   * @param {CollidableShapeConfig} collidableParams\n   * @param {PhysicsState} state\n   * @param {Array.<ForceApplier>} forceAppliers\n   * @param {Object} controller\n   * @param {CollisionHandler} collisionHandler\n   */\n  constructor(collidableParams, state, forceAppliers, controller, collisionHandler) {\n    super(forceAppliers, state);\n\n    collidableParams.scale = collidableParams.scale || vec3.fromValues(1, 1, 1);\n    this.collidable = createCollidableFromRenderableShape(collidableParams, this);\n    this.currentState.unrotatedInertiaTensor =\n        createForCollidable(this.collidable, this.currentState.mass);\n    this.currentState.updateDependentFields();\n    this.isAtRest = false;\n    this.controller = controller;\n    this._collisionHandler = collisionHandler;\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   */\n  addForceApplier(forceApplier) {\n    super.addForceApplier(forceApplier);\n    this.isAtRest = false;\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   */\n  removeForceApplier(forceApplier) {\n    super.removeForceApplier(forceApplier);\n    this.isAtRest = false;\n  }\n\n  /**\n   * This callback is triggered in response to a collision.\n   *\n   * @param {Collision} collision\n   * @returns {boolean} True if this needs the standard collision restitution to proceed.\n   */\n  handleCollision(collision) {\n    return this._collisionHandler(collision);\n  }\n\n  /**\n   * @param {number} [startTime]\n   * @override\n   */\n  start(startTime) {\n    super.start(startTime);\n    collidableStore.registerCollidable(this.collidable);\n  }\n\n  /**\n   * @override\n   */\n  finish() {\n    super.finish();\n    collidableStore.unregisterCollidable(this.collidable);\n  }\n\n  /** @returns {vec3} */\n  get position() {\n    return this.currentState.position;\n  }\n\n  /** @param {vec3} value */\n  set position(value) {\n    this.currentState.position = vec3.clone(value);\n    this.collidable.position = vec3.clone(value);\n  }\n}\n\nexport {CollidablePhysicsJob};\n\n/**\n * @typedef {Function} CollisionHandler\n * @param {Collision} collision\n * @returns {boolean} True if this needs the standard collision restitution to proceed.\n */\n","import {detectBoundingVolumeIntersection} from './collision-utils';\n\n// TODO: Implement some form of bounding volume hierarchy to make searching for potential collisions\n// more efficient.\n\n/**\n * This class registers and retrieves all Collidables within a scene.\n */\nclass CollidableStore {\n  constructor() {\n    this._collidables = [];\n  }\n\n  /**\n   * Caches the given program wrapper.\n   *\n   * This method is idempotent; a given program will only be cached once.\n   *\n   * @param {Collidable} collidable\n   */\n  registerCollidable(collidable) {\n    this._collidables.push(collidable);\n  }\n\n  /**\n   * @param {Collidable} collidable\n   */\n  unregisterCollidable(collidable) {\n    const index = this._collidables.indexOf(collidable);\n    if (index >= 0) {\n      this._collidables.splice(index, 1);\n    }\n  }\n\n  /**\n   * @param {Collidable} collidable\n   * @returns {Array.<Collidable>}\n   */\n  getPossibleCollisionsForCollidable(collidable) {\n    return this._collidables.filter(other =>\n      collidable !== other &&\n      detectBoundingVolumeIntersection(collidable, other));\n  }\n\n  /**\n   * @returns {Array.<Collision>}\n   */\n  getPossibleCollisionsForAllCollidables() {\n    const result = [];\n    for (let i = 0, count = this._collidables.length; i < count; i++) {\n      const collidableA = this._collidables[i];\n      for (let j = i + 1; j < count; j++) {\n        const collidableB = this._collidables[j];\n        if (detectBoundingVolumeIntersection(collidableA, collidableB)) {\n          result.push({collidableA: collidableA, collidableB: collidableB});\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param {Function} callback\n   */\n  forEach(callback) {\n    this._collidables.forEach(callback);\n  }\n}\n\nconst collidableStore = new CollidableStore();\nexport {collidableStore};\n\n/**\n * @typedef {Object} Collision\n * @property {Collidable} collidableA\n * @property {Collidable} collidableB\n * @property {vec3} [contactPoint] In world coordinates.\n * @property {vec3} [contactNormal] Points away from body A and toward body B.\n * @property {number} [time]\n */\n","import {\n  areVec3sClose,\n  tmpVec1,\n  tmpVec2,\n  tmpVec3,\n  tmpVec4,\n} from '../../util';\n\nimport {collidableStore} from './collidable-store';\nimport {detectIntersection, calculateContact} from './collision-utils';\n\n/**\n * This module defines a collision pipeline.\n *\n * These functions will detect collisions between collidable bodies and update their momenta in\n * response to the collisions.\n *\n * - Consists of an efficient broad-phase collision detection step followed by a precise\n *   narrow-phase step.\n * - Calculates the position, surface normal, and time of each contact.\n * - Calculates the impulse of a collision and updates the bodies' linear and angular momenta in\n *   response.\n * - Applies Coulomb friction to colliding bodies.\n * - Sub-divides the time step to more precisely determine when and where a collision occurs.\n * - Supports multiple collisions with a single body in a single time step.\n * - Efficiently supports bodies coming to rest against each other.\n * - Bodies will never penetrate one another.\n * - This does not address the tunnelling problem. That is, it is possible for two fast-moving\n *   bodies to pass through each other as long as they did not intersect each other during any time\n *   step.\n * - This only supports collisions between certain types of shapes. Fortunately, this set provides\n *   reasonable approximations for most other shapes. The supported types of shapes are: spheres,\n *   capsules, AABBs, and OBBs.\n *\n * ## Objects that come to rest\n *\n * An important efficiency improvement is to not process objects through the physics engine pipeline\n * after they have come to rest. The isAtRest field indicates when a body has come to rest.\n *\n * isAtRest is set to true after a physics frame is finished if the collisions, forces, position,\n * and orientation of a job have not changed from the previous to the current state.\n *\n * isAtRest is set to false from two possible events: after a physics frame is finished if the\n * collisions have changed from the previous to the current state, or when a force is added to\n * removed from the job.\n *\n * ## Collision calculations do not consider velocity\n *\n * Collision detection works by waiting until two bodies intersect. However, because time frames are\n * not infinitely small, when an intersection is detected, it's already past the exact instance of\n * collision. To alleviate problems from this, the velocity of each body can be considered when\n * calculating the collision time, position, and contact normal. However, taking velocity into\n * account makes the contact calculations much more complex, so we do not consider velocity in our\n * calculations.\n *\n * A notable consequence of this is that the calculated contact normals can be incorrect. Consider\n * the following moving squares. At time t2 they are found to have collided. The calculated contact\n * point will be somewhere within the intersection of the corners. But the calculated contact normal\n * will point upwards, while the true contact normal should point to the right. This is because the\n * contact calculations do not consider velocity and instead only consider the shallowest direction\n * of overlap.\n *\n * // Time t1\n *                    +------------+\n *                    |            |\n *                    |            |\n *                <-- |      B     |\n *                    |            |\n *  +------------+    |            |\n *  |            |    +------------+\n *  |            |\n *  |      A     | -->\n *  |            |\n *  |            |\n *  +------------+\n *\n * // Time t2\n *         +------------+\n *         |            |\n *         |            |\n *         |      B     |\n *         |            |\n *  +------------+      |\n *  |      +-----|------+\n *  |            |\n *  |      A     |\n *  |            |\n *  |            |\n *  +------------+\n */\n\n/**\n * Detect and handle any collisions between a given job and all other collidable bodies.\n *\n * @param {CollidablePhysicsJob} job\n * @param {DOMHighResTimeStamp} elapsedTime\n * @param {PhysicsConfig} physicsParams\n */\nfunction handleCollisionsForJob(job, elapsedTime, physicsParams) {\n  const collidable = job.collidable;\n\n  // Clear any previous collision info.\n  collidable.previousCollisions = collidable.collisions;\n  collidable.collisions = [];\n\n  // Find all colliding collidables.\n  const collidingCollidables = findIntersectingCollidablesForCollidable(collidable);\n\n  // Store the time of collision for each collision.\n  const collisions = _recordCollisions(collidable, collidingCollidables, elapsedTime);\n\n  // Calculate the points of contact for each collision.\n  _calculatePointsOfContact(collisions);\n\n  // Collision resolution.\n  _resolveCollisions(collisions, physicsParams);\n}\n\n/**\n * Finds all other collidables that intersect with the given collidable.\n *\n * @param {Collidable} collidable\n * @returns {Array.<Collidable>}\n */\nfunction findIntersectingCollidablesForCollidable(collidable) {\n  // Broad-phase collision detection (pairs whose bounding volumes intersect).\n  const collidingCollidables = collidableStore.getPossibleCollisionsForCollidable(collidable);\n\n  // Narrow-phase collision detection (pairs that actually intersect).\n  return _detectPreciseCollisionsFromCollidingCollidables(collidable, collidingCollidables);\n}\n\n/**\n * @param {Array.<CollidablePhysicsJob>} jobs\n */\nfunction determineJobsAtRest(jobs) {\n  jobs.forEach(job => job.isAtRest = _isJobAtRest(job));\n}\n\nfunction recordOldCollisionsForDevModeForAllCollidables() {\n  collidableStore.forEach(_recordOldCollisionsForDevModeForCollidable);\n}\n\n/**\n * Logs a warning message for any pair of objects that intersect.\n */\nfunction checkThatNoObjectsCollide() {\n  // Broad-phase collision detection (pairs whose bounding volumes intersect).\n  let collisions = collidableStore.getPossibleCollisionsForAllCollidables();\n\n  // Narrow-phase collision detection (pairs that actually intersect).\n  collisions = _detectPreciseCollisionsFromCollisions(collisions);\n\n  collisions.forEach(collision => {\n    console.warn('Objects still intersect after collision resolution', collision);\n  });\n}\n\n/**\n * Create collision objects that record the time of collision and the collidables in the collision.\n *\n * Also record references to these collisions on the collidables.\n *\n * @param {Collidable} collidable\n * @param {Array.<Collidable>} collidingCollidables\n * @param {DOMHighResTimeStamp} elapsedTime\n * @returns {Array.<Collision>}\n * @private\n */\nfunction _recordCollisions(collidable, collidingCollidables, elapsedTime) {\n  return collidingCollidables.map(other => {\n    const collision = {\n      collidableA: collidable,\n      collidableB: other,\n      time: elapsedTime\n    };\n\n    // Record the fact that these objects collided (the ModelController may want to handle this).\n    collision.collidableA.collisions.push(collision);\n    collision.collidableB.collisions.push(collision);\n\n    return collision;\n  });\n}\n\n/**\n * Narrow-phase collision detection.\n *\n * Given a list of possible collision pairs, filter out which pairs are actually colliding.\n *\n * @param {Array.<Collision>} collisions\n * @returns {Array.<Collision>}\n * @private\n */\nfunction _detectPreciseCollisionsFromCollisions(collisions) {\n  return collisions.filter(collision => {\n    // TODO:\n    // - Use temporal bisection with discrete sub-time steps to find time of collision (use\n    //       x-vs-y-specific intersection detection methods).\n    // - Make sure the collision object is set up with the \"previousState\" from the sub-step\n    //   before collision and the time from the sub-step after collision (determined from the\n    //   previous temporal bisection search...)\n\n    return detectIntersection(collision.collidableA, collision.collidableB);\n  });\n}\n\n/**\n * Narrow-phase collision detection.\n *\n * Given a list of possible collision pairs, filter out which pairs are actually colliding.\n *\n * @param {Collidable} collidable\n * @param {Array.<Collidable>} collidingCollidables\n * @returns {Array.<Collidable>}\n * @private\n */\nfunction _detectPreciseCollisionsFromCollidingCollidables(collidable, collidingCollidables) {\n  return collidingCollidables.filter(other => {\n    // TODO:\n    // - Use temporal bisection with discrete sub-time steps to find time of collision (use\n    //       x-vs-y-specific intersection detection methods).\n    // - Make sure the collision object is set up with the \"previousState\" from the sub-step\n    //   before collision and the time from the sub-step after collision (determined from the\n    //   previous temporal bisection search...)\n\n    return detectIntersection(collidable, other);\n  });\n}\n\n/**\n * Calculate the intersection position and contact normal of each collision.\n *\n * @param {Array.<Collision>} collisions\n * @private\n */\nfunction _calculatePointsOfContact(collisions) {\n  collisions.forEach(calculateContact);\n}\n\n/**\n * Updates the linear and angular momenta of each body in response to its collision.\n *\n * @param {Array.<Collision>} collisions\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _resolveCollisions(collisions, physicsParams) {\n  collisions.forEach(collision => {\n    // If neither physics job needs the standard collision restitution, then don't do it.\n    if (_notifyPhysicsJobsOfCollision(collision)) {\n      if (collision.collidableA.physicsJob && collision.collidableB.physicsJob) {\n        // Neither of the collidables is stationary.\n        _resolveCollision(collision, physicsParams);\n      } else {\n        // One of the two collidables is stationary.\n        _resolveCollisionWithStationaryObject(collision, physicsParams);\n      }\n    }\n  });\n}\n\n/**\n * @param {Collision} collision\n * @returns {boolean} True if one of the PhysicsJobs need the standard collision restitution to\n * proceed.\n * @private\n */\nfunction _notifyPhysicsJobsOfCollision(collision) {\n  return collision.collidableA.physicsJob.handleCollision(collision) ||\n      collision.collidableB.physicsJob.handleCollision(collision)\n}\n\n/**\n * Resolve a collision between two moving, physics-based objects.\n *\n * This is based on collision-response algorithms from Wikipedia\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model).\n *\n * @param {Collision} collision\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _resolveCollision(collision, physicsParams) {\n  const collidableA = collision.collidableA;\n  const collidableB = collision.collidableB;\n  const previousStateA = collidableA.physicsJob.previousState;\n  const previousStateB = collidableB.physicsJob.previousState;\n  const nextStateA = collidableA.physicsJob.currentState;\n  const nextStateB = collidableB.physicsJob.currentState;\n  const centerA = collidableA.centerOfMass;\n  const centerB = collidableB.centerOfMass;\n  const contactPoint = collision.contactPoint;\n\n  const contactPointOffsetA = tmpVec3;\n  vec3.subtract(contactPointOffsetA, contactPoint, centerA);\n  const contactPointOffsetB = tmpVec4;\n  vec3.subtract(contactPointOffsetB, contactPoint, centerB);\n\n  //\n  // Calculate the relative velocity of the bodies at the point of contact.\n  //\n  // We use the velocity from the previous state, since it is the velocity that led to the\n  // collision.\n  //\n\n  const velocityA = tmpVec1;\n  vec3.cross(tmpVec1, previousStateA.angularVelocity, contactPointOffsetA);\n  vec3.add(velocityA, previousStateA.velocity, tmpVec1);\n\n  const velocityB = tmpVec2;\n  vec3.cross(tmpVec2, previousStateB.angularVelocity, contactPointOffsetB);\n  vec3.add(velocityB, previousStateB.velocity, tmpVec2);\n\n  const relativeVelocity = vec3.create();\n  vec3.subtract(relativeVelocity, velocityB, velocityA);\n\n  if (vec3.dot(relativeVelocity, collision.contactNormal) >= 0) {\n    // If the relative velocity is not pointing against the normal, then the normal was calculated\n    // incorrectly (this is likely due to the time step being too large and the fact that our\n    // contact calculations don't consider velocity). So update the contact normal to be in the\n    // direction of the relative velocity.\n\n    // TODO: Check that this works as expected.\n\n    // console.warn('Non-collision because objects are moving away from each other.');\n\n    vec3.copy(collision.contactNormal, relativeVelocity);\n    vec3.normalize(collision.contactNormal, collision.contactNormal);\n    vec3.negate(collision.contactNormal, collision.contactNormal);\n  }\n\n  _applyImpulseFromCollision(collision, relativeVelocity, contactPointOffsetA,\n      contactPointOffsetB, physicsParams);\n\n  // NOTE: This state reversion is only applied to collidableA. This assumes that only A is moving\n  // during this iteration of the collision pipeline.\n\n  // Revert to the position and orientation from immediately before the collision.\n  vec3.copy(nextStateA.position, previousStateA.position);\n  quat.copy(nextStateA.orientation, previousStateA.orientation);\n\n  // Also revert the collidables' position and orientation.\n  collidableA.position = previousStateA.position;\n  collidableA.orientation = previousStateA.orientation;\n\n  nextStateA.updateDependentFields();\n  nextStateB.updateDependentFields();\n}\n\n/**\n * Resolve a collision between one moving, physics-based object and one stationary object.\n *\n * @param {Collision} collision\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _resolveCollisionWithStationaryObject(collision, physicsParams) {\n  const contactNormal = collision.contactNormal;\n\n  let physicsCollidable;\n  if (collision.collidableA.physicsJob) {\n    physicsCollidable = collision.collidableA;\n  } else {\n    physicsCollidable = collision.collidableB;\n    vec3.negate(contactNormal, contactNormal);\n  }\n\n  const previousState = physicsCollidable.physicsJob.previousState;\n  const nextState = physicsCollidable.physicsJob.currentState;\n  const center = physicsCollidable.centerOfMass;\n  const contactPoint = collision.contactPoint;\n\n  const contactPointOffset = tmpVec3;\n  vec3.subtract(contactPointOffset, contactPoint, center);\n\n  // Calculate the relative velocity of the bodies at the point of contact. We use the velocity from\n  // the previous state, since it is the velocity that led to the collision.\n  const velocity = vec3.create();\n  vec3.cross(tmpVec1, previousState.angularVelocity, contactPointOffset);\n  vec3.add(velocity, previousState.velocity, tmpVec1);\n\n  if (vec3.dot(velocity, contactNormal) <= 0) {\n    // If the relative velocity is not pointing against the normal, then the normal was calculated\n    // incorrectly (this is likely due to the time step being too large and the fact that our\n    // contact calculations don't consider velocity). So update the contact normal to be in the\n    // direction of the relative velocity.\n\n    // TODO: Check that this works as expected.\n\n    console.warn('Non-collision because object is moving away from stationary object.');\n\n    vec3.copy(collision.contactNormal, velocity);\n    vec3.normalize(collision.contactNormal, collision.contactNormal);\n    vec3.negate(collision.contactNormal, collision.contactNormal);\n  }\n\n  _applyImpulseFromCollisionWithStationaryObject(physicsCollidable, collision, velocity,\n      contactPointOffset, physicsParams);\n\n  // Revert to the position and orientation from immediately before the collision.\n  vec3.copy(nextState.position, previousState.position);\n  quat.copy(nextState.orientation, previousState.orientation);\n\n  // Also revert the collidable's position and orientation.\n  physicsCollidable.position = previousState.position;\n  physicsCollidable.orientation = previousState.orientation;\n\n  nextState.updateDependentFields();\n}\n\n/**\n * This is based on collision-response algorithms from Wikipedia\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model). This algorithm\n * has been simplified by assuming the stationary body has infinite mass and zero velocity.\n *\n * @param {Collision} collision\n * @param {vec3} relativeVelocity\n * @param {vec3} contactPointOffsetA\n * @param {vec3} contactPointOffsetB\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _applyImpulseFromCollision(collision, relativeVelocity, contactPointOffsetA,\n                                    contactPointOffsetB, physicsParams) {\n  const collidableA = collision.collidableA;\n  const collidableB = collision.collidableB;\n\n  const stateA = collidableA.physicsJob.currentState;\n  const stateB = collidableB.physicsJob.currentState;\n\n  const contactNormal = collision.contactNormal;\n\n  //\n  // Calculate and apply the main collision impulse.\n  //\n\n  vec3.scale(tmpVec1, relativeVelocity, -(1 + physicsParams.coefficientOfRestitution));\n  const numerator = vec3.dot(tmpVec1, contactNormal);\n\n  vec3.cross(tmpVec1, contactPointOffsetA, contactNormal);\n  vec3.transformMat3(tmpVec1, tmpVec1, stateA.inverseInertiaTensor);\n  vec3.cross(tmpVec1, tmpVec1, contactPointOffsetA);\n\n  vec3.cross(tmpVec2, contactPointOffsetB, contactNormal);\n  vec3.transformMat3(tmpVec2, tmpVec2, stateB.inverseInertiaTensor);\n  vec3.cross(tmpVec2, tmpVec2, contactPointOffsetB);\n\n  vec3.add(tmpVec1, tmpVec1, tmpVec2);\n  const denominator = vec3.dot(tmpVec1, contactNormal) + stateA.inverseMass + stateB.inverseMass;\n\n  const impulseMagnitude = numerator / denominator;\n\n  _applyImpulse(stateA, -impulseMagnitude, contactNormal, contactPointOffsetA);\n  _applyImpulse(stateB, impulseMagnitude, contactNormal, contactPointOffsetB);\n\n  //\n  // Calculate and apply a dynamic friction impulse.\n  //\n\n  const frictionImpulseMagnitude = impulseMagnitude * physicsParams.coefficientOfFriction;\n\n  const tangent = tmpVec2;\n  vec3.scale(tmpVec1, contactNormal, vec3.dot(relativeVelocity, contactNormal));\n  vec3.subtract(tangent, relativeVelocity, tmpVec1);\n  vec3.normalize(tangent, tangent);\n\n  _applyImpulse(stateA, frictionImpulseMagnitude, tangent, contactPointOffsetA);\n  _applyImpulse(stateB, -frictionImpulseMagnitude, tangent, contactPointOffsetB);\n}\n\n/**\n * This is based on collision-response algorithms from Wikipedia\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model). This algorithm\n * has been simplified by assuming the stationary body has infinite mass and zero velocity.\n *\n * @param {Collidable} physicsCollidable\n * @param {Collision} collision\n * @param {vec3} velocity\n * @param {vec3} contactPointOffset\n * @param {PhysicsConfig} physicsParams\n * @private\n */\nfunction _applyImpulseFromCollisionWithStationaryObject(physicsCollidable, collision, velocity,\n                                                        contactPointOffset, physicsParams) {\n  const state = physicsCollidable.physicsJob.currentState;\n  const contactNormal = collision.contactNormal;\n\n  //\n  // Calculate and apply the main collision impulse.\n  //\n\n  vec3.scale(tmpVec1, velocity, -(1 + physicsParams.coefficientOfRestitution));\n  const numerator = vec3.dot(tmpVec1, contactNormal);\n\n  vec3.cross(tmpVec1, contactPointOffset, contactNormal);\n  vec3.transformMat3(tmpVec1, tmpVec1, state.inverseInertiaTensor);\n  vec3.cross(tmpVec1, tmpVec1, contactPointOffset);\n  const denominator = vec3.dot(tmpVec1, contactNormal) + state.inverseMass;\n\n  const impulseMagnitude = numerator / denominator;\n\n  _applyImpulse(state, impulseMagnitude, contactNormal, contactPointOffset);\n\n  //\n  // Calculate and apply a dynamic friction impulse.\n  //\n\n  const frictionImpulseMagnitude = impulseMagnitude * physicsParams.coefficientOfFriction;\n\n  const tangent = tmpVec2;\n  vec3.scale(tmpVec1, contactNormal, vec3.dot(velocity, contactNormal));\n  vec3.subtract(tangent, velocity, tmpVec1);\n  vec3.normalize(tangent, tangent);\n\n  _applyImpulse(state, frictionImpulseMagnitude, tangent, contactPointOffset);\n}\n\n/**\n * @param {PhysicsState} state\n * @param {number} impulseMagnitude\n * @param {vec3} impulseDirection\n * @param {vec3} contactPointOffset\n * @private\n */\nfunction _applyImpulse(state, impulseMagnitude, impulseDirection, contactPointOffset) {\n  // Calculate the updated linear momenta.\n  const finalLinearMomentum = vec3.create();\n  vec3.scaleAndAdd(finalLinearMomentum, state.momentum, impulseDirection, impulseMagnitude);\n\n  // Calculate the updated angular momenta.\n  const finalAngularMomentum = vec3.create();\n  vec3.cross(tmpVec1, contactPointOffset, impulseDirection);\n  vec3.scaleAndAdd(finalAngularMomentum, state.angularMomentum, tmpVec1, impulseMagnitude);\n\n  // Apply the updated momenta.\n  vec3.copy(state.momentum, finalLinearMomentum);\n  vec3.copy(state.angularMomentum, finalAngularMomentum);\n}\n\n/**\n * @param {CollidablePhysicsJob} job\n * @returns {boolean}\n * @private\n */\nfunction _isJobAtRest(job) {\n  return areVec3sClose(job.currentState.position, job.previousState.position) &&\n      areVec3sClose(job.currentState.velocity, job.previousState.velocity) &&\n      areVec3sClose(job.currentState.orientation, job.previousState.orientation) &&\n      _doCollisionsMatch(job.collidable.collisions, job.collidable.previousCollisions);\n}\n\n/**\n * @param {Array.<Collision>} collisionsA\n * @param {Array.<Collision>} collisionsB\n * @returns {boolean}\n * @private\n */\nfunction _doCollisionsMatch(collisionsA, collisionsB) {\n  const count = collisionsA.length;\n\n  if (count !== collisionsB.length) return false;\n\n  for (let i = 0; i < count; i++) {\n    const collisionA = collisionsA[i];\n    const collisionB = collisionsB[i];\n    if (collisionA.collidableA !== collisionB.collidableA ||\n        collisionA.collidableB !== collisionB.collidableB ||\n        !areVec3sClose(collisionA.contactPoint, collisionB.contactPoint) ||\n        !areVec3sClose(collisionA.contactNormal, collisionB.contactNormal)) {\n      return false\n    }\n  }\n\n  return true;\n}\n\n/**\n * @param {Collidable} collidable\n * @private\n */\nfunction _recordOldCollisionsForDevModeForCollidable(collidable) {\n  if (!collidable.extraPreviousCollisions) {\n    collidable.extraPreviousCollisions = [];\n  }\n\n  for (let i = 3; i > 0; i--) {\n    collidable.extraPreviousCollisions[i] = collidable.extraPreviousCollisions[i - 1];\n  }\n  collidable.extraPreviousCollisions[0] = collidable.previousCollisions;\n}\n\n/**\n * @param {Collision} collision\n * @param {Object} thisController\n * @returns {Object}\n */\nfunction getOtherControllerFromCollision(collision, thisController) {\n  const controllerA = collision.collidableA.physicsJob.controller;\n  const controllerB = collision.collidableB.physicsJob.controller;\n  if (controllerA === thisController) {\n    return controllerB;\n  } else if (controllerB === thisController) {\n    return controllerA;\n  } else {\n    throw new Error('Neither collidable corresponds to the given controller');\n  }\n}\n\nexport {\n  handleCollisionsForJob,\n  findIntersectingCollidablesForCollidable,\n  determineJobsAtRest,\n  recordOldCollisionsForDevModeForAllCollidables,\n  checkThatNoObjectsCollide,\n  getOtherControllerFromCollision,\n};\n","import {\n  Aabb,\n  Capsule,\n  Obb,\n  Sphere\n} from '../collidables';\n\nimport {\n  aabbCollisionDetection,\n  capsuleCollisionDetection,\n  obbCollisionDetection,\n  sphereCollisionDetection,\n} from '../collision-detection';\n\nimport {\n  aabbContactCalculation,\n  capsuleContactCalculation,\n  obbContactCalculation,\n  sphereContactCalculation,\n} from '../contact-calculation';\n\n/**\n * This module defines a collection of static utility functions for detecting and responding to\n * collisions.\n */\n\n/**\n * @param {Collidable} a\n * @param {Collidable} b\n * @returns {boolean}\n */\nfunction detectIntersection(a, b) {\n  if (a instanceof Sphere) {\n    if (b instanceof Sphere) {\n      return sphereCollisionDetection.sphereVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return sphereCollisionDetection.sphereVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return sphereCollisionDetection.sphereVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return sphereCollisionDetection.sphereVsObb(a, b);\n    } else {\n      return sphereCollisionDetection.sphereVsPoint(a, b);\n    }\n  } else if (a instanceof Aabb) {\n    if (b instanceof Sphere) {\n      return aabbCollisionDetection.aabbVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return aabbCollisionDetection.aabbVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return aabbCollisionDetection.aabbVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return aabbCollisionDetection.aabbVsObb(a, b);\n    } else {\n      return aabbCollisionDetection.aabbVsPoint(a, b);\n    }\n  } else if (a instanceof Capsule) {\n    if (b instanceof Sphere) {\n      return capsuleCollisionDetection.capsuleVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return capsuleCollisionDetection.capsuleVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return capsuleCollisionDetection.capsuleVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return capsuleCollisionDetection.capsuleVsObb(a, b);\n    } else {\n      return capsuleCollisionDetection.capsuleVsPoint(a, b);\n    }\n  } else if (a instanceof Obb) {\n    if (b instanceof Sphere) {\n      return obbCollisionDetection.obbVsSphere(a, b);\n    } else if (b instanceof Aabb) {\n      return obbCollisionDetection.obbVsAabb(a, b);\n    } else if (b instanceof Capsule) {\n      return obbCollisionDetection.obbVsCapsule(a, b);\n    } else if (b instanceof Obb) {\n      return obbCollisionDetection.obbVsObb(a, b);\n    } else {\n      return obbCollisionDetection.obbVsPoint(a, b);\n    }\n  } else {\n    if (b instanceof Sphere) {\n      return sphereCollisionDetection.sphereVsPoint(b, a);\n    } else if (b instanceof Aabb) {\n      return aabbCollisionDetection.aabbVsPoint(b, a);\n    } else if (b instanceof Capsule) {\n      return capsuleCollisionDetection.capsuleVsPoint(b, a);\n    } else if (b instanceof Obb) {\n      return obbCollisionDetection.obbVsPoint(b, a);\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Collision} collision\n */\nfunction calculateContact(collision) {\n  const a = collision.collidableA;\n  const b = collision.collidableB;\n  const contactPoint = vec3.create();\n  const contactNormal = vec3.create();\n\n  if (a instanceof Sphere) {\n    if (b instanceof Sphere) {\n      sphereContactCalculation.sphereVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      sphereContactCalculation.sphereVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      sphereContactCalculation.sphereVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      sphereContactCalculation.sphereVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      sphereContactCalculation.sphereVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else if (a instanceof Aabb) {\n    if (b instanceof Sphere) {\n      aabbContactCalculation.aabbVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      aabbContactCalculation.aabbVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      aabbContactCalculation.aabbVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      aabbContactCalculation.aabbVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      aabbContactCalculation.aabbVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else if (a instanceof Capsule) {\n    if (b instanceof Sphere) {\n      capsuleContactCalculation.capsuleVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      capsuleContactCalculation.capsuleVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      capsuleContactCalculation.capsuleVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      capsuleContactCalculation.capsuleVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      capsuleContactCalculation.capsuleVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else if (a instanceof Obb) {\n    if (b instanceof Sphere) {\n      obbContactCalculation.obbVsSphere(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Aabb) {\n      obbContactCalculation.obbVsAabb(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Capsule) {\n      obbContactCalculation.obbVsCapsule(contactPoint, contactNormal, a, b);\n    } else if (b instanceof Obb) {\n      obbContactCalculation.obbVsObb(contactPoint, contactNormal, a, b);\n    } else {\n      obbContactCalculation.obbVsPoint(contactPoint, contactNormal, a, b);\n    }\n  } else {\n    if (b instanceof Sphere) {\n      sphereContactCalculation.sphereVsPoint(contactPoint, contactNormal, b, a);\n    } else if (b instanceof Aabb) {\n      aabbContactCalculation.aabbVsPoint(contactPoint, contactNormal, b, a);\n    } else if (b instanceof Capsule) {\n      capsuleContactCalculation.capsuleVsPoint(contactPoint, contactNormal, b, a);\n    } else if (b instanceof Obb) {\n      obbContactCalculation.obbVsPoint(contactPoint, contactNormal, b, a);\n    } else {}\n    vec3.negate(contactNormal, contactNormal);\n  }\n\n  collision.contactPoint = contactPoint;\n  collision.contactNormal = contactNormal;\n}\n\n/**\n * @param {Collidable} a\n * @param {Collidable} b\n * @returns {boolean}\n */\nfunction detectBoundingVolumeIntersection(a, b) {\n  return detectIntersection(a.boundingVolume, b.boundingVolume);\n}\n\nexport {\n  detectIntersection,\n  calculateContact,\n  detectBoundingVolumeIntersection,\n};\n","/**\n * This module re-exports all of the exports in the grafx framework. This makes the entire framework\n * conveniently accessible via this single module.\n */\n\nexport * from './collisions';\nexport * from './integrator';\nexport * from './util';\n\nexport * from './src/physics-engine';\nexport * from './src/physics-job';\nexport * from './src/physics-state';\n","export * from './src/integrator';\nexport * from './src/rk4-integrator';\n","/**\n * This class numerically integrates the equations of motion. That is, an integrator implements\n * physics simulations by updating position and velocity values for each time step.\n *\n * @abstract\n */\nclass Integrator {\n  constructor() {\n    // Integrator is an abstract class. It should not be instantiated directly.\n    if (new.target === Integrator) {\n      throw new TypeError('Cannot construct Integrator instances directly');\n    }\n  }\n\n  /**\n   * Integrate the state from t to t + dt.\n   *\n   * @param {PhysicsJob} job\n   * @param {number} t Total elapsed time.\n   * @param {number} dt Duration of the current time step.\n   * @abstract\n   */\n  integrate(job, t, dt) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * @returns {PhysicsDerivative}\n   */\n  static createDerivative() {\n    return {\n      velocity: vec3.create(),\n      force: vec3.create(),\n      spin: quat.create(),\n      torque: vec3.create()\n    };\n  }\n}\n\nexport {Integrator};\n\n/**\n * @typedef {Object} PhysicsDerivative\n * @property {vec3} velocity Derivative of position.\n * @property {vec3} force Derivative of momentum.\n * @property {quat} spin Derivative of orientation.\n * @property {vec3} torque Derivative of angular momentum.\n */\n\n/**\n * @typedef {Object} ForceApplierOutput\n * @property {vec3} force\n * @property {vec3} torque\n */\n\n/**\n * @typedef {Object} ForceApplierInput\n * @property {PhysicsState} state\n * @property {number} t\n * @property {number} dt\n */\n","import {_geometry, _util} from '../../util';\nimport {Integrator} from './integrator';\nimport {PhysicsState} from '../../src/physics-state';\n\n// TODO: Account for the fact that collisions take place between time steps; integration should\n// really consider the previous state as being the time and state at the moment of collision.\n\n/**\n * This class numerically integrates the equations of motion. That is, this implements physics\n * simulations by updating position and velocity values for each time step.\n *\n * This integrator is an implementation of the classical Runge-Kutta method (RK4)\n * (https://en.wikipedia.org/wiki/Runge_kutta).\n *\n * This integrator causes energy to be lost at a small rate. This is a common problem for numerical\n * integrators, and is usually negligible.\n */\nclass RK4Integrator extends Integrator {\n  constructor() {\n    super();\n    if (_util.isInDevMode) {\n      this._wrapForDevMode();\n    }\n  }\n\n  /**\n   * Integrate the state from t to t + dt.\n   *\n   * @param {PhysicsJob} job\n   * @param {number} t Total elapsed time.\n   * @param {number} dt Duration of the current time step.\n   */\n  integrate(job, t, dt) {\n    const state = job.currentState;\n    _tempState.copy(state);\n\n    _calculateDerivative(_a, _tempState, job, t, 0, _EMPTY_DERIVATIVE);\n    _calculateDerivative(_b, _tempState, job, t, dt * 0.5, _a);\n    _calculateDerivative(_c, _tempState, job, t, dt * 0.5, _b);\n    _calculateDerivative(_d, _tempState, job, t, dt, _c);\n\n    _calculateVec3DerivativeWeightedSum(\n        _positionDerivative, _a.velocity, _b.velocity, _c.velocity, _d.velocity);\n    _calculateVec3DerivativeWeightedSum(\n        _momentumDerivative, _a.force, _b.force, _c.force, _d.force);\n    _calculateQuatDerivativeWeightedSum(_orientationDerivative, _a.spin, _b.spin, _c.spin, _d.spin);\n    _calculateVec3DerivativeWeightedSum(\n        _angularMomentumDerivative, _a.torque, _b.torque, _c.torque, _d.torque);\n\n    vec3.scaleAndAdd(state.position, state.position, _positionDerivative, dt);\n    vec3.scaleAndAdd(state.momentum, state.momentum, _momentumDerivative, dt);\n    _geometry.scaleAndAddQuat(state.orientation, state.orientation, _orientationDerivative, dt);\n    vec3.scaleAndAdd(state.angularMomentum, state.angularMomentum, _angularMomentumDerivative, dt);\n\n    state.updateDependentFields();\n  }\n\n  /**\n   * Wraps the integrate method and check for NaN values after each integration.\n   *\n   * @private\n   */\n  _wrapForDevMode() {\n    const unguardedIntegrate = this.integrate.bind(this);\n    this.integrate = (job, t, dt) => {\n      unguardedIntegrate(job, t, dt);\n      _checkForStateError(job.currentState);\n    };\n  }\n}\n\n/**\n * Calculate the derivative from the given state with the given time step.\n *\n * @param {PhysicsDerivative} out\n * @param {PhysicsState} state\n * @param {PhysicsJob} job\n * @param {number} t\n * @param {number} dt\n * @param {PhysicsDerivative} d\n * @private\n */\nfunction _calculateDerivative(out, state, job, t, dt, d) {\n  vec3.scaleAndAdd(state.position, state.position, d.velocity, dt);\n  vec3.scaleAndAdd(state.momentum, state.momentum, d.force, dt);\n  _geometry.scaleAndAddQuat(state.orientation, state.orientation, d.spin, dt);\n  vec3.scaleAndAdd(state.angularMomentum, state.angularMomentum, d.torque, dt);\n\n  state.updateDependentFields();\n\n  out.velocity = state.velocity;\n  out.spin = state.spin;\n  vec3.set(out.force, 0, 0, 0);\n  vec3.set(out.torque, 0, 0, 0);\n\n  _forceApplierOutput.force = out.force;\n  _forceApplierOutput.torque = out.torque;\n  _forceApplierInput.state = state;\n  _forceApplierInput.t = t + dt;\n  _forceApplierInput.dt = dt;\n\n  job.applyForces(_forceApplierOutput, _forceApplierInput);\n}\n\nconst _EMPTY_DERIVATIVE = Integrator.createDerivative();\n\nconst _tempState = new PhysicsState();\nconst _a = Integrator.createDerivative();\nconst _b = Integrator.createDerivative();\nconst _c = Integrator.createDerivative();\nconst _d = Integrator.createDerivative();\n\nconst _positionDerivative = vec3.create();\nconst _momentumDerivative = vec3.create();\nconst _orientationDerivative = quat.create();\nconst _angularMomentumDerivative = vec3.create();\n\nconst _forceApplierOutput = {};\nconst _forceApplierInput = {};\n\n/**\n * @param {vec3} out\n * @param {vec3} a\n * @param {vec3} b\n * @param {vec3} c\n * @param {vec3} d\n * @private\n */\nfunction _calculateVec3DerivativeWeightedSum(out, a, b, c, d) {\n  out[0] = 1 / 6 * (a[0] + 2 * (b[0] + c[0]) + d[0]);\n  out[1] = 1 / 6 * (a[1] + 2 * (b[1] + c[1]) + d[1]);\n  out[2] = 1 / 6 * (a[2] + 2 * (b[2] + c[2]) + d[2]);\n}\n\n/**\n * @param {quat} out\n * @param {quat} a\n * @param {quat} b\n * @param {quat} c\n * @param {quat} d\n * @private\n */\nfunction _calculateQuatDerivativeWeightedSum(out, a, b, c, d) {\n  out[0] = 1 / 6 * (a[0] + 2 * (b[0] + c[0]) + d[0]);\n  out[1] = 1 / 6 * (a[1] + 2 * (b[1] + c[1]) + d[1]);\n  out[2] = 1 / 6 * (a[2] + 2 * (b[2] + c[2]) + d[2]);\n  out[3] = 1 / 6 * (a[3] + 2 * (b[3] + c[3]) + d[3]);\n}\n\n/**\n * @param {PhysicsState} state\n * @private\n */\nfunction _checkForStateError(state) {\n  const errorProperties = [\n    'position',\n    'momentum',\n    'orientation',\n    'angularMomentum',\n  ].filter(property => _containsNaN(state[property]));\n  const property = errorProperties[0];\n  if (property) {\n    throw new Error(`${property} contains a NaN value after integrating: ${state[property]}`);\n  }\n}\n\n/**\n * Determines whether the given vector contains a NaN value.\n *\n * @param {vec3} v\n * @private\n */\nfunction _containsNaN(v) {\n  return isNaN(v[0]) || isNaN(v[1]) || isNaN(v[2]);\n}\n\nconst rk4Integrator = new RK4Integrator();\n\nexport {rk4Integrator};\n","import {FrameLatencyProfiler, PersistentAnimationJob} from 'lsl-animatex';\nimport {_util} from '../util';\n\nimport {\n  checkThatNoObjectsCollide,\n  CollidablePhysicsJob,\n  determineJobsAtRest,\n  handleCollisionsForJob,\n  recordOldCollisionsForDevModeForAllCollidables,\n} from '../collisions';\nimport {PhysicsState} from './physics-state';\nimport {rk4Integrator} from '../integrator';\n\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Physics frame duration';\n\n/**\n * This physics engine simulates high-performance, three-dimensional rigid-body dynamics.\n *\n * Notable features:\n * - Includes collision detection with impulse-based resolution.\n * - Decouples the physics simulation and animation rendering time steps, and uses a fixed timestep\n * for the physics loop. This gives us numerical stability and precise reproducibility.\n * - Suppresses linear and angular momenta below a certain threshold.\n *\n * The engine consists primarily of a collection of individual physics jobs and an update loop. This\n * update loop is in turn controlled by the animation loop. However, whereas the animation loop\n * renders each job once per frame loop--regardless of how much time actually elapsed since the\n * previous frame--the physics loop updates its jobs at a constant rate. To reconcile these frame\n * rates, the physics loop runs as many times as is needed in order to catch up to the time of the\n * current animation frame. The physics frame rate should be much higher than the animation frame\n * rate.\n *\n * It is VERY IMPORTANT for a PhysicsJob to minimize the runtime of its update step.\n *\n * ## A note on job order\n *\n * The integration+collision pipeline handle one job at a time. A consequence of this design\n * is that half of the collisions technically represent a false interaction between the state of the\n * first object at time t and the state of the second object at time t - 1.\n *\n * This implementation prevents a more problematic issue. If all objects were first integrated, then\n * all objects were checked for collisions, then all collisions were resolved, then the following\n * scenario could arise:\n * - The next position of object A collides with the previous position of object B, but not with the\n *   next position of object B, so object A moves successfully to its new position.\n * - The next position of object B collides with the next position of object C, so objects B and C\n *   are reset to their previous positions.\n * - Object B and C now intersect.\n */\nclass PhysicsEngine extends PersistentAnimationJob {\n  /**\n   * Clients should call PhysicsEngine.create instead of instantiating a PhysicsEngine directly.\n   *\n   * @param {PhysicsConfig} physicsParams\n   */\n  constructor(physicsParams) {\n    super();\n\n    if (_physicsEngine) {\n      throw new Error('Can\\'t instantiate multiple instances of PhysicsEngine.');\n    }\n\n    _physicsEngine = this;\n\n    this._physicsParams = physicsParams;\n    this.integrator = rk4Integrator;\n    this._elapsedTime = 0.0;\n    this._remainingTime = 0.0;\n    this._nonCollidableJobs = [];\n    this._collidableJobs = [];\n\n    if (_util.isInDevMode) {\n      this._setUpForInDevMode();\n    }\n  }\n\n  /**\n   * @param {PhysicsConfig} physicsParams\n   */\n  static create(physicsParams) {\n    new PhysicsEngine(physicsParams);\n  }\n\n  reset() {\n    this._elapsedTime = 0.0;\n    this._remainingTime = 0.0;\n    this._nonCollidableJobs = [];\n    this._collidableJobs = [];\n  }\n\n  /**\n   * Adds the given PhysicsJob.\n   *\n   * @param {PhysicsJob} job\n   */\n  addJob(job) {\n    // console.debug(`Starting PhysicsJob`);\n\n    if (job instanceof CollidablePhysicsJob) {\n      this._collidableJobs.push(job);\n    } else {\n      this._nonCollidableJobs.push(job);\n    }\n  }\n\n  /**\n   * Removes the given PhysicsJob.\n   *\n   * Throws no error if the job is not registered.\n   *\n   * @param {PhysicsJob} job\n   */\n  removeJob(job) {\n    // console.debug(`Cancelling PhysicsJob`);\n    this._removeJob(job);\n  }\n\n  /**\n   * Wraps the draw and update methods in a profiler function that will track the frame latencies.\n   *\n   * @private\n   */\n  _setUpForInDevMode() {\n    const unwrappedUpdate = this.update.bind(this);\n    const latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD, \n        this._physicsParams.timeStepDuration, _LATENCY_LOG_LABEL);\n    latencyProfiler.start();\n\n    this.update = (...args) => {\n      const beforeTime = performance.now();\n      unwrappedUpdate(...args);\n      const deltaTime = performance.now() - beforeTime;\n      latencyProfiler.recordFrameLatency(deltaTime);\n    };\n  }\n\n  /**\n   * Update the physics state for the current animation update frame.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   */\n  update(currentTime, deltaTime) {\n    this._remainingTime += deltaTime;\n\n    // Run as many constant-interval physics updates as are needed for the given animation frame\n    // interval.\n    while (this._remainingTime >= this._physicsParams.timeStepDuration) {\n      this._updateToNextPhysicsFrame();\n      this._elapsedTime += this._physicsParams.timeStepDuration;\n      this._remainingTime -= this._physicsParams.timeStepDuration;\n    }\n\n    // Calculate the intermediate physics state to use for rendering the current animation frame.\n    const partialRatio = this._remainingTime / this._physicsParams.timeStepDuration;\n    this._setPartialStateForRenderTimeStepForAllJobs(partialRatio);\n  }\n\n  _updateToNextPhysicsFrame() {\n    if (_util.isInDevMode) {\n      this._recordOldStatesForAllJobsForDevMode();\n      recordOldCollisionsForDevModeForAllCollidables();\n    }\n\n    this._nonCollidableJobs.forEach(this._integratePhysicsStateForJob.bind(this));\n    this._collidableJobs.forEach(job => {\n      if (!job.isAtRest) {\n        this._integratePhysicsStateForCollidableJob(job);\n        handleCollisionsForJob(job, this._elapsedTime, this._physicsParams);\n      }\n    });\n\n    if (_util.isInDevMode) {\n      checkThatNoObjectsCollide();\n    }\n\n    this._suppressLowMomentaForAllJobs();\n\n    determineJobsAtRest(this._collidableJobs);\n  }\n\n  /**\n   * Removes the given job from the collection of active jobs if it exists.\n   *\n   * @param {PhysicsJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    if (job instanceof CollidablePhysicsJob) {\n      _removeJobFromCollection(job, index, this._collidableJobs);\n    } else {\n      _removeJobFromCollection(job, index, this._nonCollidableJobs);\n    }\n  }\n\n  /**\n   * Update the current physics state for a job for the current physics update frame.\n   *\n   * This includes applying all forces that have been registered with the physics job.\n   *\n   * @param {CollidablePhysicsJob} job\n   * @private\n   */\n  _integratePhysicsStateForCollidableJob(job) {\n    this._integratePhysicsStateForJob(job);\n\n    // Update the collidable's position and orientation.\n    job.collidable.position = job.currentState.position;\n    job.collidable.orientation = job.currentState.orientation;\n  }\n\n  /**\n   * Update the current physics state for a job for the current physics update frame.\n   *\n   * This includes applying all forces that have been registered with the physics job.\n   *\n   * @param {PhysicsJob} job\n   * @private\n   */\n  _integratePhysicsStateForJob(job) {\n    job.previousState.copy(job.currentState);\n    this.integrator.integrate(job, this._elapsedTime, this._physicsParams.timeStepDuration);\n  }\n\n  _suppressLowMomentaForAllJobs() {\n    this._collidableJobs.forEach(job => _suppressLowMomentaForJob(job,\n        this._physicsParams.lowMomentumSuppressionThreshold,\n        this._physicsParams.lowAngularMomentumSuppressionThreshold));\n    this._nonCollidableJobs.forEach(job => _suppressLowMomentaForJob(job,\n        this._physicsParams.lowMomentumSuppressionThreshold,\n        this._physicsParams.lowAngularMomentumSuppressionThreshold));\n  }\n\n  /**\n   * Calculate the intermediate physics state to use for rendering the current animation frame. The\n   * given ratio specifies how far the current render frame is between the previous and current\n   * physics update frames.\n   *\n   * @param {number} partialRatio\n   * @private\n   */\n  _setPartialStateForRenderTimeStepForAllJobs(partialRatio) {\n    this._collidableJobs.forEach(_setPartialStateForRenderTimeStepForJob.bind(null, partialRatio));\n    this._nonCollidableJobs.forEach(_setPartialStateForRenderTimeStepForJob.bind(null, partialRatio));\n  }\n\n  _recordOldStatesForAllJobsForDevMode() {\n    this._collidableJobs.forEach(_recordOldStatesForJob);\n    this._nonCollidableJobs.forEach(_recordOldStatesForJob);\n  }\n\n  draw() {}\n\n  /**\n   * @returns {PhysicsEngine}\n   */\n  static get instance() {\n    if (!_physicsEngine) {\n      throw new Error('Can\\'t access PhysicsEngine.instance before it has been instantiated.');\n    }\n    return _physicsEngine;\n  }\n}\n\n/**\n * @param {PhysicsJob} job\n * @param {number} lowMomentumSuppressionThreshold\n * @param {number} lowAngularMomentumSuppressionThreshold\n * @private\n */\nfunction _suppressLowMomentaForJob(job, lowMomentumSuppressionThreshold,\n                                   lowAngularMomentumSuppressionThreshold) {\n  const currentState = job.currentState;\n\n  if (vec3.squaredLength(currentState.momentum) < lowMomentumSuppressionThreshold) {\n    vec3.set(currentState.momentum, 0, 0, 0);\n  }\n\n  if (vec3.squaredLength(currentState.angularMomentum) < lowAngularMomentumSuppressionThreshold) {\n    vec3.set(currentState.angularMomentum, 0, 0, 0);\n  }\n}\n\n/**\n * @param {PhysicsJob} job\n * @param {number} index\n * @param {Array.<PhysicsJob>} jobs\n * @private\n */\nfunction _removeJobFromCollection(job, index, jobs) {\n  if (index >= 0) {\n    jobs.splice(index, 1);\n  } else {\n    const count = jobs.length;\n    for (index = 0; index < count; index++) {\n      if (jobs[index] === job) {\n        jobs.splice(index, 1);\n        break;\n      }\n    }\n  }\n}\n\n/**\n * @param {number} partialRatio\n * @param {PhysicsJob} job\n * @private\n */\nfunction _setPartialStateForRenderTimeStepForJob(partialRatio, job) {\n  job.renderState.lerp(job.previousState, job.currentState, partialRatio);\n}\n\n/**\n * @param {PhysicsJob} job\n * @private\n */\nfunction _recordOldStatesForJob(job) {\n  if (!job.extraPreviousStates) {\n    job.extraPreviousStates = [];\n    for (let i = 0; i < 4; i++) {\n      job.extraPreviousStates[i] = new PhysicsState();\n    }\n  }\n\n  for (let i = 3; i > 0; i--) {\n    job.extraPreviousStates[i].copy(job.extraPreviousStates[i - 1]);\n  }\n  job.extraPreviousStates[0].copy(job.previousState);\n}\n\nlet _physicsEngine = null;\n\nexport {PhysicsEngine};\n","import {animator} from 'lsl-animatex';\nimport {PhysicsEngine} from './physics-engine';\nimport {PhysicsState} from './physics-state';\nimport {_util} from '../util';\n\n/**\n * A PhysicsJob maintains a current force/momentum state and defines a method for applying forces at\n * a given physics time step.\n */\nclass PhysicsJob {\n  /**\n   * @param {Array.<ForceApplier>} [forceAppliers]\n   * @param {PhysicsState} [state]\n   */\n  constructor(forceAppliers, state) {\n    forceAppliers = forceAppliers || [];\n    state = state || new PhysicsState();\n\n    this.startTime = null;\n    this.currentState = state;\n    this.previousState = null;\n    this.renderState = null;\n    this._forceAppliers = forceAppliers;\n  }\n\n  /**\n   * @param {ForceApplierOutput} outputParams\n   * @param {ForceApplierInput} inputParams\n   */\n  applyForces(outputParams, inputParams) {\n    this._forceAppliers.forEach(forceApplier => forceApplier(outputParams, inputParams));\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   * @param {number} [index=0] The index to add the given force applier in the current list of\n   * appliers.\n   */\n  addForceApplier(forceApplier, index = 0) {\n    this._forceAppliers.splice(index, 0, forceApplier);\n  }\n\n  /**\n   * @param {ForceApplier} forceApplier\n   */\n  removeForceApplier(forceApplier) {\n    this._forceAppliers.splice(this._forceAppliers.indexOf(forceApplier), 1);\n  }\n\n  /**\n   * Registers this PhysicsJob and all of its descendant child jobs with the physics engine.\n   *\n   * @param {number} [startTime]\n   */\n  start(startTime) {\n    this.startTime = startTime || animator.currentTime;\n\n    const previousState = new PhysicsState();\n    previousState.copy(this.currentState);\n    const renderState = new PhysicsState();\n    renderState.copy(this.currentState);\n\n    this.previousState = previousState;\n    this.renderState = renderState;\n\n    if (_util.isInDevMode) {\n      // It is useful for debugging to be able to trace the states back to their jobs.\n      this.currentState.job = this;\n      this.previousState.job = this;\n      this.renderState.job = this;\n    }\n\n    PhysicsEngine.instance.addJob(this);\n  }\n\n  /**\n   * Unregisters this PhysicsJob and all of its descendant child jobs with the physics engine.\n   *\n   * Throws no error if the job is not registered.\n   */\n  finish() {\n    PhysicsEngine.instance.removeJob(this);\n  }\n\n  /**\n   * @param {number} [startTime]\n   */\n  restart(startTime) {\n    this.finish();\n    this.start(startTime);\n  }\n}\n\nexport {PhysicsJob};\n\n/**\n * @typedef {Function} ForceApplier\n * @property {vec3} force Output.\n * @property {vec3} torque Output.\n * @property {PhysicsState} state Input.\n * @property {number} t Input.\n * @property {number} dt Input.\n */\n\n/**\n * @typedef {Object} PhysicsConfig\n * @property {number} timeStepDuration\n * @property {number} gravity\n * @property {vec3} _gravityVec\n * @property {number} linearDragCoefficient\n * @property {number} angularDragCoefficient\n * @property {number} coefficientOfRestitution\n * @property {number} coefficientOfFriction\n * @property {number} lowMomentumSuppressionThreshold\n * @property {number} lowAngularMomentumSuppressionThreshold\n */\n","import {rotateTensor, createBoxInertiaTensor} from '../util';\n\n/**\n * This class represents the state of an object that is needed for a physics simulation (such as\n * position, momentum, and mass).\n */\nclass PhysicsState {\n  /**\n   * @param {DynamicsConfig} [dynamicsParams={}]\n   */\n  constructor(dynamicsParams = {}) {\n    const position = dynamicsParams.position || vec3.create();\n    const momentum = dynamicsParams.momentum || vec3.create();\n    const orientation = dynamicsParams.orientation || quat.create();\n    const angularMomentum = dynamicsParams.angularMomentum || vec3.create();\n    const mass = dynamicsParams.mass || 1;\n    const unrotatedInertiaTensor = dynamicsParams.unrotatedInertiaTensor || createBoxInertiaTensor(1, 1, 1, mass);\n\n    // Constant fields.\n\n    this.mass = mass;\n    this.inverseMass = 1 / mass;\n    this.unrotatedInertiaTensor = unrotatedInertiaTensor;\n\n    // Independent fields.\n\n    this.position = position;\n    this.momentum = momentum;\n    this.orientation = orientation;\n    this.angularMomentum = angularMomentum;\n\n    // Dependent fields.\n\n    // Linear velocity.\n    this.velocity = vec3.create();\n    // Quaternion-based representation of the rate of change in orientation.\n    this.spin = quat.create();\n    // Vector-based representation of the angular velocity.\n    this.angularVelocity = vec3.create();\n    // The inverse inertia tensor rotated to the world coordinate frame.\n    this.inverseInertiaTensor = mat3.create();\n\n    this.updateDependentFields();\n  }\n\n  updateDependentFields() {// TODO: Test this somehow...\n    // Update linear velocity.\n    vec3.scale(this.velocity, this.momentum, this.inverseMass);\n\n    // Update angular velocity.\n    quat.normalize(this.orientation, this.orientation);\n    rotateTensor(this.inverseInertiaTensor, this.unrotatedInertiaTensor, this.orientation);\n    mat3.invert(this.inverseInertiaTensor, this.unrotatedInertiaTensor);\n    vec3.transformMat3(this.angularVelocity, this.angularMomentum, this.inverseInertiaTensor);\n    quat.set(this.spin, this.angularVelocity[0], this.angularVelocity[1],\n        this.angularVelocity[2], 0);\n    quat.scale(this.spin, this.spin, 0.5);\n    quat.multiply(this.spin, this.spin, this.orientation);\n  }\n\n  /**\n   * Perform a deep copy.\n   *\n   * @param {PhysicsState} other\n   */\n  copy(other) {\n    this.mass = other.mass;\n    this.inverseMass = other.inverseMass;\n    mat3.copy(this.unrotatedInertiaTensor, other.unrotatedInertiaTensor);\n    mat3.copy(this.inverseInertiaTensor, other.inverseInertiaTensor);\n    vec3.copy(this.position, other.position);\n    vec3.copy(this.momentum, other.momentum);\n    quat.copy(this.orientation, other.orientation);\n    vec3.copy(this.angularMomentum, other.angularMomentum);\n    vec3.copy(this.velocity, other.velocity);\n    quat.copy(this.spin, other.spin);\n    vec3.copy(this.angularVelocity, other.angularVelocity);\n  }\n\n  /**\n   * @param {PhysicsState} a\n   * @param {PhysicsState} b\n   * @param {number} partialRatio\n   */\n  lerp(a, b, partialRatio) {\n    vec3.lerp(this.position, a.position, b.position, partialRatio);\n    vec3.lerp(this.momentum, a.momentum, b.momentum, partialRatio);\n    quat.slerp(this.orientation, a.orientation, b.orientation, partialRatio);\n    quat.normalize(this.orientation, this.orientation);\n    vec3.lerp(this.angularMomentum, a.angularMomentum, b.angularMomentum, partialRatio);\n    this.updateDependentFields();\n  }\n}\n\nexport {PhysicsState};\n\n/**\n * @typedef {Object} DynamicsConfig\n * @property {vec3} [position]\n * @property {vec3} [momentum]\n * @property {quat} [orientation]\n * @property {vec3} [angularMomentum]\n * @property {number} [mass]\n * @property {mat3} [unrotatedInertiaTensor]\n */\n","export * from './src/force-utils';\nexport * from './src/geometry';\nexport * from './src/inertia-tensor-utils';\nexport * from './src/util';\n","/**\n * This module defines a collection of static general utility functions for calculating forces.\n */\n\n/**\n * @param {GravityApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyGravity(config, output, input) {\n  vec3.scaleAndAdd(output.force, output.force, config._gravityVec, input.state.mass);\n}\n\n/**\n * @param {LinearDragApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyLinearDrag(config, output, input) {\n  const dragMagnitude = -vec3.squaredLength(input.state.velocity) * config.linearDragCoefficient;\n  vec3.normalize(_vec3, input.state.velocity);\n  vec3.scaleAndAdd(output.force, output.force, _vec3, dragMagnitude);\n}\n\n/**\n * @param {AngularDragApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyAngularDrag(config, output, input) {\n  vec3.scaleAndAdd(output.torque, output.torque, input.state.angularVelocity,\n      config.angularDragCoefficient);\n}\n\n/**\n * Applies a simple linear spring force (using Hooke's law).\n *\n * force = displacement * coefficient\n *\n * @param {LinearSpringForceApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applyLinearSpringForce(config, output, input) {\n  vec3.subtract(_vec3, config.getIntendedPosition(), input.state.position);\n  vec3.scaleAndAdd(output.force, output.force, _vec3, config.springCoefficient);\n}\n\n/**\n * @param {SpringDampingApplierConfig} config\n * @param {ForceApplierOutput} output\n * @param {ForceApplierInput} input\n */\nfunction applySpringDamping(config, output, input) {\n  vec3.scale(_vec3, input.state.velocity, -config.dampingCoefficient);\n  vec3.add(output.force, output.force, _vec3);\n}\n\nconst _vec3 = vec3.create();\n\nexport {\n  applyAngularDrag,\n  applyGravity,\n  applyLinearDrag,\n  applyLinearSpringForce,\n  applySpringDamping,\n}\n\n/**\n * @typedef {Object} GravityApplierConfig\n * @property {vec3} _gravityVec\n */\n\n/**\n * @typedef {Object} LinearDragApplierConfig\n * @property {number} linearDragCoefficient\n */\n\n/**\n * @typedef {Object} AngularDragApplierConfig\n * @property {number} angularDragCoefficient\n */\n\n/**\n * @typedef {Object} LinearSpringForceApplierConfig\n * @property {number} springCoefficient\n * @property {Function.<vec3>} getIntendedPosition\n */\n\n/**\n * @typedef {Object} SpringDampingApplierConfig\n * @property {number} dampingCoefficient\n */\n","/**\n * This module defines a collection of static geometry utility functions.\n */\n\nconst EPSILON = 0.0000001;\nconst HALF_PI = Math.PI / 2;\nconst TWO_PI = Math.PI * 2;\n\n/**\n * Finds the minimum squared distance between two line segments.\n *\n * @param {LineSegment} segmentA\n * @param {LineSegment} segmentB\n * @returns {number}\n */\nfunction findSquaredDistanceBetweenSegments(segmentA, segmentB) {\n  findClosestPointsFromSegmentToSegment(_segmentDistance_tmpVecA, _segmentDistance_tmpVecB,\n      segmentA, segmentB);\n  return vec3.squaredDistance(_segmentDistance_tmpVecA, _segmentDistance_tmpVecB);\n}\n\n/**\n * Finds the minimum squared distance between a line segment and a point.\n *\n * @param {LineSegment} segment\n * @param {vec3} point\n * @returns {number}\n */\nfunction findSquaredDistanceFromSegmentToPoint(segment, point) {\n  findClosestPointOnSegmentToPoint(_segmentDistance_tmpVecA, segment, point);\n  return vec3.squaredDistance(_segmentDistance_tmpVecA, point);\n}\n\nconst _segmentDistance_tmpVecA = vec3.create();\nconst _segmentDistance_tmpVecB = vec3.create();\n\n/**\n * @param {vec3} outputPoint Output parameter.\n * @param {Aabb} aabb\n * @param {vec3} targetPoint\n */\nfunction findClosestPointFromAabbToPoint(outputPoint, aabb, targetPoint) {\n  outputPoint[0] = aabb.minX > targetPoint[0]\n      ? aabb.minX\n      : aabb.maxX < targetPoint[0]\n          ? aabb.maxX\n          : targetPoint[0];\n  outputPoint[1] = aabb.minY > targetPoint[1]\n      ? aabb.minY\n      : aabb.maxY < targetPoint[1]\n          ? aabb.maxY\n          : targetPoint[1];\n  outputPoint[2] = aabb.minZ > targetPoint[2]\n      ? aabb.minZ\n      : aabb.maxZ < targetPoint[2]\n          ? aabb.maxZ\n          : targetPoint[2];\n}\n\n/**\n * @param {vec3} outputPoint Output parameter.\n * @param {Aabb} aabb\n * @param {vec3} targetPoint\n */\nfunction findClosestPointFromAabbSurfaceToPoint(outputPoint, aabb, targetPoint) {\n  findClosestPointFromAabbToPoint(outputPoint, aabb, targetPoint);\n\n  // If the calculated point lies within the AABB, then we need to adjust one coordinate to lie\n  // along the edge of the AABB.\n  if (aabbVsPoint(aabb, outputPoint)) {\n    // Calculate the closest vertex.\n    _tmpVec1[0] = targetPoint[0] - aabb.minX < aabb.maxX - targetPoint[0]\n        ? aabb.minX\n        : aabb.maxX;\n    _tmpVec1[1] = targetPoint[1] - aabb.minY < aabb.maxY - targetPoint[1]\n        ? aabb.minY\n        : aabb.maxY;\n    _tmpVec1[2] = targetPoint[2] - aabb.minZ < aabb.maxZ - targetPoint[2]\n        ? aabb.minZ\n        : aabb.maxZ;\n\n    // Calculate the distance to the vertex along each dimension.\n    _tmpVec2[0] = _tmpVec1[0] - outputPoint[0];\n    _tmpVec2[0] = _tmpVec2[0] < 0 ? -_tmpVec2[0] : _tmpVec2[0];\n    _tmpVec2[1] = _tmpVec1[1] - outputPoint[1];\n    _tmpVec2[1] = _tmpVec2[1] < 1 ? -_tmpVec2[1] : _tmpVec2[1];\n    _tmpVec2[2] = _tmpVec1[2] - outputPoint[2];\n    _tmpVec2[2] = _tmpVec2[2] < 2 ? -_tmpVec2[2] : _tmpVec2[2];\n\n    // Determine along which dimension the point is closest to the AABB.\n    const index = _tmpVec2[0] < _tmpVec2[1]\n        ? (_tmpVec2[0] < _tmpVec2[2]\n            ? 0\n            : 2)\n        : (_tmpVec2[1] < _tmpVec2[2]\n            ? 1\n            : 2);\n\n    outputPoint[index] = _tmpVec1[index];\n  }\n}\n\n/**\n * Finds the point of intersection between a line segment and a coplanar quadrilateral.\n *\n * This assumes the region is not degenerate (has non-zero side lengths).\n *\n * @param {vec3} poi Output param. Null if there is no intersection.\n * @param {LineSegment} segment\n * @param {vec3} planeVertex1\n * @param {vec3} planeVertex2\n * @param {vec3} planeVertex3\n * @param {vec3} planeVertex4\n * @returns {boolean} True if there is an intersection.\n */\nfunction findPoiBetweenSegmentAndPlaneRegion(poi, segment, planeVertex1, planeVertex2, planeVertex3,\n                                             planeVertex4) {\n  return findPoiBetweenSegmentAndTriangle(poi, segment, planeVertex1, planeVertex2, planeVertex3) ||\n      findPoiBetweenSegmentAndTriangle(poi, segment, planeVertex1, planeVertex3, planeVertex4);\n}\n\n/**\n * Finds the point of intersection between a line segment and a triangle.\n *\n * This assumes the triangle is not degenerate (has non-zero side lengths).\n *\n * ----------------------------------------------------------------------------\n * Originally based on Dan Sunday's algorithms at http://geomalgorithms.com/a06-_intersect-2.html.\n *\n * Copyright 2001 softSurfer, 2012 Dan Sunday\n * This code may be freely used and modified for any purpose\n * providing that this copyright notice is included with it.\n * SoftSurfer makes no warranty for this code, and cannot be held\n * liable for any real or imagined damage resulting from its use.\n * Users of this code must verify correctness for their application.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} poi Output param. Null if there is no intersection.\n * @param {LineSegment} segment\n * @param {vec3} triangleVertex1\n * @param {vec3} triangleVertex2\n * @param {vec3} triangleVertex3\n * @returns {boolean} True if there is an intersection.\n */\nfunction findPoiBetweenSegmentAndTriangle(poi, segment, triangleVertex1, triangleVertex2,\n                                          triangleVertex3) {\n  //\n  // Find the point of intersection between the segment and the triangle's plane.\n  //\n\n  // First triangle edge.\n  vec3.subtract(_tmpVec1, triangleVertex2, triangleVertex1);\n  // Second triangle edge.\n  vec3.subtract(_tmpVec2, triangleVertex3, triangleVertex1);\n  // Triangle normal.\n  vec3.cross(_tmpVec3, _tmpVec1, _tmpVec2);\n  // Triangle to segment.\n  vec3.subtract(_tmpVec4, segment.start, triangleVertex1);\n\n  const normalToSegmentProj = vec3.dot(_tmpVec3, segment.dir);\n\n  if (normalToSegmentProj < EPSILON && normalToSegmentProj > -EPSILON) {\n    // The line segment is parallel to the triangle.\n    return false;\n  }\n\n  const normalToDiffProj = -vec3.dot(_tmpVec3, _tmpVec4);\n  const segmentNormalizedDistance = normalToDiffProj / normalToSegmentProj;\n\n  if (segmentNormalizedDistance < 0 || segmentNormalizedDistance > 1) {\n    // The line segment ends before intersecting the plane.\n    return false;\n  }\n\n  vec3.scaleAndAdd(poi, segment.start, segment.dir, segmentNormalizedDistance);\n\n  //\n  // Determine whether the point of intersection lies within the triangle.\n  //\n\n  const edge1DotEdge1 = vec3.dot(_tmpVec1, _tmpVec1);\n  const edge1DotEdge2 = vec3.dot(_tmpVec1, _tmpVec2);\n  const edge2DotEdge2 = vec3.dot(_tmpVec2, _tmpVec2);\n  // Triangle to point of intersection.\n  vec3.subtract(_tmpVec3, poi, triangleVertex1);\n  const diffDotEdge1 = vec3.dot(_tmpVec3, _tmpVec1);\n  const diffDotEdge2 = vec3.dot(_tmpVec3, _tmpVec2);\n  const denominator = edge1DotEdge2 * edge1DotEdge2 - edge1DotEdge1 * edge2DotEdge2;\n\n  // Check the triangle's parametric coordinates.\n  const s = (edge1DotEdge2 * diffDotEdge2 - edge2DotEdge2 * diffDotEdge1) / denominator;\n  if (s < 0 || s > 1) {\n    return false;\n  }\n  const t = (edge1DotEdge2 * diffDotEdge1 - edge1DotEdge1 * diffDotEdge2) / denominator;\n  if (t < 0 || s + t > 1) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/1093e39d91def7ff6905fb7489893190d7d81353/src/Geometry/OBB.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} outputPoint Output parameter.\n * @param {Obb} obb\n * @param {vec3} targetPoint\n */\nfunction findClosestPointFromObbToPoint(outputPoint, obb, targetPoint) {\n  vec3.subtract(_tmpVec1, targetPoint, obb.centerOfVolume);\n  vec3.copy(outputPoint, obb.centerOfVolume);\n  for (let i = 0; i < 3; i++) {\n    // Compute the displacement along this axis.\n    let projection = vec3.dot(obb.axes[i], _tmpVec1);\n    projection = projection > obb.halfSideLengths[i] ? obb.halfSideLengths[i] :\n        (projection < -obb.halfSideLengths[i] ? -obb.halfSideLengths[i] : projection);\n    vec3.scaleAndAdd(outputPoint, outputPoint, obb.axes[i], projection);\n  }\n}\n\n/**\n * Finds the closest position on one line segment to the other line segment, and vice versa.\n *\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/LineSegment.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} closestA Output param.\n * @param {vec3} closestB Output param.\n * @param {LineSegment} segmentA\n * @param {LineSegment} segmentB\n */\nfunction findClosestPointsFromSegmentToSegment(closestA, closestB, segmentA, segmentB) {\n  const {distA, distB} = findClosestPointsFromLineToLine(\n      segmentA.start, segmentA.dir, segmentB.start, segmentB.dir);\n\n  const isDistAInBounds = distA >= 0 && distA <= 1;\n  const isDistBInBounds = distB >= 0 && distB <= 1;\n\n  if (isDistAInBounds) {\n    if (isDistBInBounds) {\n      // The distances along both line segments are within bounds.\n      vec3.scaleAndAdd(closestA, segmentA.start, segmentA.dir, distA);\n      vec3.scaleAndAdd(closestB, segmentB.start, segmentB.dir, distB);\n    } else {\n      // Only the distance along the first line segment is within bounds.\n      if (distB < 0) {\n        vec3.copy(closestB, segmentB.start);\n      } else {\n        vec3.copy(closestB, segmentB.end);\n      }\n      findClosestPointOnSegmentToPoint(closestA, segmentA, closestB);\n    }\n  } else {\n    if (isDistBInBounds) {\n      // Only the distance along the second line segment is within bounds.\n      if (distA < 0) {\n        vec3.copy(closestA, segmentA.start);\n      } else {\n        vec3.copy(closestA, segmentA.end);\n      }\n      findClosestPointOnSegmentToPoint(closestB, segmentB, closestA);\n    } else {\n      // Neither of the distances along either line segment are within bounds.\n      if (distA < 0) {\n        vec3.copy(closestA, segmentA.start);\n      } else {\n        vec3.copy(closestA, segmentA.end);\n      }\n\n      if (distB < 0) {\n        vec3.copy(closestB, segmentB.start);\n      } else {\n        vec3.copy(closestB, segmentB.end);\n      }\n\n      const altClosestA = vec3.create();\n      const altClosestB = vec3.create();\n\n      findClosestPointOnSegmentToPoint(altClosestA, segmentA, closestB);\n      findClosestPointOnSegmentToPoint(altClosestB, segmentB, closestA);\n\n      if (vec3.squaredDistance(altClosestA, closestB) <\n          vec3.squaredDistance(altClosestB, closestA)) {\n        vec3.copy(closestA, altClosestA);\n      } else {\n        vec3.copy(closestB, altClosestB);\n      }\n    }\n  }\n}\n\n/**\n * Finds the closest position on a line segment to a point.\n *\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/LineSegment.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} closestPoint Output param.\n * @param {LineSegment} segment\n * @param {vec3} point\n * @private\n */\nfunction findClosestPointOnSegmentToPoint(closestPoint, segment, point) {\n  const dirSquaredLength = vec3.squaredLength(segment.dir);\n\n  if (!dirSquaredLength) {\n    // The point is at the segment start.\n    vec3.copy(closestPoint, segment.start);\n  } else {\n    // Calculate the projection of the point onto the line extending through the segment.\n    vec3.subtract(_tmpVec1, point, segment.start);\n    const t = vec3.dot(_tmpVec1, segment.dir) / dirSquaredLength;\n\n    if (t < 0) {\n      // The point projects beyond the segment start.\n      vec3.copy(closestPoint, segment.start);\n    } else if (t > 1) {\n      // The point projects beyond the segment end.\n      vec3.copy(closestPoint, segment.end);\n    } else {\n      // The point projects between the start and end of the segment.\n      vec3.scaleAndAdd(closestPoint, segment.start, segment.dir, t);\n    }\n  }\n}\n\n/**\n * Finds the closest position on one line to the other line, and vice versa.\n *\n * The positions are represented as scalar-value distances from the \"start\" positions of each line.\n * These are scaled according to the given direction vectors.\n *\n * ----------------------------------------------------------------------------\n * Originally based on Jukka Jylänki's algorithm at\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/Line.cpp.\n *\n * Copyright 2011 Jukka Jylänki\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ----------------------------------------------------------------------------\n *\n * @param {vec3} startA The start position of line A.\n * @param {vec3} dirA The (unnormalized) direction of line A. Cannot be zero.\n * @param {vec3} startB The start position of line B.\n * @param {vec3} dirB The (unnormalized) direction of line B. Cannot be zero.\n * @returns {{distA: Number, distB: Number}}\n */\nfunction findClosestPointsFromLineToLine(startA, dirA, startB, dirB) {\n  vec3.subtract(_tmpVec1, startA, startB);\n  const dirBDotDirAToB = vec3.dot(dirB, _tmpVec1);\n  const dirADotDirAToB = vec3.dot(dirA, _tmpVec1);\n\n  const sqrLenDirB = vec3.squaredLength(dirB);\n  const sqrLenDirA = vec3.squaredLength(dirA);\n\n  const dirADotDirB = vec3.dot(dirA, dirB);\n\n  const denominator = sqrLenDirA * sqrLenDirB - dirADotDirB * dirADotDirB;\n\n  const distA = denominator < EPSILON\n      ? 0\n      : (dirADotDirB * dirBDotDirAToB - sqrLenDirB * dirADotDirAToB) / denominator;\n  const distB = (dirBDotDirAToB + dirADotDirB * distA) / sqrLenDirB;\n\n  return {\n    distA: distA,\n    distB: distB\n  };\n}\n\n/**\n * A good description of why we need these special operations for rotating tensors can be found\n * here: http://www.randygaul.net/2014/04/09/transformations-change-of-basis-matrix/.\n *\n * @param {mat3} output Output param.\n * @param {mat3} tensor\n * @param {quat} rotation\n */\nfunction rotateTensor(output, tensor, rotation) {// TODO: Test this somehow...\n  mat3.fromQuat(_tmpMat, rotation);\n  mat3.multiply(output, _tmpMat, tensor);\n  mat3.invert(_tmpMat, _tmpMat);\n  mat3.multiply(output, output, _tmpMat);\n}\n\n/**\n * @param {Aabb} aabb\n * @param {vec3} point\n * @returns {boolean}\n */\nfunction aabbVsPoint(aabb, point) {\n  return point[0] >= aabb.minX && point[0] <= aabb.maxX &&\n      point[1] >= aabb.minY && point[1] <= aabb.maxY &&\n      point[2] >= aabb.minZ && point[2] <= aabb.maxZ\n}\n\n/**\n * @param {quat} out\n * @param {quat} a\n * @param {quat} b\n * @param {number} scale\n * @returns {quat}\n */\nfunction scaleAndAddQuat(out, a, b, scale) {\n  return quat.set(out,\n      a[0] + b[0] * scale,\n      a[1] + b[1] * scale,\n      a[2] + b[2] * scale,\n      a[3] + b[3] * scale);\n}\n\n/**\n * @param {vec3} a\n * @param {vec3} b\n * @returns {boolean}\n */\nfunction areVec3sClose(a, b) {\n  for (let i = 0; i < 3; i++) {\n    if (a[i] - b[i] > EPSILON || b[i] - a[i] > EPSILON) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Re-used across the geometry utility functions, so we don't instantiate as many vec3 objects.\nconst _tmpVec1 = vec3.create();\nconst _tmpVec2 = vec3.create();\nconst _tmpVec3 = vec3.create();\nconst _tmpVec4 = vec3.create();\nconst _tmpMat = mat3.create();\n\n// Exposed to consumers, so they don't have to instantiate as many vec3 objects.\nconst tmpVec1 = vec3.create();\nconst tmpVec2 = vec3.create();\nconst tmpVec3 = vec3.create();\nconst tmpVec4 = vec3.create();\n\nconst _geometry = {\n  EPSILON,\n  HALF_PI,\n  TWO_PI,\n  scaleAndAddQuat,\n};\n\nexport {\n  _geometry,\n  tmpVec1,\n  tmpVec2,\n  tmpVec3,\n  tmpVec4,\n  findSquaredDistanceBetweenSegments,\n  findSquaredDistanceFromSegmentToPoint,\n  findClosestPointFromAabbToPoint,\n  findClosestPointFromAabbSurfaceToPoint,\n  findPoiBetweenSegmentAndTriangle,\n  findPoiBetweenSegmentAndPlaneRegion,\n  findClosestPointFromObbToPoint,\n  findClosestPointsFromSegmentToSegment,\n  findClosestPointOnSegmentToPoint,\n  findClosestPointsFromLineToLine,\n  rotateTensor,\n  aabbVsPoint,\n  areVec3sClose,\n};\n","/**\n * This module defines a collection of static utility functions for calculating inertia tensors.\n */\n\nimport {_geometry, rotateTensor} from './geometry';\n\n/**\n * @param {number} radius\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createSphereInertiaTensor(radius, mass) {// TODO: Test this somehow...\n  const tensor = mat3.create();\n  const moment = 2 / 5 * mass * radius * radius;\n  tensor[0] = moment;\n  tensor[4] = moment;\n  tensor[8] = moment;\n  return tensor;\n}\n\n/**\n * @param {number} rangeX\n * @param {number} rangeY\n * @param {number} rangeZ\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createBoxInertiaTensor(rangeX, rangeY, rangeZ, mass) {// TODO: Test this somehow...\n  const tensor = mat3.create();\n  const tmp = mass / 12;\n  const xRangeSquared = rangeX * rangeX;\n  const yRangeSquared = rangeY * rangeY;\n  const zRangeSquared = rangeZ * rangeZ;\n  tensor[0] = tmp * (yRangeSquared + zRangeSquared);\n  tensor[4] = tmp * (xRangeSquared + yRangeSquared);\n  tensor[8] = tmp * (xRangeSquared + zRangeSquared);\n  return tensor;\n}\n\n/**\n * ----------------------------------------------------------------------------\n * Originally based on Bojan Lovrovic's algorithm at\n * http://www.gamedev.net/page/resources/_/technical/math-and-physics/capsule-inertia-tensor-r3856.\n *\n * Copyright 2014 Bojan Lovrovic\n *\n * GameDev.net Open License\n * (http://www.gamedev.net/page/resources/_/gdnethelp/gamedevnet-open-license-r2956)\n *\n * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n *\n * 1. Definitions.\n *\n * \"Article\" shall refer to any body of text written by Author which describes and documents the use\n * and/or operation of Source. It specifically does not refer to any accompanying Source either\n * embedded within the body of text or attached to the article as a file.\n *\n * \"Author\" means the individual or entity that offers the Work under the terms of this License.\n *\n * \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined\n * by Sections 1 through 9 of this document.\n *\n * \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is\n * granting the License.\n *\n * \"You\" (or \"Your\") shall mean an individual or entity exercising permissions granted by this\n * License.\n *\n * \"Source\" shall include all software text source code and configuration files used to create\n * executable software\n *\n * \"Object\" shall mean any Source which has been converted into a machine executable software\n *\n * \"Work\" consists of both the Article and Source\n *\n * \"Publisher\" refers to GameDev.net LLC\n *\n * This agreement is between You and Author, the owner and creator of the Work located at\n * Gamedev.net.\n *\n * 2. Fair Dealing Rights.\n *\n * Nothing in this License is intended to reduce, limit, or restrict any uses free from copyright or\n * rights arising from limitations or exceptions that are provided for in connection with the\n * copyright protection under copyright law or other applicable laws.\n *\n * 3. Grant of Copyright License.\n *\n * Subject to the terms and conditions of this License, the Author hereby grants to You a perpetual,\n * worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to the Work\n * under the following stated terms:\n * You may not reproduce the Article on any other website outside of Gamedev.net without express\n * written permission from the Author\n * You may use, copy, link, modify and distribute under Your own terms, binary Object code versions\n * based on the Work in your own software\n * You may reproduce, prepare derivative Works of, publicly display, publicly perform, sublicense,\n * and distribute the Source and such derivative Source in Source form only as part of a larger\n * software distribution and provided that attribution to the original Author is granted.\n * The origin of this Work must not be misrepresented; you must not claim that you wrote the\n * original Source. If you use this Source in a product, an acknowledgment of the Author name would\n * be appreciated but is not required.\n *\n * 4. Restrictions.\n *\n * The license granted in Section 3 above is expressly made subject to and limited by the following\n * restrictions:\n * Altered Source versions must be plainly marked as such, and must not be misrepresented as being\n * the original software.\n * This License must be visibly linked to from any online distribution of the Article by URI and\n * using the descriptive text \"Licensed under the GameDev.net Open License\"\n * Neither the name of the Author of this Work, nor any of their trademarks or service marks, may be\n * used to endorse or promote products derived from this Work without express prior permission of\n * the Author\n * Except as expressly stated herein, nothing in this License grants any license to Author's\n * trademarks, copyrights, patents, trade secrets or any other intellectual property. No license is\n * granted to the trademarks of Author even if such marks are included in the Work. Nothing in this\n * License shall be interpreted to prohibit Author from licensing under terms different from this\n * License any Work that Author otherwise would have a right to license.\n *\n * 5. Grant of Patent License.\n *\n * Subject to the terms and conditions of this License, each Contributor hereby grants to You a\n * perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in\n * this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise\n * transfer the Work, where such license applies only to those patent claims licensable by such\n * Contributor that are necessarily infringed by their Contribution(s) alone or by combination of\n * their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute\n * patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit)\n * alleging that the Work or Source incorporated within the Work constitutes direct or contributory\n * patent infringement, then any patent licenses granted to You under this License for that Work\n * shall terminate as of the date such litigation is filed.\n *\n * 6. Limitation of Liability.\n *\n * In no event and under no legal theory, whether in tort (including negligence), contract, or\n * otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or\n * agreed to in writing, shall any Author or Publisher be liable to You for damages, including any\n * direct, indirect, special, incidental, or consequential damages of any character arising as a\n * result of this License or out of the use or inability to use the Work (including but not limited\n * to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all\n * other commercial damages or losses), even if such Author has been advised of the possibility of\n * such damages.\n *\n * 7. DISCLAIMER OF WARRANTY\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\n * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * 8. Publisher.\n *\n * The parties hereby confirm that the Publisher shall not, under any circumstances, be responsible\n * for and shall not have any liability in respect of the subject matter of this License. The\n * Publisher makes no warranty whatsoever in connection with the Work and shall not be liable to You\n * or any party on any legal theory for any damages whatsoever, including without limitation any\n * general, special, incidental or consequential damages arising in connection to this license. The\n * Publisher reserves the right to cease making the Work available to You at any time without notice\n *\n * 9. Termination\n *\n * This License and the rights granted hereunder will terminate automatically upon any breach by You\n * of the terms of this License. Individuals or entities who have received Deriviative Works from\n * You under this License, however, will not have their licenses terminated provided such\n * individuals or entities remain in full compliance with those licenses. Sections 1, 2, 6, 7, 8 and\n * 9 will survive any termination of this License.\n * Subject to the above terms and conditions, the license granted here is perpetual (for the\n * duration of the applicable copyright in the Work). Notwithstanding the above, Licensor reserves\n * the right to release the Work under different license terms or to stop distributing the Work at\n * any time; provided, however that any such election will not serve to withdraw this License (or\n * any other license that has been, or is required to be, granted under the terms of this License),\n * and this License will continue in full force and effect unless terminated as stated above.\n * ----------------------------------------------------------------------------\n *\n * @param {number} halfDistance\n * @param {number} radius\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createCapsuleInertiaTensor(halfDistance, radius, mass) {// TODO: Test this somehow...\n  const tensor = mat3.create();\n\n  const cylinderHeight = halfDistance * 2;\n  const radiusSquared = radius * radius;\n  const cylinderVolume = Math.PI * radiusSquared * cylinderHeight;\n  const hemisphereCombinedVolume = 4 / 3 * Math.PI * radiusSquared;\n  const cylinderMass = cylinderVolume / (cylinderVolume * hemisphereCombinedVolume) * mass;\n  const hemisphereMass = (mass - cylinderMass) / 2;\n\n  // Contribution from the cylinder.\n  tensor[4] = radiusSquared * cylinderMass / 2;\n  tensor[0] = tensor[4] / 2 + cylinderMass * cylinderHeight * cylinderHeight / 12;\n  tensor[8] = tensor[0];\n\n  // Contributions from the hemispheres.\n  const tmp1 = hemisphereMass * 2 * radiusSquared / 5;\n  tensor[4] += tmp1 * 2;\n  const tmp2 =\n      (tmp1 + hemisphereMass * (halfDistance * halfDistance + 3 / 8 * cylinderHeight * radius)) * 2;\n  tensor[0] += tmp2;\n  tensor[8] += tmp2;\n\n  // The above calculations assume the capsule is aligned along the y-axis. However, our default\n  // capsule orientation is aligned along the z-axis.\n  const rotation = quat.create();\n  quat.rotateX(rotation, rotation, _geometry.HALF_PI);\n  rotateTensor(tensor, tensor, rotation);\n\n  return tensor;\n}\n\n/**\n * @param {Collidable} collidable\n * @param {number} mass\n * @returns {mat3}\n */\nfunction createForCollidable(collidable, mass) {\n  switch (collidable.constructor.name) {\n    case 'Sphere':\n      return createSphereInertiaTensor(collidable.radius, mass);\n    case 'Aabb':\n      return createBoxInertiaTensor(collidable.rangeX, collidable.rangeY, collidable.rangeZ, mass);\n    case 'Capsule':\n      return createCapsuleInertiaTensor(collidable.halfDistance, collidable.radius, mass);\n    case 'Obb':\n      return createBoxInertiaTensor(collidable.halfSideLengths[0] * 2,\n          collidable.halfSideLengths[1] * 2, collidable.halfSideLengths[2] * 2, mass);\n  }\n}\n\nexport {\n  createSphereInertiaTensor,\n  createBoxInertiaTensor,\n  createCapsuleInertiaTensor,\n  createForCollidable,\n};\n","/**\n * This module defines a collection of static general utility functions.\n */\n\n// TODO: This should be set from somewhere else (probably as a param to controller like before; but then I need to make this updatable)\nconst isInDevMode = true;\n\nconst _util = {\n  isInDevMode: isInDevMode\n};\n\nexport {\n  _util,\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvbHNsLWFuaW1hdGV4L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2xzbC1hbmltYXRleC9zcmMvYW5pbWF0aW9uLWpvYi5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtYW5pbWF0ZXgvc3JjL2FuaW1hdG9yLmpzIiwibm9kZV9tb2R1bGVzL2xzbC1hbmltYXRleC9zcmMvZnJhbWUtbGF0ZW5jeS1wcm9maWxlci5qcyIsIm5vZGVfbW9kdWxlcy9sc2wtYW5pbWF0ZXgvc3JjL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2xzbC1hbmltYXRleC9zcmMvcGVyc2lzdGVudC1hbmltYXRpb24tam9iLmpzIiwibm9kZV9tb2R1bGVzL2xzbC1hbmltYXRleC9zcmMvdHJhbnNpZW50LWFuaW1hdGlvbi1qb2IuanMiLCJub2RlX21vZHVsZXMvbHNsLWFuaW1hdGV4L3NyYy91dGlsLmpzIiwic3JjL2NvbGxpc2lvbnMvY29sbGlkYWJsZXMvaW5kZXguanMiLCJzcmMvY29sbGlzaW9ucy9jb2xsaWRhYmxlcy9zcmMvYWFiYi1jb2xsaWRhYmxlLmpzIiwic3JjL2NvbGxpc2lvbnMvY29sbGlkYWJsZXMvc3JjL2NhcHN1bGUtY29sbGlkYWJsZS5qcyIsInNyYy9jb2xsaXNpb25zL2NvbGxpZGFibGVzL3NyYy9jb2xsaWRhYmxlLmpzIiwic3JjL2NvbGxpc2lvbnMvY29sbGlkYWJsZXMvc3JjL2xpbmUtc2VnbWVudC5qcyIsInNyYy9jb2xsaXNpb25zL2NvbGxpZGFibGVzL3NyYy9vYmItY29sbGlkYWJsZS5qcyIsInNyYy9jb2xsaXNpb25zL2NvbGxpZGFibGVzL3NyYy9zcGhlcmUtY29sbGlkYWJsZS5qcyIsInNyYy9jb2xsaXNpb25zL2NvbGxpc2lvbi1kZXRlY3Rpb24vaW5kZXguanMiLCJzcmMvY29sbGlzaW9ucy9jb2xsaXNpb24tZGV0ZWN0aW9uL3NyYy9hYWJiLWNvbGxpc2lvbi1kZXRlY3Rpb24uanMiLCJzcmMvY29sbGlzaW9ucy9jb2xsaXNpb24tZGV0ZWN0aW9uL3NyYy9jYXBzdWxlLWNvbGxpc2lvbi1kZXRlY3Rpb24uanMiLCJzcmMvY29sbGlzaW9ucy9jb2xsaXNpb24tZGV0ZWN0aW9uL3NyYy9vYmItY29sbGlzaW9uLWRldGVjdGlvbi5qcyIsInNyYy9jb2xsaXNpb25zL2NvbGxpc2lvbi1kZXRlY3Rpb24vc3JjL3NwaGVyZS1jb2xsaXNpb24tZGV0ZWN0aW9uLmpzIiwic3JjL2NvbGxpc2lvbnMvY29udGFjdC1jYWxjdWxhdGlvbi9pbmRleC5qcyIsInNyYy9jb2xsaXNpb25zL2NvbnRhY3QtY2FsY3VsYXRpb24vc3JjL2FhYmItY29udGFjdC1jYWxjdWxhdGlvbi5qcyIsInNyYy9jb2xsaXNpb25zL2NvbnRhY3QtY2FsY3VsYXRpb24vc3JjL2NhcHN1bGUtY29udGFjdC1jYWxjdWxhdGlvbi5qcyIsInNyYy9jb2xsaXNpb25zL2NvbnRhY3QtY2FsY3VsYXRpb24vc3JjL29iYi1jb250YWN0LWNhbGN1bGF0aW9uLmpzIiwic3JjL2NvbGxpc2lvbnMvY29udGFjdC1jYWxjdWxhdGlvbi9zcmMvc3BoZXJlLWNvbnRhY3QtY2FsY3VsYXRpb24uanMiLCJzcmMvY29sbGlzaW9ucy9pbmRleC5qcyIsInNyYy9jb2xsaXNpb25zL3NyYy9jb2xsaWRhYmxlLWZhY3Rvcmllcy5qcyIsInNyYy9jb2xsaXNpb25zL3NyYy9jb2xsaWRhYmxlLXBoeXNpY3Mtam9iLmpzIiwic3JjL2NvbGxpc2lvbnMvc3JjL2NvbGxpZGFibGUtc3RvcmUuanMiLCJzcmMvY29sbGlzaW9ucy9zcmMvY29sbGlzaW9uLWhhbmRsZXIuanMiLCJzcmMvY29sbGlzaW9ucy9zcmMvY29sbGlzaW9uLXV0aWxzLmpzIiwic3JjL2luZGV4LmpzIiwic3JjL2ludGVncmF0b3IvaW5kZXguanMiLCJzcmMvaW50ZWdyYXRvci9zcmMvaW50ZWdyYXRvci5qcyIsInNyYy9pbnRlZ3JhdG9yL3NyYy9yazQtaW50ZWdyYXRvci5qcyIsInNyYy9zcmMvcGh5c2ljcy1lbmdpbmUuanMiLCJzcmMvc3JjL3BoeXNpY3Mtam9iLmpzIiwic3JjL3NyYy9waHlzaWNzLXN0YXRlLmpzIiwic3JjL3V0aWwvaW5kZXguanMiLCJzcmMvdXRpbC9zcmMvZm9yY2UtdXRpbHMuanMiLCJzcmMvdXRpbC9zcmMvZ2VvbWV0cnkuanMiLCJzcmMvdXRpbC9zcmMvaW5lcnRpYS10ZW5zb3ItdXRpbHMuanMiLCJzcmMvdXRpbC9zcmMvdXRpbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FDQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7Ozs7O0FDQUE7Ozs7O0lBS00sWTtBQUNKOzs7QUFHQSx3QkFBWSxVQUFaLEVBQXdCO0FBQUE7O0FBQ3RCO0FBQ0EsUUFBSSxJQUFJLE1BQUosS0FBZSxZQUFuQixFQUFpQztBQUMvQixZQUFNLElBQUksU0FBSixDQUFjLGtEQUFkLENBQU47QUFDRDs7QUFFRCxTQUFLLFVBQUwsR0FBa0IsQ0FBbEI7QUFDQSxTQUFLLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxTQUFLLFdBQUwsR0FBbUIsVUFBbkI7QUFDRDs7QUFFRDs7Ozs7Ozs7Ozs7QUFTQTs7Ozs7MEJBS00sUyxFQUFXO0FBQ2YsV0FBSyxVQUFMLEdBQWtCLFNBQWxCO0FBQ0EsV0FBSyxXQUFMLEdBQW1CLEtBQW5CO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7OzsyQkFTTyxXLEVBQWEsUyxFQUFXO0FBQzdCO0FBQ0EsWUFBTSxJQUFJLFNBQUosQ0FBYyx3QkFBZCxDQUFOO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7MkJBT087QUFDTDtBQUNBLFlBQU0sSUFBSSxTQUFKLENBQWMsd0JBQWQsQ0FBTjtBQUNEOztBQUVEOzs7Ozs7OzsyQkFLTyxXLEVBQWE7QUFDbEIsY0FBUSxHQUFSLENBQWUsS0FBSyxXQUFMLENBQWlCLElBQWhDLFVBQXdDLGNBQWMsV0FBZCxHQUE0QixXQUFwRTs7QUFFQSxXQUFLLFdB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QUFBQSxTQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQSxFQUFBO0FBQUEsZ0JBQUEsSUFBQTtBQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7QUFBQSxhQUFBLGFBQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7OztBQUNBLE9BQUEsSUFBQSxDQUFBLGNBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxlQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7Ozs7QUFDQSxPQUFBLElBQUEsQ0FBQSxpQkFBQSxFQUFBLE9BQUEsQ0FBQSxVQUFBLEdBQUEsRUFBQTtBQUFBLE1BQUEsUUFBQSxTQUFBLElBQUEsUUFBQSxZQUFBLEVBQUE7QUFBQSxTQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQSxFQUFBO0FBQUEsZ0JBQUEsSUFBQTtBQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7QUFBQSxhQUFBLGtCQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNMQSxJQUFBLGNBQUEsUUFBQSxjQUFBLENBQUE7O0FBQ0EsSUFBQSxlQUFBLFFBQUEsZ0JBQUEsQ0FBQTs7QUFDQSxJQUFBLFFBQUEsUUFBQSxlQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7Ozs7SUFPTSxPOzs7QUFDSjs7Ozs7Ozs7OztBQVVBLFdBQUEsSUFBQSxDQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFrRjtBQUFBLFFBQWxDLGVBQWtDLFVBQUEsTUFBQSxHQUFBLENBQUEsSUFBQSxVQUFBLENBQUEsTUFBQSxTQUFB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QTs7QUFFQSxXQUFBLEdBQUEsQ0FBUyxNQUFULE9BQUEsRUFBa0IsS0FBbEIsSUFBQSxFQUE2QixLQUE3QixJQUFBLEVBQXdDLEtBQXhDLElBQUE7QUFDQSxXQUFBLEdBQUEsQ0FBUyxNQUFULE9BQUEsRUFBa0IsS0FBbEIsSUFBQSxFQUE2QixLQUE3QixJQUFBLEVBQXdDLEtBQXhDLElBQUE7QUFDQSxXQUFBLEtBQUEsQ0FBVyxNQUFYLE9BQUEsRUFBb0IsTUFBcEIsT0FBQTtBQUNBLFVBQUksU0FBSixJQUFJLENBQUosRUFBb0IsT0FBQSxJQUFBOztBQUVwQixXQUFBLEdBQUEsQ0FBUyxNQUFULE9BQUEsRUFBa0IsS0FBbEIsSUFBQSxFQUE2QixLQUE3QixJQUFBLEVBQXdDLEtBQXhDLElBQUE7QUFDQSxXQUFBLEdBQUEsQ0FBUyxNQUFULE9BQUEsRUFBa0IsS0FBbEIsSUFBQSxFQUE2QixLQUE3QixJQUFBLEVBQXdDLEtBQXhDLElBQUE7QUFDQSxXQUFBLEtBQUEsQ0FBVyxNQUFYLE9BQUEsRUFBb0IsTUFBcEIsT0FBQTtBQUNBLFVBQUksU0FBSixJQUFJLENBQUosRUFBb0IsT0FBQSxJQUFBOztBQUVwQixXQUFBLEdBQUEsQ0FBUyxNQUFULE9BQUEsRUFBa0IsS0FBbEIsSUFBQSxFQUE2QixLQUE3QixJQUFBLEVBQXdDLEtBQXhDLElBQUE7QUFDQSxXQUFBLEdBQUEsQ0FBUyxNQUFULE9BQUEsRUFBa0IsS0FBbEIsSUFBQSxFQUE2QixLQUE3QixJQUFBLEVBQXdDLEtBQXhDLElBQUE7QUFDQSxXQUFBLEtBQUEsQ0FBVyxNQUFYLE9BQUEsRUFBb0IsTUFBcEIsT0FBQTtBQUNBLFVBQUksU0FBSixJQUFJLENBQUosRUFBb0IsT0FBQSxJQUFBOztBQUVwQixXQUFBLEdBQUEsQ0FBUyxNQUFULE9BQUEsRUFBa0IsS0FBbEIsSUFBQSxFQUE2QixLQUE3QixJQUFBLEVBQXdDLEtBQXhDLElBQUE7QUFDQSxXQUFBLEdBQUEsQ0FBUyxNQUFULE9BQUEsRUFBa0IsS0FBbEIsSUFBQSxFQUE2QixLQUE3QixJ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QSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsYUFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEsbUJBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxvQkFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEsbUJBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxvQkFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBRUEsT0FBQSxJQUFBLENBQUEsb0JBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxxQkFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEscUJBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxzQkFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEsZ0JBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxpQkFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEsaUJBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxrQkFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEsZUFBQSxFQUFBLE9BQUEsQ0FBQSxVQUFBLEdBQUEsRUFBQTtBQUFBLE1BQUEsUUFBQSxTQUFBLElBQUEsUUFBQSxZQUFBLEVBQUE7QUFBQSxTQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQSxFQUFBO0FBQUEsZ0JBQUEsSUFBQTtBQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7QUFBQSxhQUFBLGdCQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7Ozs7Ozs7Ozs7QUNKQSxJQUFBLGVBQUEsUUFBQSxnQkFBQSxDQUFBOztBQUtBLElBQUEsUUFBQSxRQUFBLFlBQUEsQ0FBQTs7QUFFQTs7Ozs7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SUFBQTtBQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7QUFBQSxhQUFBLFlBQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7OztBQUNBLE9BQUEsSUFBQSxDQUFBLEtBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxNQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7Ozs7QUFFQSxPQUFBLElBQUEsQ0FBQSxjQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsZUFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEsV0FBQSxFQUFBLE9BQUEsQ0FBQSxVQUFBLEdBQUEsRUFBQTtBQUFBLE1BQUEsUUFBQSxTQUFBLElBQUEsUUFBQSxZQUFBLEVBQUE7QUFBQSxTQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQSxFQUFBO0FBQUEsZ0JBQUEsSUFBQTtBQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7QUFBQSxhQUFBLFlBQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7OztBQUNBLE9BQUEsSUFBQSxDQUFBLGFBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEs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Ozs7Ozs7UUFHSyxZLEdBQUEsWTs7QUFFUjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2hHQSxPQUFBLElBQUEsQ0FBQSxXQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsWUFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEsU0FBQSxFQUFBLE9BQUEsQ0FBQSxVQUFBLEdBQUEsRUFBQTtBQUFBLE1BQUEsUUFBQSxTQUFBLElBQUEsUUFBQSxZQUFBLEVBQUE7QUFBQSxTQUFBLGNBQUEsQ0FBQSxPQUFBLEVBQUEsR0FBQSxFQUFBO0FBQUEsZ0JBQUEsSUFBQTtBQUFBLFNBQUEsU0FBQSxHQUFBLEdBQUE7QUFBQSxhQUFBLFVBQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7OztBQUNBLE9BQUEsSUFBQSxDQUFBLG1CQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsb0JBQUEsR0FBQSxDQUFBO0FBQUE7QUFBQSxHQUFBO0FBQUEsQ0FBQTs7OztBQUNBLE9BQUEsSUFBQSxDQUFBLEtBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEs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LEVBQStDO0FBQzdDLFVBQVEsV0FBQSxXQUFBLENBQVIsSUFBQTtBQUNFLFNBQUEsUUFBQTtBQUNFLGFBQU8sMEJBQTBCLFdBQTFCLE1BQUEsRUFBUCxJQUFPLENBQVA7QUFDRixTQUFBLE1BQUE7QUFDRSxhQUFPLHVCQUF1QixXQUF2QixNQUFBLEVBQTBDLFdBQTFDLE1BQUEsRUFBNkQsV0FBN0QsTUFBQSxFQUFQLElBQU8sQ0FBUDtBQUNGLFNBQUEsU0FBQTtBQUNFLGFBQU8sMkJBQTJCLFdBQTNCLFlBQUEsRUFBb0QsV0FBcEQsTUFBQSxFQUFQLElBQU8sQ0FBUDtBQUNGLFNBQUEsS0FBQTtBQUNFLGFBQU8sdUJBQXVCLFdBQUEsZUFBQSxDQUFBLENBQUEsSUFBdkIsQ0FBQSxFQUNILFdBQUEsZUFBQSxDQUFBLENBQUEsSUFERyxDQUFBLEVBQ2dDLFdBQUEsZUFBQSxDQUFBLENBQUEsSUFEaEMsQ0FBQSxFQUFQLElBQU8sQ0FBUDtBQVJKO0FBV0Q7O1FBR0MseUIsR0FBQSx5QjtRQUNBLHNCLEdBQUEsc0I7UUFDQSwwQixHQUFBLDBCO1FBQ0EsbUIsR0FBQSxtQjs7Ozs7Ozs7QUMzT0Y7Ozs7QUFJQTtBQUNBLElBQU0sY0FBTixJQUFBOztBQUVBLElBQU0sUUFBUTtBQUNaLGVBQWE7QUFERCxDQUFkOztRQUtFLEssR0FBQSxLIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiZXhwb3J0ICogZnJvbSAnLi9zcmMnO1xuIiwiLyoqXG4gKiBBbiBBbmltYXRpb25Kb2IgaXMgdXNlZCB3aXRoIHRoZSBhbmltYXRvciBjb250cm9sbGVyIHRvIHVwZGF0ZSBhbmQgcmUtZHJhdyBzb21ldGhpbmcgZWFjaCBmcmFtZS5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqL1xuY2xhc3MgQW5pbWF0aW9uSm9iIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNvbXBsZXRlXSBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoaXMgQW5pbWF0aW9uSm9iIGlzIGZpbmlzaGVkLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob25Db21wbGV0ZSkge1xuICAgIC8vIEFuaW1hdGlvbkpvYiBpcyBhbiBhYnN0cmFjdCBjbGFzcy4gSXQgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gICAgaWYgKG5ldy50YXJnZXQgPT09IEFuaW1hdGlvbkpvYikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnN0cnVjdCBBbmltYXRpb25Kb2IgaW5zdGFuY2VzIGRpcmVjdGx5Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3RhcnRUaW1lID0gMDtcbiAgICB0aGlzLl9pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICB0aGlzLl9vbkNvbXBsZXRlID0gb25Db21wbGV0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGlzIEFuaW1hdGlvbkpvYiBpcyBjb21wbGV0ZS5cbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBpc0NvbXBsZXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9pc0NvbXBsZXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhpcyBBbmltYXRpb25Kb2IgYXMgc3RhcnRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBzdGFydFRpbWVcbiAgICovXG4gIHN0YXJ0KHN0YXJ0VGltZSkge1xuICAgIHRoaXMuX3N0YXJ0VGltZSA9IHN0YXJ0VGltZTtcbiAgICB0aGlzLl9pc0NvbXBsZXRlID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgYW5pbWF0aW9uIHByb2dyZXNzIG9mIHRoaXMgQW5pbWF0aW9uSm9iIHRvIG1hdGNoIHRoZSBnaXZlbiB0aW1lLlxuICAgKlxuICAgKiBUaGlzIGlzIGNhbGxlZCBmcm9tIHRoZSBvdmVyYWxsIGFuaW1hdGlvbiBsb29wLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGN1cnJlbnRUaW1lXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZGVsdGFUaW1lXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgdXBkYXRlKGN1cnJlbnRUaW1lLCBkZWx0YVRpbWUpIHtcbiAgICAvLyBFeHRlbmRpbmcgY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGlzIEFuaW1hdGlvbkpvYi5cbiAgICpcbiAgICogVGhpcyBpcyBjYWxsZWQgZnJvbSB0aGUgb3ZlcmFsbCBhbmltYXRpb24gbG9vcC5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBkcmF3KCkge1xuICAgIC8vIEV4dGVuZGluZyBjbGFzc2VzIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgYW55IG5lY2Vzc2FyeSBzdGF0ZSBmb3IgdGhpcyBBbmltYXRpb25Kb2IgYmVpbmcgZmluaXNoZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNDYW5jZWxsZWRcbiAgICovXG4gIGZpbmlzaChpc0NhbmNlbGxlZCkge1xuICAgIGNvbnNvbGUubG9nKGAke3RoaXMuY29uc3RydWN0b3IubmFtZX0gJHtpc0NhbmNlbGxlZCA/ICdjYW5jZWxsZWQnIDogJ2NvbXBsZXRlZCd9YCk7XG5cbiAgICB0aGlzLl9pc0NvbXBsZXRlID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9vbkNvbXBsZXRlKSB7XG4gICAgICB0aGlzLl9vbkNvbXBsZXRlKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7QW5pbWF0aW9uSm9ifTtcbiIsImltcG9ydCB7RnJhbWVMYXRlbmN5UHJvZmlsZXJ9IGZyb20gJy4vZnJhbWUtbGF0ZW5jeS1wcm9maWxlcic7XG5pbXBvcnQge1BlcnNpc3RlbnRBbmltYXRpb25Kb2J9IGZyb20gJy4vcGVyc2lzdGVudC1hbmltYXRpb24tam9iJztcbmltcG9ydCB7VHJhbnNpZW50QW5pbWF0aW9uSm9ifSBmcm9tICcuL3RyYW5zaWVudC1hbmltYXRpb24tam9iJztcblxuY29uc3QgX0RFTFRBX1RJTUVfVVBQRVJfVEhSRVNIT0xEID0gMjAwO1xuY29uc3QgX0ZSQU1FX0RVUkFUSU9OX1dBUk5JTkdfVEhSRVNIT0xEID0gMTAwMCAvIDMwO1xuY29uc3QgX0ZSQU1FX0xBVEVOQ1lfTE9HX1BFUklPRCA9IDUwMDA7XG5jb25zdCBfTEFURU5DWV9MT0dfTEFCRUwgPSAnQW5pbWF0aW9uIGZyYW1lIHBlcmlvZCc7XG5cbi8qKlxuICogVGhpcyBjbGFzcyBoYW5kbGVzIHRoZSBhbmltYXRpb24gbG9vcC5cbiAqXG4gKiBUaGlzIGNsYXNzJ3MgcmVzcG9uc2liaWxpdGllcyBpbmNsdWRlOlxuICogLSB1cGRhdGluZyBtb2R1bGVzIGZvciB0aGUgY3VycmVudCBmcmFtZSxcbiAqIC0gZHJhd2luZyByZW5kZXJhYmxlcyBmb3IgdGhlIGN1cnJlbnQgZnJhbWUsXG4gKiAtIHN0YXJ0aW5nIGFuZCBzdG9wcGluZyB0cmFuc2llbnQgYW5pbWF0aW9uIGpvYnMsXG4gKiAtIGNhcHBpbmcgdGltZSBzdGVwIGR1cmF0aW9ucyBhdCBhIG1heCB0aHJlc2hvbGQuXG4gKi9cbmNsYXNzIEFuaW1hdG9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fam9icyA9IFtdO1xuICAgIHRoaXMuX3ByZXZpb3VzVGltZSA9IG51bGw7XG4gICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xuICAgIHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkID0gbnVsbDtcbiAgICB0aGlzLl90b3RhbFVucGF1c2VkUnVuVGltZSA9IDA7XG4gICAgdGhpcy5fbGFzdFVucGF1c2VUaW1lID0gbnVsbDtcbiAgICB0aGlzLl9sYXRlbmN5UHJvZmlsZXIgPSBuZXcgRnJhbWVMYXRlbmN5UHJvZmlsZXIoX0ZSQU1FX0xBVEVOQ1lfTE9HX1BFUklPRCxcbiAgICAgICAgX0ZSQU1FX0RVUkFUSU9OX1dBUk5JTkdfVEhSRVNIT0xELCBfTEFURU5DWV9MT0dfTEFCRUwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgZ2l2ZW4gQW5pbWF0aW9uSm9iLlxuICAgKlxuICAgKiBAcGFyYW0ge0FuaW1hdGlvbkpvYn0gam9iXG4gICAqL1xuICBzdGFydEpvYihqb2IpIHtcbiAgICAvLyBJcyB0aGlzIGEgcmVzdGFydD9cbiAgICBpZiAoIWpvYi5pc0NvbXBsZXRlKSB7XG4gICAgICBjb25zb2xlLmRlYnVnKGBSZXN0YXJ0aW5nIEFuaW1hdGlvbkpvYjogJHtqb2IuY29uc3RydWN0b3IubmFtZX1gKTtcblxuICAgICAgaWYgKGpvYiBpbnN0YW5jZW9mIFBlcnNpc3RlbnRBbmltYXRpb25Kb2IpIHtcbiAgICAgICAgam9iLnJlc2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBqb2IuZmluaXNoKHRydWUpO1xuICAgICAgICBqb2Iuc3RhcnQod2luZG93LnBlcmZvcm1hbmNlLm5vdygpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5kZWJ1ZyhgU3RhcnRpbmcgQW5pbWF0aW9uSm9iOiAke2pvYi5jb25zdHJ1Y3Rvci5uYW1lfWApO1xuXG4gICAgICBqb2Iuc3RhcnQodGhpcy5fcHJldmlvdXNUaW1lKTtcbiAgICAgIHRoaXMuX2pvYnMucHVzaChqb2IpO1xuICAgIH1cblxuICAgIHRoaXMuX3N0YXJ0QW5pbWF0aW9uTG9vcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbmNlbHMgdGhlIGdpdmVuIEFuaW1hdGlvbkpvYi5cbiAgICpcbiAgICogQHBhcmFtIHtBbmltYXRpb25Kb2J9IGpvYlxuICAgKi9cbiAgY2FuY2VsSm9iKGpvYikge1xuICAgIGNvbnNvbGUuZGVidWcoYENhbmNlbGxpbmcgQW5pbWF0aW9uSm9iOiAke2pvYi5jb25zdHJ1Y3Rvci5uYW1lfWApO1xuICAgIGpvYi5maW5pc2godHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VscyBhbGwgcnVubmluZyBBbmltYXRpb25Kb2JzLlxuICAgKi9cbiAgY2FuY2VsQWxsKCkge1xuICAgIHdoaWxlICh0aGlzLl9qb2JzLmxlbmd0aCkge1xuICAgICAgdGhpcy5jYW5jZWxKb2IodGhpcy5fam9ic1swXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtET01IaWdoUmVzVGltZVN0YW1wfSAqL1xuICBnZXQgY3VycmVudFRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZXZpb3VzVGltZTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7Ym9vbGVhbn0gKi9cbiAgZ2V0IGlzUGF1c2VkKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1BhdXNlZDtcbiAgfVxuXG4gIHBhdXNlKCkge1xuICAgIHRoaXMuX3N0b3BBbmltYXRpb25Mb29wKCk7XG4gICAgY29uc29sZS5kZWJ1ZygnQW5pbWF0b3IgcGF1c2VkJyk7XG4gIH1cblxuICB1bnBhdXNlKCkge1xuICAgIHRoaXMuX3N0YXJ0QW5pbWF0aW9uTG9vcCgpO1xuICAgIGNvbnNvbGUuZGVidWcoJ0FuaW1hdG9yIHVucGF1c2VkJyk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYW5pbWF0aW9uIGxvb3AgdGhhdCBkcml2ZXMgYWxsIG9mIHRoZSBhbmltYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gY3VycmVudFRpbWVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hbmltYXRpb25Mb29wKGN1cnJlbnRUaW1lKSB7XG4gICAgLy8gV2hlbiBwYXVzaW5nIGFuZCByZXN0YXJ0aW5nLCBpdCdzIHBvc3NpYmxlIGZvciB0aGUgcHJldmlvdXMgdGltZSB0byBiZSBzbGlnaHRseSBpbmNvbnNpc3RlbnRcbiAgICAvLyB3aXRoIHRoZSBhbmltYXRpb25GcmFtZSB0aW1lLlxuICAgIGlmIChjdXJyZW50VGltZSA8IHRoaXMuX3ByZXZpb3VzVGltZSkge1xuICAgICAgdGhpcy5fcHJldmlvdXNUaW1lID0gY3VycmVudFRpbWUgLSAxO1xuICAgIH1cblxuICAgIGxldCBkZWx0YVRpbWUgPSBjdXJyZW50VGltZSAtIHRoaXMuX3ByZXZpb3VzVGltZTtcbiAgICB0aGlzLl9wcmV2aW91c1RpbWUgPSBjdXJyZW50VGltZTtcblxuICAgIHRoaXMuX2xhdGVuY3lQcm9maWxlci5yZWNvcmRGcmFtZUxhdGVuY3koZGVsdGFUaW1lKTtcblxuICAgIC8vIExhcmdlIGRlbGF5cyBiZXR3ZWVuIGZyYW1lcyBjYW4gY2F1c2UgbGVhZCB0byBpbnN0YWJpbGl0eSBpbiB0aGUgc3lzdGVtLCBzbyB0aGlzIGNhcHMgdGhlbSB0b1xuICAgIC8vIGEgbWF4IHRocmVzaG9sZC5cbiAgICBkZWx0YVRpbWUgPSBkZWx0YVRpbWUgPiBfREVMVEFfVElNRV9VUFBFUl9USFJFU0hPTEQgP1xuICAgICAgICBfREVMVEFfVElNRV9VUFBFUl9USFJFU0hPTEQgOiBkZWx0YVRpbWU7XG5cbiAgICBpZiAoIXRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICB0aGlzLl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCA9XG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjdXJyZW50VGltZSA9PiB0aGlzLl9hbmltYXRpb25Mb29wKGN1cnJlbnRUaW1lKSk7XG4gICAgICB0aGlzLl91cGRhdGVKb2JzKGN1cnJlbnRUaW1lLCBkZWx0YVRpbWUpO1xuICAgICAgdGhpcy5fZHJhd0pvYnMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyBhbGwgb2YgdGhlIGFjdGl2ZSBBbmltYXRpb25Kb2JzLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGN1cnJlbnRUaW1lXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZGVsdGFUaW1lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlSm9icyhjdXJyZW50VGltZSwgZGVsdGFUaW1lKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGNvdW50ID0gdGhpcy5fam9icy5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBsZXQgam9iID0gdGhpcy5fam9ic1tpXTtcblxuICAgICAgLy8gUmVtb3ZlIGpvYnMgZnJvbSB0aGUgbGlzdCBhZnRlciB0aGV5IGFyZSBjb21wbGV0ZS5cbiAgICAgIGlmIChqb2IuaXNDb21wbGV0ZSkge1xuICAgICAgICB0aGlzLl9yZW1vdmVKb2Ioam9iLCBpKTtcbiAgICAgICAgaS0tO1xuICAgICAgICBjb3VudC0tO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgam9iIGlzIHRyYW5zaWVudCBhbmQgaGFzIHJlYWNoZWQgaXRzIGVuZC5cbiAgICAgIGlmIChqb2IgaW5zdGFuY2VvZiBUcmFuc2llbnRBbmltYXRpb25Kb2IgJiYgam9iLmVuZFRpbWUgPCBjdXJyZW50VGltZSkge1xuICAgICAgICBqb2IuZmluaXNoKGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpvYi51cGRhdGUoY3VycmVudFRpbWUsIGRlbHRhVGltZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGdpdmVuIGpvYiBmcm9tIHRoZSBjb2xsZWN0aW9uIG9mIGFjdGl2ZSwgYW5pbWF0aW5nIGpvYnMuXG4gICAqXG4gICAqIEBwYXJhbSB7QW5pbWF0aW9uSm9ifSBqb2JcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtpbmRleD0tMV1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW1vdmVKb2Ioam9iLCBpbmRleCA9IC0xKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhgUmVtb3ZpbmcgQW5pbWF0aW9uSm9iOiAke2pvYi5jb25zdHJ1Y3Rvci5uYW1lfWApO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHRoaXMuX2pvYnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY291bnQgPSB0aGlzLl9qb2JzLmxlbmd0aDtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvdW50OyBpbmRleCsrKSB7XG4gICAgICAgIGlmICh0aGlzLl9qb2JzW2luZGV4XSA9PT0gam9iKSB7XG4gICAgICAgICAgdGhpcy5fam9icy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU3RvcCB0aGUgYW5pbWF0aW9uIGxvb3Agd2hlbiB0aGVyZSBhcmUgbm8gbW9yZSBqb2JzIHRvIGFuaW1hdGUuXG4gICAgaWYgKHRoaXMuX2pvYnMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLl9zdG9wQW5pbWF0aW9uTG9vcCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyBhbGwgb2YgdGhlIGFjdGl2ZSBBbmltYXRpb25Kb2JzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2RyYXdKb2JzKCkge1xuICAgIGZvciAobGV0IGkgPSAwLCBjb3VudCA9IHRoaXMuX2pvYnMubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgdGhpcy5fam9ic1tpXS5kcmF3KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGUgYW5pbWF0aW9uIGxvb3AgaWYgaXQgaXMgbm90IGFscmVhZHkgcnVubmluZy5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgaWRlbXBvdGVudC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zdGFydEFuaW1hdGlvbkxvb3AoKSB7XG4gICAgaWYgKHRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICB0aGlzLl9sYXN0VW5wYXVzZVRpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgfVxuICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG5cbiAgICAvLyBPbmx5IGFjdHVhbGx5IHN0YXJ0IHRoZSBsb29wIGlmIGl0IGlzbid0IGFscmVhZHkgcnVubmluZyBhbmQgdGhlIHBhZ2UgaGFzIGZvY3VzLlxuICAgIGlmICghdGhpcy5fcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgJiYgIWRvY3VtZW50LmhpZGRlbikge1xuICAgICAgdGhpcy5fbGF0ZW5jeVByb2ZpbGVyLnN0YXJ0KCk7XG4gICAgICB0aGlzLl9wcmV2aW91c1RpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICB0aGlzLl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCA9XG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aW1lID0+IHRoaXMuX2FuaW1hdGlvbkxvb3AodGltZSkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wcyB0aGUgYW5pbWF0aW9uIGxvb3AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3RvcEFuaW1hdGlvbkxvb3AoKSB7XG4gICAgaWYgKCF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgdGhpcy5fdG90YWxVbnBhdXNlZFJ1blRpbWUgKz0gdGhpcy5fdGltZVNpbmNlTGFzdFBhdXNlZDtcbiAgICB9XG4gICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCk7XG4gICAgdGhpcy5fcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgPSBudWxsO1xuICAgIHRoaXMuX2xhdGVuY3lQcm9maWxlci5zdG9wKCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgb24gdGhlIG5leHQgYW5pbWF0aW9uIGxvb3AuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgcmVzb2x2ZU9uTmV4dEZyYW1lKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB0b3RhbCBhbW91bnQgb2YgdGltZSB0aGUgYW5pbWF0b3IgaGFzIGJlZW4gcnVubmluZyB3aGlsZSBub3QgcGF1c2VkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7RE9NSGlnaFJlc1RpbWVTdGFtcH1cbiAgICovXG4gIGdldCB0b3RhbFJ1blRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzUGF1c2VkXG4gICAgICAgID8gdGhpcy5fdG90YWxVbnBhdXNlZFJ1blRpbWVcbiAgICAgICAgOiB0aGlzLl90b3RhbFVucGF1c2VkUnVuVGltZSArIHRoaXMuX3RpbWVTaW5jZUxhc3RQYXVzZWQ7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0RPTUhpZ2hSZXNUaW1lU3RhbXB9XG4gICAqL1xuICBnZXQgX3RpbWVTaW5jZUxhc3RQYXVzZWQoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMuX2xhc3RVbnBhdXNlVGltZTtcbiAgfVxufVxuXG5jb25zdCBhbmltYXRvciA9IG5ldyBBbmltYXRvcigpO1xuXG5leHBvcnQge2FuaW1hdG9yfTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7bnVtYmVyfSBET01IaWdoUmVzVGltZVN0YW1wIEEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgYWNjdXJhdGUgdG8gb25lIHRob3VzYW5kdGggb2YgYVxuICogbWlsbGlzZWNvbmQuXG4gKi9cblxuIiwiLyoqXG4gKiBUaGlzIGNsYXNzIGtlZXBzIHRyYWNrIG9mIGF2Zy9taW4vbWF4IGZyYW1lIGxhdGVuY2llcyBvdmVyIHRoZSBsYXN0IGxvZ2dpbmcgdGltZSBwZXJpb2QgYW5kXG4gKiBwZXJpb2RpY2FsbHkgbG9ncyB0aGVzZSB2YWx1ZXMuXG4gKi9cbmNsYXNzIEZyYW1lTGF0ZW5jeVByb2ZpbGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsb2dQZXJpb2QgVGhlIHBlcmlvZCBhdCB3aGljaCB0byBwcmludCBsYXRlbmN5IGxvZyBtZXNzYWdlcy4gSW4gbWlsbGlzZWNvbmRzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGF0ZW5jeVdhcm5pbmdUaHJlc2hvbGQgSWYgdGhlIGF2ZXJhZ2UgbGF0ZW5jeSBleGNlZWRzIHRoaXMgdGhyZXNob2xkLCB0aGVuIHRoZVxuICAgKiBsb2cgbWVzc2FnZSBpcyBzaG93biBhcyBhIHdhcm5pbmcuIEluIG1pbGxpc2Vjb25kcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvZ0xhYmVsIEEgbGFiZWwgdG8gc2hvdyBmb3IgZWFjaCBsYXRlbmN5IGxvZyBtZXNzYWdlLlxuICAgKi9cbiAgY29uc3RydWN0b3IobG9nUGVyaW9kLCBsYXRlbmN5V2FybmluZ1RocmVzaG9sZCwgbG9nTGFiZWwpIHtcbiAgICB0aGlzLl9sb2dQZXJpb2QgPSBsb2dQZXJpb2Q7XG4gICAgdGhpcy5fbGF0ZW5jeVdhcm5pbmdUaHJlc2hvbGQgPSBsYXRlbmN5V2FybmluZ1RocmVzaG9sZDtcbiAgICB0aGlzLl9sb2dMYWJlbCA9IGxvZ0xhYmVsO1xuXG4gICAgdGhpcy5fZnJhbWVDb3VudCA9IG51bGw7XG4gICAgdGhpcy5fbWF4RnJhbWVMYXRlbmN5ID0gbnVsbDtcbiAgICB0aGlzLl9taW5GcmFtZUxhdGVuY3kgPSBudWxsO1xuICAgIHRoaXMuX2F2Z0ZyYW1lTGF0ZW5jeSA9IG51bGw7XG5cbiAgICB0aGlzLl9pbnRlcnZhbElkID0gbnVsbDtcbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIHRoaXMuc3RvcCgpO1xuICAgIHRoaXMucmVzZXQoKTtcblxuICAgIHRoaXMuX2ludGVydmFsSWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICB0aGlzLmxvZ0ZyYW1lTGF0ZW5jeSgpO1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH0sIHRoaXMuX2xvZ1BlcmlvZCk7XG4gIH1cblxuICBzdG9wKCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWxJZCk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLl9mcmFtZUNvdW50ID0gMDtcbiAgICB0aGlzLl9tYXhGcmFtZUxhdGVuY3kgPSBOdW1iZXIuTUlOX1ZBTFVFO1xuICAgIHRoaXMuX21pbkZyYW1lTGF0ZW5jeSA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgdGhpcy5fYXZnRnJhbWVMYXRlbmN5ID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBLZWVwcyB0cmFjayBvZiBhIHJ1bm5pbmcgYXZlcmFnZSwgbWluIHZhbHVlLCBhbmQgbWF4IHZhbHVlIGZvciB0aGUgZnJhbWUgbGF0ZW5jaWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGZyYW1lTGF0ZW5jeVxuICAgKi9cbiAgcmVjb3JkRnJhbWVMYXRlbmN5KGZyYW1lTGF0ZW5jeSkge1xuICAgIHRoaXMuX2ZyYW1lQ291bnQrKztcbiAgICB0aGlzLl9tYXhGcmFtZUxhdGVuY3kgPVxuICAgICAgICB0aGlzLl9tYXhGcmFtZUxhdGVuY3kgPCBmcmFtZUxhdGVuY3kgPyBmcmFtZUxhdGVuY3kgOiB0aGlzLl9tYXhGcmFtZUxhdGVuY3k7XG4gICAgdGhpcy5fbWluRnJhbWVMYXRlbmN5ID1cbiAgICAgICAgdGhpcy5fbWluRnJhbWVMYXRlbmN5ID4gZnJhbWVMYXRlbmN5ID8gZnJhbWVMYXRlbmN5IDogdGhpcy5fbWluRnJhbWVMYXRlbmN5O1xuICAgIHRoaXMuX2F2Z0ZyYW1lTGF0ZW5jeSA9XG4gICAgICAgIHRoaXMuX2F2Z0ZyYW1lTGF0ZW5jeSArIChmcmFtZUxhdGVuY3kgLSB0aGlzLl9hdmdGcmFtZUxhdGVuY3kpIC8gdGhpcy5fZnJhbWVDb3VudDtcbiAgfVxuXG4gIGxvZ0ZyYW1lTGF0ZW5jeSgpIHtcbiAgICBpZiAodGhpcy5fZnJhbWVDb3VudCA+IDApIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHt0aGlzLl9sb2dMYWJlbH06ICBBVkc9JHt0aGlzLl9hdmdGcmFtZUxhdGVuY3kudG9GaXhlZCgzKX0gIGAgK1xuICAgICAgICAgIGAoTUFYPSR7dGhpcy5fbWF4RnJhbWVMYXRlbmN5LnRvRml4ZWQoMyl9OyBNSU49JHt0aGlzLl9taW5GcmFtZUxhdGVuY3kudG9GaXhlZCgzKX0pYDtcbiAgICAgIGlmICh0aGlzLl9tYXhGcmFtZUxhdGVuY3kgPj0gdGhpcy5fbGF0ZW5jeVdhcm5pbmdUaHJlc2hvbGQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHtGcmFtZUxhdGVuY3lQcm9maWxlcn07XG4iLCJleHBvcnQgKiBmcm9tICcuL2FuaW1hdGlvbi1qb2InO1xuZXhwb3J0ICogZnJvbSAnLi9hbmltYXRvcic7XG5leHBvcnQgKiBmcm9tICcuL2ZyYW1lLWxhdGVuY3ktcHJvZmlsZXInO1xuZXhwb3J0ICogZnJvbSAnLi9wZXJzaXN0ZW50LWFuaW1hdGlvbi1qb2InO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2llbnQtYW5pbWF0aW9uLWpvYic7XG4iLCJpbXBvcnQge0FuaW1hdGlvbkpvYn0gZnJvbSAnLi9hbmltYXRpb24tam9iJztcblxuLyoqXG4gKiBBIFBlcnNpc3RlbnRBbmltYXRpb25Kb2IgcmVjdXJzIG9yIGhhcyBhbiBpbmRlZmluaXRlIGR1cmF0aW9uLlxuICpcbiAqIEBhYnN0cmFjdFxuICovXG5jbGFzcyBQZXJzaXN0ZW50QW5pbWF0aW9uSm9iIGV4dGVuZHMgQW5pbWF0aW9uSm9iIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNvbXBsZXRlXSBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoaXMgQW5pbWF0aW9uSm9iIGlzIGZpbmlzaGVkLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob25Db21wbGV0ZSkge1xuICAgIHN1cGVyKG9uQ29tcGxldGUpO1xuXG4gICAgLy8gUGVyc2lzdGVudEFuaW1hdGlvbkpvYiBpcyBhbiBhYnN0cmFjdCBjbGFzcy4gSXQgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gICAgaWYgKG5ldy50YXJnZXQgPT09IFBlcnNpc3RlbnRBbmltYXRpb25Kb2IpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3QgUGVyc2lzdGVudEFuaW1hdGlvbkpvYiBpbnN0YW5jZXMgZGlyZWN0bHknKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICByZXNldCgpIHtcbiAgICAvLyBFeHRlbmRpbmcgY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxufVxuXG5leHBvcnQge1BlcnNpc3RlbnRBbmltYXRpb25Kb2J9O1xuIiwiaW1wb3J0IHtfdXRpbH0gZnJvbSAnLi91dGlsJztcblxuaW1wb3J0IHtBbmltYXRpb25Kb2J9IGZyb20gJy4vYW5pbWF0aW9uLWpvYic7XG5cbi8qKlxuICogQSBUcmFuc2llbnRBbmltYXRpb25Kb2IgaXMgdGVtcG9yYXJ5IGFuZCBoYXMgYSBkZWZpbml0ZSBiZWdpbm5pbmcgYW5kIGVuZC5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqL1xuY2xhc3MgVHJhbnNpZW50QW5pbWF0aW9uSm9iIGV4dGVuZHMgQW5pbWF0aW9uSm9iIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvblxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVsYXlcbiAgICogQHBhcmFtIHtGdW5jdGlvbnxTdHJpbmd9IGVhc2luZ0Z1bmN0aW9uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkNvbXBsZXRlXSBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoaXMgQW5pbWF0aW9uSm9iIGlzIGZpbmlzaGVkLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZHVyYXRpb24sIGRlbGF5LCBlYXNpbmdGdW5jdGlvbiwgb25Db21wbGV0ZSkge1xuICAgIHN1cGVyKG9uQ29tcGxldGUpO1xuXG4gICAgLy8gVHJhbnNpZW50QW5pbWF0aW9uSm9iIGlzIGFuIGFic3RyYWN0IGNsYXNzLiBJdCBzaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS5cbiAgICBpZiAobmV3LnRhcmdldCA9PT0gVHJhbnNpZW50QW5pbWF0aW9uSm9iKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29uc3RydWN0IFRyYW5zaWVudEFuaW1hdGlvbkpvYiBpbnN0YW5jZXMgZGlyZWN0bHknKTtcbiAgICB9XG5cbiAgICB0aGlzLl9kdXJhdGlvbiA9IGR1cmF0aW9uO1xuICAgIHRoaXMuX2RlbGF5ID0gZGVsYXk7XG4gICAgdGhpcy5fZWFzaW5nRnVuY3Rpb24gPSB0eXBlb2YgZWFzaW5nRnVuY3Rpb24gPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBlYXNpbmdGdW5jdGlvblxuICAgICAgICA6IF91dGlsLmVhc2luZ0Z1bmN0aW9uc1tlYXNpbmdGdW5jdGlvbl07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldCBlbmRUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGFydFRpbWUgKyB0aGlzLl9kdXJhdGlvbiArIHRoaXMuX2RlbGF5O1xuICB9XG59XG5cbmV4cG9ydCB7VHJhbnNpZW50QW5pbWF0aW9uSm9ifTtcbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyBhIGNvbGxlY3Rpb24gb2Ygc3RhdGljIHV0aWxpdHkgZnVuY3Rpb25zLlxuICovXG5cbi8vIEEgY29sbGVjdGlvbiBvZiBkaWZmZXJlbnQgdHlwZXMgb2YgZWFzaW5nIGZ1bmN0aW9ucy5cbmNvbnN0IGVhc2luZ0Z1bmN0aW9ucyA9IHtcbiAgbGluZWFyOiB0ID0+IHQsXG4gIGVhc2VJblF1YWQ6IHQgPT4gdCAqIHQsXG4gIGVhc2VPdXRRdWFkOiB0ID0+IHQgKiAoMiAtIHQpLFxuICBlYXNlSW5PdXRRdWFkOiB0ID0+IHQgPCAwLjUgPyAyICogdCAqIHQgOiAtMSArICg0IC0gMiAqIHQpICogdCxcbiAgZWFzZUluQ3ViaWM6IHQgPT4gdCAqIHQgKiB0LFxuICBlYXNlT3V0Q3ViaWM6IHQgPT4gMSArIC0tdCAqIHQgKiB0LFxuICBlYXNlSW5PdXRDdWJpYzogdCA9PiB0IDwgMC41ID8gNCAqIHQgKiB0ICogdCA6ICh0IC0gMSkgKiAoMiAqIHQgLSAyKSAqICgyICogdCAtIDIpICsgMSxcbiAgZWFzZUluUXVhcnQ6IHQgPT4gdCAqIHQgKiB0ICogdCxcbiAgZWFzZU91dFF1YXJ0OiB0ID0+IDEgLSAtLXQgKiB0ICogdCAqIHQsXG4gIGVhc2VJbk91dFF1YXJ0OiB0ID0+IHQgPCAwLjUgPyA4ICogdCAqIHQgKiB0ICogdCA6IDEgLSA4ICogLS10ICogdCAqIHQgKiB0LFxuICBlYXNlSW5RdWludDogdCA9PiB0ICogdCAqIHQgKiB0ICogdCxcbiAgZWFzZU91dFF1aW50OiB0ID0+IDEgKyAtLXQgKiB0ICogdCAqIHQgKiB0LFxuICBlYXNlSW5PdXRRdWludDogdCA9PiB0IDwgMC41ID8gMTYgKiB0ICogdCAqIHQgKiB0ICogdCA6IDEgKyAxNiAqIC0tdCAqIHQgKiB0ICogdCAqIHRcbn07XG5cbmNvbnN0IF91dGlsID0ge1xuICBlYXNpbmdGdW5jdGlvbnMsXG59O1xuXG5leHBvcnQge1xuICBfdXRpbCxcbn07XG4iLCJleHBvcnQgKiBmcm9tICcuL3NyYy9hYWJiLWNvbGxpZGFibGUnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvY2Fwc3VsZS1jb2xsaWRhYmxlJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2NvbGxpZGFibGUnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvbGluZS1zZWdtZW50JztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL29iYi1jb2xsaWRhYmxlJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL3NwaGVyZS1jb2xsaWRhYmxlJztcbiIsImltcG9ydCB7Q29sbGlkYWJsZX0gZnJvbSAnLi9jb2xsaWRhYmxlJztcbmltcG9ydCB7TGluZVNlZ21lbnR9IGZyb20gJy4vbGluZS1zZWdtZW50JztcbmltcG9ydCB7dG1wVmVjMSwgdG1wVmVjMn0gZnJvbSAnLi4vLi4vLi4vdXRpbCc7XG5cbi8qKlxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGFuIGF4aWFsbHktYWxpZ25lZCBib3VuZGluZyBib3ggKEFBQkIpLlxuICpcbiAqIFRoaXMgaXMgcHJpbWFyaWx5IHVzZWZ1bCBmb3IgY29sbGlzaW9uIGRldGVjdGlvbi4gQW4gQUFCQiBpcyBvbmx5IGFwcHJvcHJpYXRlIGZvciBzb21lXG4gKiBnZW9tZXRyaWVzLiBGb3Igb3RoZXIgZ2VvbWV0cmllcywgYW4gb3JpZW50ZWQgYm91bmRpbmcgYm94IChPQkIpIG9yIGEgYm91bmRpbmcgc3BoZXJlIG1heSBiZSBtb3JlXG4gKiBhcHByb3ByaWF0ZS5cbiAqL1xuY2xhc3MgQWFiYiBleHRlbmRzIENvbGxpZGFibGUge1xuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1pblhcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1pbllcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1pblpcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heFhcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heFlcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heFpcbiAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdGF0aW9uYXJ5PWZhbHNlXVxuICAgKiBAcGFyYW0ge0NvbGxpZGFibGVQaHlzaWNzSm9ifSBbcGh5c2ljc0pvYl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKG1pblgsIG1pblksIG1pblosIG1heFgsIG1heFksIG1heFosIGlzU3RhdGlvbmFyeSA9IGZhbHNlLCBwaHlzaWNzSm9iKSB7XG4gICAgc3VwZXIoaXNTdGF0aW9uYXJ5LCBwaHlzaWNzSm9iKTtcbiAgICB0aGlzLm1pblggPSBtaW5YO1xuICAgIHRoaXMubWluWSA9IG1pblk7XG4gICAgdGhpcy5taW5aID0gbWluWjtcbiAgICB0aGlzLm1heFggPSBtYXhYO1xuICAgIHRoaXMubWF4WSA9IG1heFk7XG4gICAgdGhpcy5tYXhaID0gbWF4WjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGJvdW5kaW5nIGJveCB3aXRoIHRoZSBkaW1lbnNpb25zIG9mIGFuIGF4aWFsbHktYWxpZ25lZCBjdWJlIGNlbnRlcmVkIGFyb3VuZCB0aGUgXG4gICAqIGdpdmVuIGNlbnRlciBhbmQgd2l0aCB0aGUgZ2l2ZW4gaGFsZi1zaWRlIGxlbmd0aC5cbiAgICpcbiAgICogQHBhcmFtIHt2ZWMzfSBjZW50ZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhhbGZTaWRlTGVuZ3RoXG4gICAqL1xuICBzdGF0aWMgY3JlYXRlQXNVbmlmb3JtQXJvdW5kQ2VudGVyKGNlbnRlciwgaGFsZlNpZGVMZW5ndGgpIHtcbiAgICBjb25zdCBib3VuZHMgPSBuZXcgQWFiYigwLCAwLCAwLCAwLCAwLCAwKTtcbiAgICBib3VuZHMuc2V0QXNVbmlmb3JtQXJvdW5kQ2VudGVyKGNlbnRlciwgaGFsZlNpZGVMZW5ndGgpO1xuICAgIHJldHVybiBib3VuZHM7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgZGltZW5zaW9ucyBvZiB0aGlzIGJvdW5kaW5nIGJveCB0byByZXByZXNlbnQgYW4gYXhpYWxseS1hbGlnbmVkIGN1YmUgY2VudGVyZWRcbiAgICogYXJvdW5kIHRoZSBnaXZlbiBjZW50ZXIgYW5kIHdpdGggdGhlIGdpdmVuIGhhbGYtc2lkZSBsZW5ndGguXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjM30gY2VudGVyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoYWxmU2lkZUxlbmd0aFxuICAgKi9cbiAgc2V0QXNVbmlmb3JtQXJvdW5kQ2VudGVyKGNlbnRlciwgaGFsZlNpZGVMZW5ndGgpIHtcbiAgICB0aGlzLm1pblggPSBjZW50ZXJbMF0gLSBoYWxmU2lkZUxlbmd0aDtcbiAgICB0aGlzLm1pblkgPSBjZW50ZXJbMV0gLSBoYWxmU2lkZUxlbmd0aDtcbiAgICB0aGlzLm1pblogPSBjZW50ZXJbMl0gLSBoYWxmU2lkZUxlbmd0aDtcbiAgICB0aGlzLm1heFggPSBjZW50ZXJbMF0gKyBoYWxmU2lkZUxlbmd0aDtcbiAgICB0aGlzLm1heFkgPSBjZW50ZXJbMV0gKyBoYWxmU2lkZUxlbmd0aDtcbiAgICB0aGlzLm1heFogPSBjZW50ZXJbMl0gKyBoYWxmU2lkZUxlbmd0aDtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7bnVtYmVyfSAqL1xuICBnZXQgcmFuZ2VYKCkge1xuICAgIHJldHVybiB0aGlzLm1heFggLSB0aGlzLm1pblg7XG4gIH1cbiAgLyoqIEByZXR1cm5zIHtudW1iZXJ9ICovXG4gIGdldCByYW5nZVkoKSB7XG4gICAgcmV0dXJuIHRoaXMubWF4WSAtIHRoaXMubWluWTtcbiAgfVxuICAvKiogQHJldHVybnMge251bWJlcn0gKi9cbiAgZ2V0IHJhbmdlWigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXhaIC0gdGhpcy5taW5aO1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHtudW1iZXJ9ICovXG4gIGdldCBjZW50ZXJYKCkge1xuICAgIHJldHVybiB0aGlzLm1pblggKyB0aGlzLnJhbmdlWCAvIDI7XG4gIH1cbiAgLyoqIEByZXR1cm5zIHtudW1iZXJ9ICovXG4gIGdldCBjZW50ZXJZKCkge1xuICAgIHJldHVybiB0aGlzLm1pblkgKyB0aGlzLnJhbmdlWSAvIDI7XG4gIH1cbiAgLyoqIEByZXR1cm5zIHtudW1iZXJ9ICovXG4gIGdldCBjZW50ZXJaKCkge1xuICAgIHJldHVybiB0aGlzLm1pblogKyB0aGlzLnJhbmdlWiAvIDI7XG4gIH1cblxuICAvKiogQHJldHVybnMge251bWJlcn0gKi9cbiAgZ2V0IHN1cmZhY2VBcmVhKCkge1xuICAgIGNvbnN0IHJhbmdlWCA9IHRoaXMucmFuZ2VYO1xuICAgIGNvbnN0IHJhbmdlWSA9IHRoaXMucmFuZ2VZO1xuICAgIGNvbnN0IHJhbmdlWiA9IHRoaXMucmFuZ2VaO1xuICAgIHJldHVybiAyICogKHJhbmdlWCAqIHJhbmdlWSArIHJhbmdlWCAqIHJhbmdlWiArIHJhbmdlWSAqIHJhbmdlWik7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3ZlYzN9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0IGNlbnRlck9mVm9sdW1lKCkge1xuICAgIC8vIFJldXNlIHRoZSBzYW1lIG9iamVjdCB3aGVuIHRoaXMgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzLlxuICAgIHRoaXMuX2NlbnRlck9mVm9sdW1lID0gdGhpcy5fY2VudGVyT2ZWb2x1bWUgfHwgdmVjMy5jcmVhdGUoKTtcbiAgICB2ZWMzLnNldCh0aGlzLl9jZW50ZXJPZlZvbHVtZSwgdGhpcy5jZW50ZXJYLCB0aGlzLmNlbnRlclksIHRoaXMuY2VudGVyWik7XG4gICAgcmV0dXJuIHRoaXMuX2NlbnRlck9mVm9sdW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtDb2xsaWRhYmxlfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldCBib3VuZGluZ1ZvbHVtZSgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3ZlYzN9IHZhbHVlXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2V0IHBvc2l0aW9uKHZhbHVlKSB7XG4gICAgY29uc3QgcmFuZ2VYID0gdGhpcy5yYW5nZVg7XG4gICAgY29uc3QgcmFuZ2VZID0gdGhpcy5yYW5nZVk7XG4gICAgY29uc3QgcmFuZ2VaID0gdGhpcy5yYW5nZVo7XG4gICAgdGhpcy5taW5YID0gdmFsdWVbMF0gLSByYW5nZVggLyAyO1xuICAgIHRoaXMubWluWSA9IHZhbHVlWzFdIC0gcmFuZ2VZIC8gMjtcbiAgICB0aGlzLm1pblogPSB2YWx1ZVsyXSAtIHJhbmdlWiAvIDI7XG4gICAgdGhpcy5tYXhYID0gdmFsdWVbMF0gKyByYW5nZVggLyAyO1xuICAgIHRoaXMubWF4WSA9IHZhbHVlWzFdICsgcmFuZ2VZIC8gMjtcbiAgICB0aGlzLm1heFogPSB2YWx1ZVsyXSArIHJhbmdlWiAvIDI7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtxdWF0fSB2YWx1ZVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHNldCBvcmllbnRhdGlvbih2YWx1ZSkge1xuICAgIC8vIERvIG5vdGhpbmcuXG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgdGhlIGdpdmVuIGNhbGxiYWNrIG9uY2UgZm9yIGVhY2ggdmVydGV4LlxuICAgKlxuICAgKiBTdG9wcyBhcyBzb29uIGFzIHRoZSBjYWxsYmFjayByZXR1cm5zIHRydWUgZm9yIGEgdmVydGV4LlxuICAgKlxuICAgKiBAcGFyYW0ge1ZlcnRleENhbGxiYWNrfSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge3ZlYzN9IFt2ZXJ0ZXhdIE91dHB1dCBwYXJhbS5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgb25lIG9mIHRoZSBjYWxsYmFja3MgcmV0dXJuZWQgdHJ1ZS5cbiAgICovXG4gIHNvbWVWZXJ0ZXgoY2FsbGJhY2ssIHZlcnRleCkge1xuICAgIHZlcnRleCA9IHZlcnRleCB8fCB0bXBWZWMxO1xuXG4gICAgdmVjMy5zZXQodmVydGV4LCB0aGlzLm1pblgsIHRoaXMubWluWSwgdGhpcy5taW5aKTtcbiAgICBpZiAoY2FsbGJhY2sodmVydGV4KSkgcmV0dXJuIHRydWU7XG5cbiAgICB2ZWMzLnNldCh2ZXJ0ZXgsIHRoaXMubWF4WCwgdGhpcy5taW5ZLCB0aGlzLm1pblopO1xuICAgIGlmIChjYWxsYmFjayh2ZXJ0ZXgpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHZlcnRleCwgdGhpcy5taW5YLCB0aGlzLm1heFksIHRoaXMubWluWik7XG4gICAgaWYgKGNhbGxiYWNrKHZlcnRleCkpIHJldHVybiB0cnVlO1xuXG4gICAgdmVjMy5zZXQodmVydGV4LCB0aGlzLm1heFgsIHRoaXMubWF4WSwgdGhpcy5taW5aKTtcbiAgICBpZiAoY2FsbGJhY2sodmVydGV4KSkgcmV0dXJuIHRydWU7XG5cbiAgICB2ZWMzLnNldCh2ZXJ0ZXgsIHRoaXMubWluWCwgdGhpcy5taW5ZLCB0aGlzLm1heFopO1xuICAgIGlmIChjYWxsYmFjayh2ZXJ0ZXgpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHZlcnRleCwgdGhpcy5tYXhYLCB0aGlzLm1pblksIHRoaXMubWF4Wik7XG4gICAgaWYgKGNhbGxiYWNrKHZlcnRleCkpIHJldHVybiB0cnVlO1xuXG4gICAgdmVjMy5zZXQodmVydGV4LCB0aGlzLm1pblgsIHRoaXMubWF4WSwgdGhpcy5tYXhaKTtcbiAgICBpZiAoY2FsbGJhY2sodmVydGV4KSkgcmV0dXJuIHRydWU7XG5cbiAgICB2ZWMzLnNldCh2ZXJ0ZXgsIHRoaXMubWF4WCwgdGhpcy5tYXhZLCB0aGlzLm1heFopO1xuICAgIGlmIChjYWxsYmFjayh2ZXJ0ZXgpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyB0aGUgZ2l2ZW4gY2FsbGJhY2sgb25jZSBmb3IgZWFjaCBlZGdlLlxuICAgKlxuICAgKiBAcGFyYW0ge0VkZ2VDYWxsYmFja30gY2FsbGJhY2tcbiAgICogQHBhcmFtIHtMaW5lU2VnbWVudH0gW2VkZ2VdIE91dHB1dCBwYXJhbS5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgb25lIG9mIHRoZSBjYWxsYmFja3MgcmV0dXJuZWQgdHJ1ZS5cbiAgICovXG4gIHNvbWVFZGdlKGNhbGxiYWNrLCBlZGdlKSB7XG4gICAgZWRnZSA9IGVkZ2UgfHwgX3NlZ21lbnQ7XG5cbiAgICAvL1xuICAgIC8vIEVkZ2VzIGFsb25nIGZyb250IGZhY2UuXG4gICAgLy9cblxuICAgIHZlYzMuc2V0KHRtcFZlYzEsIHRoaXMubWluWCwgdGhpcy5taW5ZLCB0aGlzLm1pblopO1xuICAgIHZlYzMuc2V0KHRtcFZlYzIsIHRoaXMubWF4WCwgdGhpcy5taW5ZLCB0aGlzLm1pblopO1xuICAgIGVkZ2UucmVzZXQodG1wVmVjMSwgdG1wVmVjMik7XG4gICAgaWYgKGNhbGxiYWNrKGVkZ2UpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHRtcFZlYzEsIHRoaXMubWluWCwgdGhpcy5tYXhZLCB0aGlzLm1pblopO1xuICAgIHZlYzMuc2V0KHRtcFZlYzIsIHRoaXMubWF4WCwgdGhpcy5tYXhZLCB0aGlzLm1pblopO1xuICAgIGVkZ2UucmVzZXQodG1wVmVjMSwgdG1wVmVjMik7XG4gICAgaWYgKGNhbGxiYWNrKGVkZ2UpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHRtcFZlYzEsIHRoaXMubWluWCwgdGhpcy5taW5ZLCB0aGlzLm1pblopO1xuICAgIHZlYzMuc2V0KHRtcFZlYzIsIHRoaXMubWluWCwgdGhpcy5tYXhZLCB0aGlzLm1pblopO1xuICAgIGVkZ2UucmVzZXQodG1wVmVjMSwgdG1wVmVjMik7XG4gICAgaWYgKGNhbGxiYWNrKGVkZ2UpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHRtcFZlYzEsIHRoaXMubWF4WCwgdGhpcy5taW5ZLCB0aGlzLm1pblopO1xuICAgIHZlYzMuc2V0KHRtcFZlYzIsIHRoaXMubWF4WCwgdGhpcy5tYXhZLCB0aGlzLm1pblopO1xuICAgIGVkZ2UucmVzZXQodG1wVmVjMSwgdG1wVmVjMik7XG4gICAgaWYgKGNhbGxiYWNrKGVkZ2UpKSByZXR1cm4gdHJ1ZTtcblxuICAgIC8vXG4gICAgLy8gRWRnZXMgYWxvbmcgYmFjayBmYWNlLlxuICAgIC8vXG5cbiAgICB2ZWMzLnNldCh0bXBWZWMxLCB0aGlzLm1pblgsIHRoaXMubWluWSwgdGhpcy5tYXhaKTtcbiAgICB2ZWMzLnNldCh0bXBWZWMyLCB0aGlzLm1heFgsIHRoaXMubWluWSwgdGhpcy5tYXhaKTtcbiAgICBlZGdlLnJlc2V0KHRtcFZlYzEsIHRtcFZlYzIpO1xuICAgIGlmIChjYWxsYmFjayhlZGdlKSkgcmV0dXJuIHRydWU7XG5cbiAgICB2ZWMzLnNldCh0bXBWZWMxLCB0aGlzLm1pblgsIHRoaXMubWF4WSwgdGhpcy5tYXhaKTtcbiAgICB2ZWMzLnNldCh0bXBWZWMyLCB0aGlzLm1heFgsIHRoaXMubWF4WSwgdGhpcy5tYXhaKTtcbiAgICBlZGdlLnJlc2V0KHRtcFZlYzEsIHRtcFZlYzIpO1xuICAgIGlmIChjYWxsYmFjayhlZGdlKSkgcmV0dXJuIHRydWU7XG5cbiAgICB2ZWMzLnNldCh0bXBWZWMxLCB0aGlzLm1pblgsIHRoaXMubWluWSwgdGhpcy5tYXhaKTtcbiAgICB2ZWMzLnNldCh0bXBWZWMyLCB0aGlzLm1pblgsIHRoaXMubWF4WSwgdGhpcy5tYXhaKTtcbiAgICBlZGdlLnJlc2V0KHRtcFZlYzEsIHRtcFZlYzIpO1xuICAgIGlmIChjYWxsYmFjayhlZGdlKSkgcmV0dXJuIHRydWU7XG5cbiAgICB2ZWMzLnNldCh0bXBWZWMxLCB0aGlzLm1heFgsIHRoaXMubWluWSwgdGhpcy5tYXhaKTtcbiAgICB2ZWMzLnNldCh0bXBWZWMyLCB0aGlzLm1heFgsIHRoaXMubWF4WSwgdGhpcy5tYXhaKTtcbiAgICBlZGdlLnJlc2V0KHRtcFZlYzEsIHRtcFZlYzIpO1xuICAgIGlmIChjYWxsYmFjayhlZGdlKSkgcmV0dXJuIHRydWU7XG5cbiAgICAvL1xuICAgIC8vIEVkZ2VzIGJldHdlZW4gZnJvbnQgYW5kIGJhY2sgZmFjZXMuXG4gICAgLy9cblxuICAgIHZlYzMuc2V0KHRtcFZlYzEsIHRoaXMubWluWCwgdGhpcy5taW5ZLCB0aGlzLm1pblopO1xuICAgIHZlYzMuc2V0KHRtcFZlYzIsIHRoaXMubWluWCwgdGhpcy5taW5ZLCB0aGlzLm1heFopO1xuICAgIGVkZ2UucmVzZXQodG1wVmVjMSwgdG1wVmVjMik7XG4gICAgaWYgKGNhbGxiYWNrKGVkZ2UpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHRtcFZlYzEsIHRoaXMubWF4WCwgdGhpcy5taW5ZLCB0aGlzLm1pblopO1xuICAgIHZlYzMuc2V0KHRtcFZlYzIsIHRoaXMubWF4WCwgdGhpcy5taW5ZLCB0aGlzLm1heFopO1xuICAgIGVkZ2UucmVzZXQodG1wVmVjMSwgdG1wVmVjMik7XG4gICAgaWYgKGNhbGxiYWNrKGVkZ2UpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHRtcFZlYzEsIHRoaXMubWluWCwgdGhpcy5tYXhZLCB0aGlzLm1pblopO1xuICAgIHZlYzMuc2V0KHRtcFZlYzIsIHRoaXMubWluWCwgdGhpcy5tYXhZLCB0aGlzLm1heFopO1xuICAgIGVkZ2UucmVzZXQodG1wVmVjMSwgdG1wVmVjMik7XG4gICAgaWYgKGNhbGxiYWNrKGVkZ2UpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHZlYzMuc2V0KHRtcFZlYzEsIHRoaXMubWF4WCwgdGhpcy5tYXhZLCB0aGlzLm1pblopO1xuICAgIHZlYzMuc2V0KHRtcFZlYzIsIHRoaXMubWF4WCwgdGhpcy5tYXhZLCB0aGlzLm1heFopO1xuICAgIGVkZ2UucmVzZXQodG1wVmVjMSwgdG1wVmVjMik7XG4gICAgaWYgKGNhbGxiYWNrKGVkZ2UpKSByZXR1cm4gdHJ1ZTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5jb25zdCBfc2VnbWVudCA9IG5ldyBMaW5lU2VnbWVudCh2ZWMzLmNyZWF0ZSgpLCB2ZWMzLmNyZWF0ZSgpKTtcblxuZXhwb3J0IHtBYWJifTtcbiIsImltcG9ydCB7Q29sbGlkYWJsZX0gZnJvbSAnLi9jb2xsaWRhYmxlJztcbmltcG9ydCB7TGluZVNlZ21lbnR9IGZyb20gJy4vbGluZS1zZWdtZW50JztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBjYXBzdWxlLlxuICpcbiAqIC0gQSBjYXBzdWxlIGlzIGEgY3lsaW5kZXIgd2l0aCBzZW1pLXNwaGVyZXMgb24gZWl0aGVyIGVuZC5cbiAqIC0gQSBjYXBzdWxlIGNhbiByZXByZXNlbnQgYSByb3VnaCBhcHByb3hpbWF0aW9uIG9mIG1hbnkgdXNlZnVsIHNoYXBlcy5cbiAqIC0gQSBjYXBzdWxlIGNhbiBiZSB1c2VkIGZvciByZWxhdGl2ZWx5IGVmZmljaWVudCBjb2xsaXNpb24gZGV0ZWN0aW9uLlxuICovXG5jbGFzcyBDYXBzdWxlIGV4dGVuZHMgQ29sbGlkYWJsZSB7XG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBvcmllbnRhdGlvbiBvZiB0aGUgY2Fwc3VsZSBpcyBhbG9uZyB0aGUgei1heGlzLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaGFsZkRpc3RhbmNlIEhhbGYgdGhlIGRpc3RhbmNlIGZyb20gdGhlIGNlbnRlcnMgb2YgdGhlIGNhcHN1bGUgZW5kIHNwaGVyZXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdGF0aW9uYXJ5PWZhbHNlXVxuICAgKiBAcGFyYW0ge0NvbGxpZGFibGVQaHlzaWNzSm9ifSBbcGh5c2ljc0pvYl1cbiAgICovXG4gIGNvbnN0cnVjdG9yKGhhbGZEaXN0YW5jZSwgcmFkaXVzLCBpc1N0YXRpb25hcnkgPSBmYWxzZSwgcGh5c2ljc0pvYikge1xuICAgIHN1cGVyKGlzU3RhdGlvbmFyeSwgcGh5c2ljc0pvYik7XG4gICAgdGhpcy5oYWxmRGlzdGFuY2UgPSBoYWxmRGlzdGFuY2U7XG4gICAgdGhpcy5zZWdtZW50ID0gbmV3IExpbmVTZWdtZW50KHZlYzMuZnJvbVZhbHVlcygwLCAwLCAtaGFsZkRpc3RhbmNlKSxcbiAgICAgICAgdmVjMy5mcm9tVmFsdWVzKDAsIDAsIGhhbGZEaXN0YW5jZSkpO1xuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHt2ZWMzfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldCBjZW50ZXJPZlZvbHVtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zZWdtZW50LmNlbnRlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Q29sbGlkYWJsZX1cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXQgYm91bmRpbmdWb2x1bWUoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHt2ZWMzfSB2YWx1ZVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHNldCBwb3NpdGlvbih2YWx1ZSkge1xuICAgIHRoaXMuc2VnbWVudC5jZW50ZXIgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3F1YXR9IHZhbHVlXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2V0IG9yaWVudGF0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5zZWdtZW50Lm9yaWVudGF0aW9uID0gdmFsdWU7XG4gIH1cbn1cblxuZXhwb3J0IHtDYXBzdWxlfTtcbiIsIi8qKlxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgM0QgY29sbGlkYWJsZSByaWdpZCBvYmplY3QuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbGxpc2lvbiBkZXRlY3Rpb24gYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBhYnN0cmFjdFxuICovXG5jbGFzcyBDb2xsaWRhYmxlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNTdGF0aW9uYXJ5XG4gICAqIEBwYXJhbSB7Q29sbGlkYWJsZVBoeXNpY3NKb2J9IFtwaHlzaWNzSm9iXVxuICAgKi9cbiAgY29uc3RydWN0b3IoaXNTdGF0aW9uYXJ5LCBwaHlzaWNzSm9iKSB7XG4gICAgLy8gQ29sbGlkYWJsZSBpcyBhbiBhYnN0cmFjdCBjbGFzcy4gSXQgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gICAgaWYgKG5ldy50YXJnZXQgPT09IENvbGxpZGFibGUpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3QgQ29sbGlkYWJsZSBpbnN0YW5jZXMgZGlyZWN0bHknKTtcbiAgICB9XG5cbiAgICB0aGlzLmlzU3RhdGlvbmFyeSA9IGlzU3RhdGlvbmFyeTtcbiAgICB0aGlzLnBoeXNpY3NKb2IgPSBwaHlzaWNzSm9iO1xuICAgIHRoaXMuY29sbGlzaW9ucyA9IFtdO1xuICAgIHRoaXMucHJldmlvdXNDb2xsaXNpb25zID0gW107XG4gIH1cblxuICAvKipcbiAgICogSW1wbGVtZW50aW5nIGNsYXNzZXMgY2FuIG92ZXJyaWRlIHRoaXMgdG8gcHJvdmlkZSBhIGNlbnRlciBvZiBtYXNzIHRoYXQgaXMgZGlmZmVyZW50IHRoYW4gdGhlXG4gICAqIGNlbnRlciBvZiB2b2x1bWUuXG4gICAqXG4gICAqIEByZXR1cm5zIHt2ZWMzfVxuICAgKi9cbiAgZ2V0IGNlbnRlck9mTWFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5jZW50ZXJPZlZvbHVtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7dmVjM31cbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBnZXQgY2VudGVyT2ZWb2x1bWUoKSB7XG4gICAgLy8gRXh0ZW5kaW5nIGNsYXNzZXMgc2hvdWxkIGltcGxlbWVudCB0aGlzIG1ldGhvZC5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0NvbGxpZGFibGV9XG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgZ2V0IGJvdW5kaW5nVm9sdW1lKCkge1xuICAgIC8vIEV4dGVuZGluZyBjbGFzc2VzIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7dmVjM30gdmFsdWVcbiAgICogQGFic3RyYWN0XG4gICAqL1xuICBzZXQgcG9zaXRpb24odmFsdWUpIHtcbiAgICAvLyBFeHRlbmRpbmcgY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3F1YXR9IHZhbHVlXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgc2V0IG9yaWVudGF0aW9uKHZhbHVlKSB7XG4gICAgLy8gRXh0ZW5kaW5nIGNsYXNzZXMgc2hvdWxkIGltcGxlbWVudCB0aGlzIG1ldGhvZC5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkJyk7XG4gIH1cbn1cblxuZXhwb3J0IHtDb2xsaWRhYmxlfTtcbiIsImltcG9ydCB7dG1wVmVjMSwgdG1wVmVjMn0gZnJvbSAnLi4vLi4vLi4vdXRpbCc7XG5cbi8qKlxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgbGluZSBzZWdtZW50LlxuICovXG5jbGFzcyBMaW5lU2VnbWVudCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3ZlYzN9IHN0YXJ0XG4gICAqIEBwYXJhbSB7dmVjM30gZW5kXG4gICAqL1xuICBjb25zdHJ1Y3RvcihzdGFydCwgZW5kKSB7XG4gICAgdGhpcy5zdGFydCA9IHZlYzMuY3JlYXRlKCk7XG4gICAgdGhpcy5lbmQgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIHRoaXMuX2NlbnRlciA9IHZlYzMuY3JlYXRlKCk7XG4gICAgdGhpcy5fb3JpZ2luYWxPcmllbnRhdGlvblN0YXJ0ID0gdmVjMy5jcmVhdGUoKTtcbiAgICB0aGlzLl9vcmlnaW5hbE9yaWVudGF0aW9uRW5kID0gdmVjMy5jcmVhdGUoKTtcbiAgICB0aGlzLnJlc2V0KHN0YXJ0LCBlbmQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7dmVjM30gc3RhcnRcbiAgICogQHBhcmFtIHt2ZWMzfSBlbmRcbiAgICovXG4gIHJlc2V0KHN0YXJ0LCBlbmQpIHtcbiAgICB2ZWMzLmNvcHkodGhpcy5zdGFydCwgc3RhcnQpO1xuICAgIHZlYzMuY29weSh0aGlzLmVuZCwgZW5kKTtcbiAgICB2ZWMzLnN1YnRyYWN0KHRoaXMuX29yaWdpbmFsT3JpZW50YXRpb25TdGFydCwgdGhpcy5zdGFydCwgdGhpcy5jZW50ZXIpO1xuICAgIHZlYzMuc3VidHJhY3QodGhpcy5fb3JpZ2luYWxPcmllbnRhdGlvbkVuZCwgdGhpcy5lbmQsIHRoaXMuY2VudGVyKTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7TGluZVNlZ21lbnR9ICovXG4gIGNsb25lKCkge1xuICAgIGNvbnN0IHNlZ21lbnQgPSBuZXcgTGluZVNlZ21lbnQodGhpcy5zdGFydCwgdGhpcy5lbmQpO1xuICAgIHNlZ21lbnQuX29yaWdpbmFsT3JpZW50YXRpb25TdGFydCA9IHRoaXMuX29yaWdpbmFsT3JpZW50YXRpb25TdGFydDtcbiAgICBzZWdtZW50Ll9vcmlnaW5hbE9yaWVudGF0aW9uRW5kID0gdGhpcy5fb3JpZ2luYWxPcmllbnRhdGlvbkVuZDtcbiAgICByZXR1cm4gc2VnbWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgVU4tTk9STUFMSVpFRCBkaXJlY3Rpb24gb2YgdGhpcyBzZWdtZW50LlxuICAgKlxuICAgKiBAcmV0dXJucyB7dmVjM31cbiAgICovXG4gIGdldCBkaXIoKSB7XG4gICAgLy8gUmV1c2UgdGhlIHNhbWUgb2JqZWN0IHdoZW4gdGhpcyBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMuXG4gICAgdGhpcy5fZGlyID0gdGhpcy5fZGlyIHx8IHZlYzMuY3JlYXRlKCk7XG4gICAgcmV0dXJuIHZlYzMuc3VidHJhY3QodGhpcy5fZGlyLCB0aGlzLmVuZCwgdGhpcy5zdGFydCk7XG4gIH1cblxuICAvKiogQHJldHVybnMge3ZlYzN9ICovXG4gIGdldCBjZW50ZXIoKSB7XG4gICAgdmVjMy5sZXJwKHRoaXMuX2NlbnRlciwgdGhpcy5zdGFydCwgdGhpcy5lbmQsIDAuNSk7XG4gICAgcmV0dXJuIHRoaXMuX2NlbnRlcjtcbiAgfVxuXG4gIC8qKiBAcGFyYW0ge3ZlYzN9IHZhbHVlICovXG4gIHNldCBjZW50ZXIodmFsdWUpIHtcbiAgICAvLyBSZXVzZSB0aGUgc2FtZSBvYmplY3Qgd2hlbiB0aGlzIGlzIGNhbGxlZCBtdWx0aXBsZSB0aW1lcy5cbiAgICB0aGlzLl9kaXNwbGFjZW1lbnQgPSB0aGlzLl9kaXNwbGFjZW1lbnQgfHwgdmVjMy5jcmVhdGUoKTtcbiAgICB2ZWMzLnN1YnRyYWN0KHRoaXMuX2Rpc3BsYWNlbWVudCwgdmFsdWUsIHRoaXMuY2VudGVyKTtcblxuICAgIHZlYzMuYWRkKHRoaXMuc3RhcnQsIHRoaXMuc3RhcnQsIHRoaXMuX2Rpc3BsYWNlbWVudCk7XG4gICAgdmVjMy5hZGQodGhpcy5lbmQsIHRoaXMuZW5kLCB0aGlzLl9kaXNwbGFjZW1lbnQpO1xuICB9XG5cbiAgLyoqIEBwYXJhbSB7cXVhdH0gdmFsdWUgKi9cbiAgc2V0IG9yaWVudGF0aW9uKHZhbHVlKSB7XG4gICAgdmVjMy50cmFuc2Zvcm1RdWF0KHRtcFZlYzEsIHRoaXMuX29yaWdpbmFsT3JpZW50YXRpb25TdGFydCwgdmFsdWUpO1xuICAgIHZlYzMudHJhbnNmb3JtUXVhdCh0bXBWZWMyLCB0aGlzLl9vcmlnaW5hbE9yaWVudGF0aW9uRW5kLCB2YWx1ZSk7XG5cbiAgICAvLyBXZSBkb24ndCB3YW50IHRoaXMgdG8gYmUgcmUtY2FsY3VsYXRlZCBiZXR3ZWVuIHN0YXJ0L2VuZCB1cGRhdGVzLlxuICAgIGNvbnN0IGNlbnRlciA9IHRoaXMuY2VudGVyO1xuXG4gICAgdmVjMy5hZGQodGhpcy5zdGFydCwgY2VudGVyLCB0bXBWZWMxKTtcbiAgICB2ZWMzLmFkZCh0aGlzLmVuZCwgY2VudGVyLCB0bXBWZWMyKTtcbiAgfVxufVxuXG5leHBvcnQge0xpbmVTZWdtZW50fTtcbiIsImltcG9ydCB7Q29sbGlkYWJsZX0gZnJvbSAnLi9jb2xsaWRhYmxlJztcbmltcG9ydCB7U3BoZXJlfSBmcm9tICcuL3NwaGVyZS1jb2xsaWRhYmxlJztcbmltcG9ydCB7TGluZVNlZ21lbnR9IGZyb20gJy4vbGluZS1zZWdtZW50JztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYW4gb3JpZW50ZWQgYm91bmRpbmcgYm94IChPQkIpLlxuICpcbiAqIFRoaXMgaXMgdXNlZnVsIGJvdGggZm9yIGNvbGxpc2lvbiBkZXRlY3Rpb24gYW5kIGZvciByZXByZXNlbnRpbmcgYW55IHJvdGF0ZWQgcmVjdGFuZ3VsYXIgY3Vib2lkLlxuICogQW4gT0JCIGlzIG9ubHkgYXBwcm9wcmlhdGUgZm9yIHNvbWUgZ2VvbWV0cmllcy4gRm9yIG90aGVyIGdlb21ldHJpZXMsIGFuIGF4aWFsbHktYWxpZ25lZCBib3VuZGluZ1xuICogYm94IChBQUJCKSBvciBhIGJvdW5kaW5nIHNwaGVyZSBtYXkgYmUgbW9yZSBhcHByb3ByaWF0ZS5cbiAqL1xuY2xhc3MgT2JiIGV4dGVuZHMgQ29sbGlkYWJsZSB7XG4gIC8qKlxuICAgKiBEZWZhdWx0cyB0byBiZWluZyBjZW50ZXJlZCBhdCB0aGUgb3JpZ2luIHdpdGggaXRzIGxvY2FsIGF4ZXMgYWxpZ25lZCB3aXRoIHRoZSB3b3JsZCBheGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaGFsZlNpZGVMZW5ndGhYXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBoYWxmU2lkZUxlbmd0aFlcbiAgICogQHBhcmFtIHtudW1iZXJ9IGhhbGZTaWRlTGVuZ3RoWlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0YXRpb25hcnk9ZmFsc2VdXG4gICAqIEBwYXJhbSB7Q29sbGlkYWJsZVBoeXNpY3NKb2J9IFtwaHlzaWNzSm9iXVxuICAgKi9cbiAgY29uc3RydWN0b3IoaGFsZlNpZGVMZW5ndGhYLCBoYWxmU2lkZUxlbmd0aFksIGhhbGZTaWRlTGVuZ3RoWiwgaXNTdGF0aW9uYXJ5ID0gZmFsc2UsIHBoeXNpY3NKb2IpIHtcbiAgICBzdXBlcihpc1N0YXRpb25hcnksIHBoeXNpY3NKb2IpO1xuICAgIHRoaXMuZXh0ZW50cyA9IFtcbiAgICAgIHZlYzMuZnJvbVZhbHVlcyhoYWxmU2lkZUxlbmd0aFgsIDAsIDApLFxuICAgICAgdmVjMy5mcm9tVmFsdWVzKDAsIGhhbGZTaWRlTGVuZ3RoWSwgMCksXG4gICAgICB2ZWMzLmZyb21WYWx1ZXMoMCwgMCwgaGFsZlNpZGVMZW5ndGhaKVxuICAgIF07XG4gICAgdGhpcy5heGVzID0gW1xuICAgICAgdmVjMy5mcm9tVmFsdWVzKDEsIDAsIDApLFxuICAgICAgdmVjMy5mcm9tVmFsdWVzKDAsIDEsIDApLFxuICAgICAgdmVjMy5mcm9tVmFsdWVzKDAsIDAsIDEpXG4gICAgXTtcbiAgICB0aGlzLmhhbGZTaWRlTGVuZ3RocyA9IFtcbiAgICAgIGhhbGZTaWRlTGVuZ3RoWCxcbiAgICAgIGhhbGZTaWRlTGVuZ3RoWSxcbiAgICAgIGhhbGZTaWRlTGVuZ3RoWlxuICAgIF07XG4gICAgdGhpcy5fY2VudGVyID0gdmVjMy5jcmVhdGUoKTtcbiAgICB0aGlzLl9vcmllbnRhdGlvbiA9IHF1YXQuY3JlYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge3ZlYzN9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0IGNlbnRlck9mVm9sdW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9jZW50ZXI7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0NvbGxpZGFibGV9XG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0IGJvdW5kaW5nVm9sdW1lKCkge1xuICAgIC8vIFJldXNlIHRoZSBzYW1lIHZhbHVlIHdoZW4gdGhpcyBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMuXG4gICAgaWYgKCF0aGlzLl9ib3VuZGluZ1NwaGVyZSkge1xuICAgICAgY29uc3QgcmFkaXVzID0gTWF0aC5zcXJ0KHRoaXMuaGFsZlNpZGVMZW5ndGhYICogdGhpcy5oYWxmU2lkZUxlbmd0aFggK1xuICAgICAgICAgIHRoaXMuaGFsZlNpZGVMZW5ndGhZICogdGhpcy5oYWxmU2lkZUxlbmd0aFkgK1xuICAgICAgICAgIHRoaXMuaGFsZlNpZGVMZW5ndGhaICogdGhpcy5oYWxmU2lkZUxlbmd0aFopO1xuICAgICAgdGhpcy5fYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKDAsIDAsIDAsIHJhZGl1cywgdGhpcy5pc1N0YXRpb25hcnkpO1xuICAgIH1cbiAgICB0aGlzLl9ib3VuZGluZ1NwaGVyZS5wb3NpdGlvbiA9IHRoaXMuX2NlbnRlcjtcbiAgICByZXR1cm4gdGhpcy5fYm91bmRpbmdTcGhlcmU7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHt2ZWMzfSB2YWx1ZVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHNldCBwb3NpdGlvbih2YWx1ZSkge1xuICAgIHZlYzMuY29weSh0aGlzLl9jZW50ZXIsIHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3F1YXR9IHZhbHVlXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2V0IG9yaWVudGF0aW9uKHZhbHVlKSB7XG4gICAgcXVhdC5jb3B5KHRoaXMuX29yaWVudGF0aW9uLCB2YWx1ZSk7XG4gICAgdGhpcy5fdXBkYXRlRXh0ZW50cygpO1xuICB9XG4gIC8qKiBAcmV0dXJucyB7cXVhdH0gKi9cbiAgZ2V0IG9yaWVudGF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9vcmllbnRhdGlvbjtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7bnVtYmVyfSAqL1xuICBnZXQgaGFsZlNpZGVMZW5ndGhYKCkge1xuICAgIHJldHVybiB0aGlzLmhhbGZTaWRlTGVuZ3Roc1swXTtcbiAgfVxuICAvKiogQHBhcmFtIHtudW1iZXJ9IHZhbHVlICovXG4gIHNldCBoYWxmU2lkZUxlbmd0aFgodmFsdWUpIHtcbiAgICB0aGlzLmhhbGZTaWRlTGVuZ3Roc1swXSA9IHZhbHVlO1xuICAgIHRoaXMuX3VwZGF0ZUV4dGVudHMoKTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7bnVtYmVyfSAqL1xuICBnZXQgaGFsZlNpZGVMZW5ndGhZKCkge1xuICAgIHJldHVybiB0aGlzLmhhbGZTaWRlTGVuZ3Roc1sxXTtcbiAgfVxuICAvKiogQHBhcmFtIHtudW1iZXJ9IHZhbHVlICovXG4gIHNldCBoYWxmU2lkZUxlbmd0aFkodmFsdWUpIHtcbiAgICB0aGlzLmhhbGZTaWRlTGVuZ3Roc1sxXSA9IHZhbHVlO1xuICAgIHRoaXMuX3VwZGF0ZUV4dGVudHMoKTtcbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7bnVtYmVyfSAqL1xuICBnZXQgaGFsZlNpZGVMZW5ndGhaKCkge1xuICAgIHJldHVybiB0aGlzLmhhbGZTaWRlTGVuZ3Roc1syXTtcbiAgfVxuICAvKiogQHBhcmFtIHtudW1iZXJ9IHZhbHVlICovXG4gIHNldCBoYWxmU2lkZUxlbmd0aFoodmFsdWUpIHtcbiAgICB0aGlzLmhhbGZTaWRlTGVuZ3Roc1syXSA9IHZhbHVlO1xuICAgIHRoaXMuX3VwZGF0ZUV4dGVudHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyB0aGUgZ2l2ZW4gY2FsbGJhY2sgb25jZSBmb3IgZWFjaCB2ZXJ0ZXguXG4gICAqXG4gICAqIFN0b3BzIGFzIHNvb24gYXMgdGhlIGNhbGxiYWNrIHJldHVybnMgdHJ1ZSBmb3IgYSB2ZXJ0ZXguXG4gICAqXG4gICAqIEBwYXJhbSB7VmVydGV4Q2FsbGJhY2t9IGNhbGxiYWNrXG4gICAqIEBwYXJhbSB7dmVjM30gW3ZlcnRleF0gT3V0cHV0IHBhcmFtLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBvbmUgb2YgdGhlIGNhbGxiYWNrcyByZXR1cm5lZCB0cnVlLlxuICAgKi9cbiAgc29tZVZlcnRleChjYWxsYmFjaywgdmVydGV4KSB7XG4gICAgdmVydGV4ID0gdmVydGV4IHx8IF92ZXJ0ZXgxO1xuXG4gICAgZm9yIChsZXQgeFNjYWxlID0gLTE7IHhTY2FsZSA8PSAxOyB4U2NhbGUgKz0gMikge1xuICAgICAgZm9yIChsZXQgeVNjYWxlID0gLTE7IHlTY2FsZSA8PSAxOyB5U2NhbGUgKz0gMikge1xuICAgICAgICBmb3IgKGxldCB6U2NhbGUgPSAtMTsgelNjYWxlIDw9IDE7IHpTY2FsZSArPSAyKSB7XG4gICAgICAgICAgdmVjMy5jb3B5KHZlcnRleCwgdGhpcy5fY2VudGVyKTtcbiAgICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKHZlcnRleCwgdmVydGV4LCB0aGlzLmV4dGVudHNbMF0sIHhTY2FsZSk7XG4gICAgICAgICAgdmVjMy5zY2FsZUFuZEFkZCh2ZXJ0ZXgsIHZlcnRleCwgdGhpcy5leHRlbnRzWzFdLCB5U2NhbGUpO1xuICAgICAgICAgIHZlYzMuc2NhbGVBbmRBZGQodmVydGV4LCB2ZXJ0ZXgsIHRoaXMuZXh0ZW50c1syXSwgelNjYWxlKTtcbiAgICAgICAgICBpZiAoY2FsbGJhY2sodmVydGV4KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyB0aGUgZ2l2ZW4gY2FsbGJhY2sgb25jZSBmb3IgZWFjaCBlZGdlLlxuICAgKlxuICAgKiBAcGFyYW0ge0VkZ2VDYWxsYmFja30gY2FsbGJhY2tcbiAgICogQHBhcmFtIHtMaW5lU2VnbWVudH0gW2VkZ2VdIE91dHB1dCBwYXJhbS5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgb25lIG9mIHRoZSBjYWxsYmFja3MgcmV0dXJuZWQgdHJ1ZS5cbiAgICovXG4gIHNvbWVFZGdlKGNhbGxiYWNrLCBlZGdlKSB7XG4gICAgZWRnZSA9IGVkZ2UgfHwgX3NlZ21lbnQ7XG5cbiAgICByZXR1cm4gX2VkZ2VFeHRlbnRTY2FsZXMuc29tZShlZGdlRXh0ZW50U2NhbGVQYWlyID0+IHtcbiAgICAgIGNvbnN0IHZlcnRleDFFeHRlbnRTY2FsZXMgPSBlZGdlRXh0ZW50U2NhbGVQYWlyWzBdO1xuICAgICAgY29uc3QgdmVydGV4MkV4dGVudFNjYWxlcyA9IGVkZ2VFeHRlbnRTY2FsZVBhaXJbMV07XG5cbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZWRnZSdzIGZpcnN0IGFuZCBzZWNvbmQgdmVydGV4LlxuICAgICAgdmVjMy5jb3B5KF92ZXJ0ZXgxLCB0aGlzLl9jZW50ZXIpO1xuICAgICAgdmVjMy5jb3B5KF92ZXJ0ZXgyLCB0aGlzLl9jZW50ZXIpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgdmVjMy5zY2FsZUFuZEFkZChfdmVydGV4MSwgX3ZlcnRleDEsIHRoaXMuZXh0ZW50c1tpXSwgdmVydGV4MUV4dGVudFNjYWxlc1tpXSk7XG4gICAgICAgIHZlYzMuc2NhbGVBbmRBZGQoX3ZlcnRleDIsIF92ZXJ0ZXgyLCB0aGlzLmV4dGVudHNbaV0sIHZlcnRleDJFeHRlbnRTY2FsZXNbaV0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDYWxsIGJhY2sgd2l0aCB0aGUgZWRnZS5cbiAgICAgIGVkZ2UucmVzZXQoX3ZlcnRleDEsIF92ZXJ0ZXgyKTtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlZGdlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyB0aGUgZ2l2ZW4gY2FsbGJhY2sgb25jZSBmb3IgZWFjaCBmYWNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0ZhY2VDYWxsYmFja30gY2FsbGJhY2tcbiAgICogQHBhcmFtIHtBcnJheS48dmVjMz59IFtmYWNlXSBPdXRwdXQgcGFyYW0uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIG9uZSBvZiB0aGUgY2FsbGJhY2tzIHJldHVybmVkIHRydWUuXG4gICAqL1xuICBzb21lRmFjZShjYWxsYmFjaywgZmFjZSkge1xuICAgIGZhY2UgPSBmYWNlIHx8IFtdO1xuXG4gICAgcmV0dXJuIF9mYWNlRXh0ZW50U2NhbGVzLnNvbWUoZmFjZUV4dGVudFNjYWxlcyA9PiB7XG4gICAgICBjb25zdCB2ZXJ0ZXgxRXh0ZW50U2NhbGVzID0gZmFjZUV4dGVudFNjYWxlc1swXTtcbiAgICAgIGNvbnN0IHZlcnRleDJFeHRlbnRTY2FsZXMgPSBmYWNlRXh0ZW50U2NhbGVzWzFdO1xuICAgICAgY29uc3QgdmVydGV4M0V4dGVudFNjYWxlcyA9IGZhY2VFeHRlbnRTY2FsZXNbMl07XG4gICAgICBjb25zdCB2ZXJ0ZXg0RXh0ZW50U2NhbGVzID0gZmFjZUV4dGVudFNjYWxlc1szXTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBmYWNlJ3MgdmVydGljZXMuXG4gICAgICB2ZWMzLmNvcHkoX3ZlcnRleDEsIHRoaXMuX2NlbnRlcik7XG4gICAgICB2ZWMzLmNvcHkoX3ZlcnRleDIsIHRoaXMuX2NlbnRlcik7XG4gICAgICB2ZWMzLmNvcHkoX3ZlcnRleDMsIHRoaXMuX2NlbnRlcik7XG4gICAgICB2ZWMzLmNvcHkoX3ZlcnRleDQsIHRoaXMuX2NlbnRlcik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKF92ZXJ0ZXgxLCBfdmVydGV4MSwgdGhpcy5leHRlbnRzW2ldLCB2ZXJ0ZXgxRXh0ZW50U2NhbGVzW2ldKTtcbiAgICAgICAgdmVjMy5zY2FsZUFuZEFkZChfdmVydGV4MiwgX3ZlcnRleDIsIHRoaXMuZXh0ZW50c1tpXSwgdmVydGV4MkV4dGVudFNjYWxlc1tpXSk7XG4gICAgICAgIHZlYzMuc2NhbGVBbmRBZGQoX3ZlcnRleDMsIF92ZXJ0ZXgzLCB0aGlzLmV4dGVudHNbaV0sIHZlcnRleDNFeHRlbnRTY2FsZXNbaV0pO1xuICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKF92ZXJ0ZXg0LCBfdmVydGV4NCwgdGhpcy5leHRlbnRzW2ldLCB2ZXJ0ZXg0RXh0ZW50U2NhbGVzW2ldKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FsbCBiYWNrIHdpdGggdGhlIGZhY2UuXG4gICAgICBmYWNlLnNwbGljZSgwLCA0LCBfdmVydGV4MSwgX3ZlcnRleDIsIF92ZXJ0ZXgzLCBfdmVydGV4NCk7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZmFjZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbHMgdGhlIGdpdmVuIGNhbGxiYWNrIG9uY2UgZm9yIGVhY2ggZmFjZSB3aXRoIGEgZ2l2ZW4gYWRkaXRpb25hbCBvZmZzZXQgZnJvbSB0aGUgY2VudGVyXG4gICAqIGFwcGxpZWQgdG8gZWFjaCBmYWNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0ZhY2VDYWxsYmFja30gY2FsbGJhY2tcbiAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c09mZnNldFxuICAgKiBAcGFyYW0ge0FycmF5Ljx2ZWMzPn0gW2ZhY2VdIE91dHB1dCBwYXJhbS5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgb25lIG9mIHRoZSBjYWxsYmFja3MgcmV0dXJuZWQgdHJ1ZS5cbiAgICovXG4gIHNvbWVQdXNoZWRPdXRGYWNlKGNhbGxiYWNrLCByYWRpdXNPZmZzZXQsIGZhY2UpIHtcbiAgICBmYWNlID0gZmFjZSB8fCBbXTtcblxuICAgIHJldHVybiBfZmFjZUV4dGVudFNjYWxlcy5zb21lKChmYWNlRXh0ZW50U2NhbGVzLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgdmVydGV4MUV4dGVudFNjYWxlcyA9IGZhY2VFeHRlbnRTY2FsZXNbMF07XG4gICAgICBjb25zdCB2ZXJ0ZXgyRXh0ZW50U2NhbGVzID0gZmFjZUV4dGVudFNjYWxlc1sxXTtcbiAgICAgIGNvbnN0IHZlcnRleDNFeHRlbnRTY2FsZXMgPSBmYWNlRXh0ZW50U2NhbGVzWzJdO1xuICAgICAgY29uc3QgdmVydGV4NEV4dGVudFNjYWxlcyA9IGZhY2VFeHRlbnRTY2FsZXNbM107XG4gICAgICBjb25zdCBkaXJlY3Rpb25PZmZzZXRzID0gX3B1c2hlZE91dEZhY2VPZmZzZXREaXJlY3Rpb25zW2luZGV4XTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBmYWNlJ3MgdmVydGljZXMuXG4gICAgICB2ZWMzLmNvcHkoX3ZlcnRleDEsIHRoaXMuX2NlbnRlcik7XG4gICAgICB2ZWMzLmNvcHkoX3ZlcnRleDIsIHRoaXMuX2NlbnRlcik7XG4gICAgICB2ZWMzLmNvcHkoX3ZlcnRleDMsIHRoaXMuX2NlbnRlcik7XG4gICAgICB2ZWMzLmNvcHkoX3ZlcnRleDQsIHRoaXMuX2NlbnRlcik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICAvLyBBZGQgdGhlIG9mZnNldCBmb3IgdGhlIG5vcm1hbCB2ZXJ0ZXggcG9zaXRpb24uXG4gICAgICAgIHZlYzMuc2NhbGVBbmRBZGQoX3ZlcnRleDEsIF92ZXJ0ZXgxLCB0aGlzLmV4dGVudHNbaV0sIHZlcnRleDFFeHRlbnRTY2FsZXNbaV0pO1xuICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKF92ZXJ0ZXgyLCBfdmVydGV4MiwgdGhpcy5leHRlbnRzW2ldLCB2ZXJ0ZXgyRXh0ZW50U2NhbGVzW2ldKTtcbiAgICAgICAgdmVjMy5zY2FsZUFuZEFkZChfdmVydGV4MywgX3ZlcnRleDMsIHRoaXMuZXh0ZW50c1tpXSwgdmVydGV4M0V4dGVudFNjYWxlc1tpXSk7XG4gICAgICAgIHZlYzMuc2NhbGVBbmRBZGQoX3ZlcnRleDQsIF92ZXJ0ZXg0LCB0aGlzLmV4dGVudHNbaV0sIHZlcnRleDRFeHRlbnRTY2FsZXNbaV0pO1xuICAgICAgICAvLyBBZGQgdGhlIHB1c2hlZC1vdXQgb2Zmc2V0LlxuICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKF92ZXJ0ZXgxLCBfdmVydGV4MSwgdGhpcy5leHRlbnRzW2ldLFxuICAgICAgICAgICAgcmFkaXVzT2Zmc2V0IC8gdGhpcy5oYWxmU2lkZUxlbmd0aHNbaV0gKiBkaXJlY3Rpb25PZmZzZXRzW2ldKTtcbiAgICAgICAgdmVjMy5zY2FsZUFuZEFkZChfdmVydGV4MiwgX3ZlcnRleDIsIHRoaXMuZXh0ZW50c1tpXSxcbiAgICAgICAgICAgIHJhZGl1c09mZnNldCAvIHRoaXMuaGFsZlNpZGVMZW5ndGhzW2ldICogZGlyZWN0aW9uT2Zmc2V0c1tpXSk7XG4gICAgICAgIHZlYzMuc2NhbGVBbmRBZGQoX3ZlcnRleDMsIF92ZXJ0ZXgzLCB0aGlzLmV4dGVudHNbaV0sXG4gICAgICAgICAgICByYWRpdXNPZmZzZXQgLyB0aGlzLmhhbGZTaWRlTGVuZ3Roc1tpXSAqIGRpcmVjdGlvbk9mZnNldHNbaV0pO1xuICAgICAgICB2ZWMzLnNjYWxlQW5kQWRkKF92ZXJ0ZXg0LCBfdmVydGV4NCwgdGhpcy5leHRlbnRzW2ldLFxuICAgICAgICAgICAgcmFkaXVzT2Zmc2V0IC8gdGhpcy5oYWxmU2lkZUxlbmd0aHNbaV0gKiBkaXJlY3Rpb25PZmZzZXRzW2ldKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FsbCBiYWNrIHdpdGggdGhlIGZhY2UuXG4gICAgICBmYWNlLnNwbGljZSgwLCA0LCBfdmVydGV4MSwgX3ZlcnRleDIsIF92ZXJ0ZXgzLCBfdmVydGV4NCk7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZmFjZSk7XG4gICAgfSk7XG4gIH1cblxuICBfdXBkYXRlRXh0ZW50cygpIHtcbiAgICB2ZWMzLnNldChfdmVydGV4MSwgdGhpcy5oYWxmU2lkZUxlbmd0aHNbMF0sIDAsIDApO1xuICAgIHZlYzMudHJhbnNmb3JtUXVhdCh0aGlzLmV4dGVudHNbMF0sIF92ZXJ0ZXgxLCB0aGlzLl9vcmllbnRhdGlvbik7XG4gICAgdmVjMy5zZXQoX3ZlcnRleDEsIDAsIHRoaXMuaGFsZlNpZGVMZW5ndGhzWzFdLCAwKTtcbiAgICB2ZWMzLnRyYW5zZm9ybVF1YXQodGhpcy5leHRlbnRzWzFdLCBfdmVydGV4MSwgdGhpcy5fb3JpZW50YXRpb24pO1xuICAgIHZlYzMuc2V0KF92ZXJ0ZXgxLCAwLCAwLCB0aGlzLmhhbGZTaWRlTGVuZ3Roc1syXSk7XG4gICAgdmVjMy50cmFuc2Zvcm1RdWF0KHRoaXMuZXh0ZW50c1syXSwgX3ZlcnRleDEsIHRoaXMuX29yaWVudGF0aW9uKTtcblxuICAgIHZlYzMuc2V0KF92ZXJ0ZXgxLCAxLCAwLCAwKTtcbiAgICB2ZWMzLnRyYW5zZm9ybVF1YXQodGhpcy5heGVzWzBdLCBfdmVydGV4MSwgdGhpcy5fb3JpZW50YXRpb24pO1xuICAgIHZlYzMuc2V0KF92ZXJ0ZXgxLCAwLCAxLCAwKTtcbiAgICB2ZWMzLnRyYW5zZm9ybVF1YXQodGhpcy5heGVzWzFdLCBfdmVydGV4MSwgdGhpcy5fb3JpZW50YXRpb24pO1xuICAgIHZlYzMuc2V0KF92ZXJ0ZXgxLCAwLCAwLCAxKTtcbiAgICB2ZWMzLnRyYW5zZm9ybVF1YXQodGhpcy5heGVzWzJdLCBfdmVydGV4MSwgdGhpcy5fb3JpZW50YXRpb24pO1xuICB9XG59XG5cbmNvbnN0IF92ZXJ0ZXgxID0gdmVjMy5jcmVhdGUoKTtcbmNvbnN0IF92ZXJ0ZXgyID0gdmVjMy5jcmVhdGUoKTtcbmNvbnN0IF92ZXJ0ZXgzID0gdmVjMy5jcmVhdGUoKTtcbmNvbnN0IF92ZXJ0ZXg0ID0gdmVjMy5jcmVhdGUoKTtcbmNvbnN0IF9zZWdtZW50ID0gbmV3IExpbmVTZWdtZW50KHZlYzMuY3JlYXRlKCksIHZlYzMuY3JlYXRlKCkpO1xuXG5jb25zdCBfZWRnZUV4dGVudFNjYWxlcyA9IFtcbiAgLy8gRnJvbnQtZmFjZSBlZGdlcy5cbiAgW1sxLCAtMSwgLTFdLCBbMSwgLTEsIDFdXSxcbiAgW1sxLCAtMSwgLTFdLCBbMSwgMSwgLTFdXSxcbiAgW1sxLCAxLCAxXSwgWzEsIC0xLCAxXV0sXG4gIFtbMSwgMSwgMV0sIFsxLCAxLCAtMV1dLFxuICAvLyBCYWNrLWZhY2UgZWRnZXMuXG4gIFtbLTEsIC0xLCAtMV0sIFstMSwgLTEsIDFdXSxcbiAgW1stMSwgLTEsIC0xXSwgWy0xLCAxLCAtMV1dLFxuICBbWy0xLCAxLCAxXSwgWy0xLCAtMSwgMV1dLFxuICBbWy0xLCAxLCAxXSwgWy0xLCAxLCAtMV1dLFxuICAvLyBGcm9udC10by1iYWNrIGVkZ2VzLlxuICBbWzEsIC0xLCAxXSwgWy0xLCAtMSwgMV1dLFxuICBbWzEsIDEsIC0xXSwgWy0xLCAxLCAtMV1dLFxuICBbWzEsIDEsIDFdLCBbLTEsIDEsIDFdXSxcbiAgW1sxLCAtMSwgLTFdLCBbLTEsIC0xLCAtMV1dLFxuXTtcblxuY29uc3QgX2ZhY2VFeHRlbnRTY2FsZXMgPSBbXG4gIFtbMSwgLTEsIC0xXSwgWzEsIC0xLCAxXSwgWzEsIDEsIDFdLCBbMSwgMSwgLTFdXSxcbiAgW1stMSwgLTEsIC0xXSwgWy0xLCAtMSwgMV0sIFstMSwgMSwgMV0sIFstMSwgMSwgLTFdXSxcbiAgW1stMSwgMSwgLTFdLCBbMSwgMSwgLTFdLCBbMSwgMSwgMV0sIFstMSwgMSwgMV1dLFxuICBbWy0xLCAtMSwgLTFdLCBbMSwgLTEsIC0xXSwgWzEsIC0xLCAxXSwgWy0xLCAtMSwgMV1dLFxuICBbWy0xLCAtMSwgMV0sIFsxLCAtMSwgMV0sIFsxLCAxLCAxXSwgWy0xLCAxLCAxXV0sXG4gIFtbLTEsIC0xLCAtMV0sIFsxLCAtMSwgLTFdLCBbMSwgMSwgLTFdLCBbLTEsIDEsIC0xXV0sXG5dO1xuXG5jb25zdCBfcHVzaGVkT3V0RmFjZU9mZnNldERpcmVjdGlvbnMgPSBbXG4gIHZlYzMuZnJvbVZhbHVlcygxLCAwLCAwKSxcbiAgdmVjMy5mcm9tVmFsdWVzKC0xLCAwLCAwKSxcbiAgdmVjMy5mcm9tVmFsdWVzKDAsIDEsIDApLFxuICB2ZWMzLmZyb21WYWx1ZXMoMCwgLTEsIDApLFxuICB2ZWMzLmZyb21WYWx1ZXMoMCwgMCwgMSksXG4gIHZlYzMuZnJvbVZhbHVlcygwLCAwLCAtMSksXG5dO1xuXG5leHBvcnQge09iYn07XG5cbi8qKlxuICogQGNhbGxiYWNrIFZlcnRleENhbGxiYWNrXG4gKiBAcGFyYW0ge3ZlYzN9XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gSWYgdHJ1ZSwgaXRlcmF0aW9uIHdpbGwgc3RvcC5cbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBFZGdlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7TGluZVNlZ21lbnR9XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gSWYgdHJ1ZSwgaXRlcmF0aW9uIHdpbGwgc3RvcC5cbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBGYWNlQ2FsbGJhY2tcbiAqIEBwYXJhbSB7QXJyYXkuPHZlYzM+fVxuICogQHJldHVybnMge2Jvb2xlYW59IElmIHRydWUsIGl0ZXJhdGlvbiB3aWxsIHN0b3AuXG4gKi9cbiIsImltcG9ydCB7Q29sbGlkYWJsZX0gZnJvbSAnLi9jb2xsaWRhYmxlJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBib3VuZGluZyBzcGhlcmUuXG4gKlxuICogVGhpcyBpcyBwcmltYXJpbHkgdXNlZnVsIGZvciBjb2xsaXNpb24gZGV0ZWN0aW9uLiBBIGJvdW5kaW5nIHNwaGVyZSBpcyBvbmx5IGFwcHJvcHJpYXRlIGZvciBzb21lXG4gKiBnZW9tZXRyaWVzLiBGb3Igb3RoZXIgZ2VvbWV0cmllcywgYW4gYXhpYWxseS1hbGlnbmVkIGJvdW5kaW5nIGJveCBtYXkgYmUgbW9yZSBhcHByb3ByaWF0ZS4gRm9yXG4gKiBvdGhlcnMgc3RpbGwsIGFuIG9yaWVudGVkIGJvdW5kaW5nIGJveCBvciBhIG1vcmUgY29tcGxpY2F0ZWQgaGllcmFyY2hpY2FsIG1vZGVsIG1heSBiZSBtb3JlXG4gKiBhcHByb3ByaWF0ZS5cbiAqL1xuY2xhc3MgU3BoZXJlIGV4dGVuZHMgQ29sbGlkYWJsZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gY2VudGVyWFxuICAgKiBAcGFyYW0ge251bWJlcn0gY2VudGVyWVxuICAgKiBAcGFyYW0ge251bWJlcn0gY2VudGVyWlxuICAgKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RhdGlvbmFyeT1mYWxzZV1cbiAgICogQHBhcmFtIHtDb2xsaWRhYmxlUGh5c2ljc0pvYn0gW3BoeXNpY3NKb2JdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjZW50ZXJYLCBjZW50ZXJZLCBjZW50ZXJaLCByYWRpdXMsIGlzU3RhdGlvbmFyeSA9IGZhbHNlLCBwaHlzaWNzSm9iKSB7XG4gICAgc3VwZXIoaXNTdGF0aW9uYXJ5LCBwaHlzaWNzSm9iKTtcbiAgICB0aGlzLmNlbnRlclggPSBjZW50ZXJYO1xuICAgIHRoaXMuY2VudGVyWSA9IGNlbnRlclk7XG4gICAgdGhpcy5jZW50ZXJaID0gY2VudGVyWjtcbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7dmVjM31cbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXQgY2VudGVyT2ZWb2x1bWUoKSB7XG4gICAgLy8gUmV1c2UgdGhlIHNhbWUgb2JqZWN0IHdoZW4gdGhpcyBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMuXG4gICAgdGhpcy5fY2VudGVyID0gdGhpcy5fY2VudGVyIHx8IHZlYzMuY3JlYXRlKCk7XG4gICAgdmVjMy5zZXQodGhpcy5fY2VudGVyLCB0aGlzLmNlbnRlclgsIHRoaXMuY2VudGVyWSwgdGhpcy5jZW50ZXJaKTtcbiAgICByZXR1cm4gdGhpcy5fY2VudGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtDb2xsaWRhYmxlfVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldCBib3VuZGluZ1ZvbHVtZSgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3ZlYzN9IHZhbHVlXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2V0IHBvc2l0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5jZW50ZXJYID0gdmFsdWVbMF07XG4gICAgdGhpcy5jZW50ZXJZID0gdmFsdWVbMV07XG4gICAgdGhpcy5jZW50ZXJaID0gdmFsdWVbMl07XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtxdWF0fSB2YWx1ZVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHNldCBvcmllbnRhdGlvbih2YWx1ZSkge1xuICAgIC8vIERvIG5vdGhpbmcuXG4gIH1cbn1cblxuZXhwb3J0IHtTcGhlcmV9O1xuIiwiaW1wb3J0ICogYXMgYWFiYkNvbGxpc2lvbkRldGVjdGlvbiBmcm9tICcuL3NyYy9hYWJiLWNvbGxpc2lvbi1kZXRlY3Rpb24nO1xuaW1wb3J0ICogYXMgY2Fwc3VsZUNvbGxpc2lvbkRldGVjdGlvbiBmcm9tICcuL3NyYy9jYXBzdWxlLWNvbGxpc2lvbi1kZXRlY3Rpb24nO1xuaW1wb3J0ICogYXMgb2JiQ29sbGlzaW9uRGV0ZWN0aW9uIGZyb20gJy4vc3JjL29iYi1jb2xsaXNpb24tZGV0ZWN0aW9uJztcbmltcG9ydCAqIGFzIHNwaGVyZUNvbGxpc2lvbkRldGVjdGlvbiBmcm9tICcuL3NyYy9zcGhlcmUtY29sbGlzaW9uLWRldGVjdGlvbic7XG5cbmV4cG9ydCB7XG4gIGFhYmJDb2xsaXNpb25EZXRlY3Rpb24sXG4gIGNhcHN1bGVDb2xsaXNpb25EZXRlY3Rpb24sXG4gIG9iYkNvbGxpc2lvbkRldGVjdGlvbixcbiAgc3BoZXJlQ29sbGlzaW9uRGV0ZWN0aW9uLFxufTtcbiIsImltcG9ydCAqIGFzIHNwaGVyZUNvbGxpc2lvbkRldGVjdGlvbiBmcm9tICcuL3NwaGVyZS1jb2xsaXNpb24tZGV0ZWN0aW9uJztcbmltcG9ydCAqIGFzIG9iYkNvbGxpc2lvbkRldGVjdGlvbiBmcm9tICcuL29iYi1jb2xsaXNpb24tZGV0ZWN0aW9uJztcbmltcG9ydCAqIGFzIGNhcHN1bGVDb2xsaXNpb25EZXRlY3Rpb24gZnJvbSAnLi9jYXBzdWxlLWNvbGxpc2lvbi1kZXRlY3Rpb24nO1xuaW1wb3J0IHthYWJiVnNQb2ludCBhcyBnZW9tZXRyeUFhYmJWc1BvaW50fSBmcm9tICcuLi8uLi8uLi91dGlsJztcblxuLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIHV0aWxpdHkgbWV0aG9kcyBmb3IgZGV0ZWN0aW5nIHdoZXRoZXIgaW50ZXJzZWN0aW9uIGhhcyBvY2N1cnJlZCBiZXR3ZWVuXG4gKiBheGlhbGx5LWFsaWduZWQgYm91bmRpbmcgYm94ZXMgYW5kIG90aGVyIHNoYXBlcy5cbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7QWFiYn0gYWFiYlxuICogQHBhcmFtIHt2ZWMzfSBwb2ludFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGFhYmJWc1BvaW50KGFhYmIsIHBvaW50KSB7XG4gIHJldHVybiBnZW9tZXRyeUFhYmJWc1BvaW50KGFhYmIsIHBvaW50KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJcbiAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBhYWJiVnNTcGhlcmUoYWFiYiwgc3BoZXJlKSB7XG4gIHJldHVybiBzcGhlcmVDb2xsaXNpb25EZXRlY3Rpb24uc3BoZXJlVnNBYWJiKHNwaGVyZSwgYWFiYik7XG59XG5cbi8qKlxuICogQHBhcmFtIHtBYWJifSBhYWJiQVxuICogQHBhcmFtIHtBYWJifSBhYWJiQlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGFhYmJWc0FhYmIoYWFiYkEsIGFhYmJCKSB7XG4gIHJldHVybiBhYWJiQS5tYXhYID49IGFhYmJCLm1pblggJiYgYWFiYkEubWluWCA8PSBhYWJiQi5tYXhYICYmXG4gICAgICBhYWJiQS5tYXhZID49IGFhYmJCLm1pblkgJiYgYWFiYkEubWluWSA8PSBhYWJiQi5tYXhZICYmXG4gICAgICBhYWJiQS5tYXhaID49IGFhYmJCLm1pblogJiYgYWFiYkEubWluWiA8PSBhYWJiQi5tYXhaO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QWFiYn0gYWFiYlxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGFhYmJWc09iYihhYWJiLCBvYmIpIHtcbiAgcmV0dXJuIG9iYkNvbGxpc2lvbkRldGVjdGlvbi5vYmJWc0FhYmIob2JiLCBhYWJiKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJcbiAqIEBwYXJhbSB7Q2Fwc3VsZX0gY2Fwc3VsZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGFhYmJWc0NhcHN1bGUoYWFiYiwgY2Fwc3VsZSkge1xuICByZXR1cm4gY2Fwc3VsZUNvbGxpc2lvbkRldGVjdGlvbi5jYXBzdWxlVnNBYWJiKGNhcHN1bGUsIGFhYmIpO1xufVxuXG5leHBvcnQge1xuICBhYWJiVnNQb2ludCxcbiAgYWFiYlZzU3BoZXJlLFxuICBhYWJiVnNBYWJiLFxuICBhYWJiVnNPYmIsXG4gIGFhYmJWc0NhcHN1bGUsXG59O1xuIiwiLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIHV0aWxpdHkgbWV0aG9kcyBmb3IgZGV0ZWN0aW5nIHdoZXRoZXIgaW50ZXJzZWN0aW9uIGhhcyBvY2N1cnJlZCBiZXR3ZWVuXG4gKiBjYXBzdWxlcyBhbmQgb3RoZXIgc2hhcGVzLlxuICovXG5cbmltcG9ydCB7XG4gIGZpbmRDbG9zZXN0UG9pbnRGcm9tQWFiYlRvUG9pbnQsXG4gIGZpbmRTcXVhcmVkRGlzdGFuY2VCZXR3ZWVuU2VnbWVudHMsXG4gIGZpbmRTcXVhcmVkRGlzdGFuY2VGcm9tU2VnbWVudFRvUG9pbnQsXG4gIHRtcFZlYzFcbn0gZnJvbSAnLi4vLi4vLi4vdXRpbCc7XG5pbXBvcnQgKiBhcyBvYmJDb2xsaXNpb25EZXRlY3Rpb24gZnJvbSAnLi9vYmItY29sbGlzaW9uLWRldGVjdGlvbic7XG5cbi8qKlxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlXG4gKiBAcGFyYW0ge3ZlYzN9IHBvaW50XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY2Fwc3VsZVZzUG9pbnQoY2Fwc3VsZSwgcG9pbnQpIHtcbiAgcmV0dXJuIGZpbmRTcXVhcmVkRGlzdGFuY2VGcm9tU2VnbWVudFRvUG9pbnQoY2Fwc3VsZS5zZWdtZW50LCBwb2ludCkgPD1cbiAgICAgIGNhcHN1bGUucmFkaXVzICogY2Fwc3VsZS5yYWRpdXM7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlXG4gKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY2Fwc3VsZVZzU3BoZXJlKGNhcHN1bGUsIHNwaGVyZSkge1xuICBjb25zdCBzdW1PZlJhZGlpID0gY2Fwc3VsZS5yYWRpdXMgKyBzcGhlcmUucmFkaXVzO1xuICByZXR1cm4gZmluZFNxdWFyZWREaXN0YW5jZUZyb21TZWdtZW50VG9Qb2ludChjYXBzdWxlLnNlZ21lbnQsIHNwaGVyZS5jZW50ZXJPZlZvbHVtZSkgPD1cbiAgICAgIHN1bU9mUmFkaWkgKiBzdW1PZlJhZGlpO1xufVxuXG4vKipcbiAqIE5PVEU6IFRoaXMgaW1wbGVtZW50YXRpb24gY2hlYXRzIGJ5IGNoZWNraW5nIHdoZXRoZXIgdmVydGljZXMgZnJvbSBvbmUgc2hhcGUgbGllIHdpdGhpbiB0aGVcbiAqIG90aGVyLiBEdWUgdG8gdGhlIHR1bm5lbGxpbmcgcHJvYmxlbSwgaXQgaXMgcG9zc2libGUgdGhhdCBpbnRlcnNlY3Rpb24gb2NjdXJzIHdpdGhvdXQgYW55XG4gKiB2ZXJ0aWNlcyBseWluZyB3aXRoaW4gdGhlIG90aGVyIHNoYXBlLiBIb3dldmVyLCAoQSkgdGhpcyBpcyB1bmxpa2VseSwgYW5kIChCKSB3ZSBhcmUgaWdub3JpbmcgdGhlXG4gKiB0dW5uZWxsaW5nIHByb2JsZW0gZm9yIHRoZSByZXN0IG9mIHRoaXMgY29sbGlzaW9uIHN5c3RlbSBhbnl3YXkuXG4gKlxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjYXBzdWxlVnNBYWJiKGNhcHN1bGUsIGFhYmIpIHtcbiAgY29uc3Qgc3F1YXJlZFJhZGl1cyA9IGNhcHN1bGUucmFkaXVzICogY2Fwc3VsZS5yYWRpdXM7XG5cbiAgLy8gQ2hlY2sgd2hldGhlciB0aGUgdHdvIGNhcHN1bGUgZW5kcyBpbnRlcnNlY3QgdGhlIEFBQkIgKHNwaGVyZSB2cyBBQUJCKSAoYWRkcmVzc2VzIHRoZVxuICAvLyBjYXBzdWxlLXZzLUFBQkItZmFjZSBjYXNlKS5cbiAgZmluZENsb3Nlc3RQb2ludEZyb21BYWJiVG9Qb2ludCh0bXBWZWMxLCBhYWJiLCBjYXBzdWxlLnNlZ21lbnQuc3RhcnQpO1xuICBpZiAodmVjMy5zcXVhcmVkRGlzdGFuY2UodG1wVmVjMSwgY2Fwc3VsZS5zZWdtZW50LnN0YXJ0KSA8PSBzcXVhcmVkUmFkaXVzKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZmluZENsb3Nlc3RQb2ludEZyb21BYWJiVG9Qb2ludCh0bXBWZWMxLCBhYWJiLCBjYXBzdWxlLnNlZ21lbnQuZW5kKTtcbiAgaWYgKHZlYzMuc3F1YXJlZERpc3RhbmNlKHRtcFZlYzEsIGNhcHN1bGUuc2VnbWVudC5lbmQpIDw9IHNxdWFyZWRSYWRpdXMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIENoZWNrIHdoZXRoZXIgdGhlIGNhcHN1bGUgaW50ZXJzZWN0cyB3aXRoIGFueSBBQUJCIGVkZ2UgKGFkZHJlc3NlcyB0aGUgY2Fwc3VsZS12cy1BQUJCLWVkZ2VcbiAgLy8gY2FzZSkuXG4gIHJldHVybiBhYWJiLnNvbWVFZGdlKGVkZ2UgPT5cbiAgICAgIGZpbmRTcXVhcmVkRGlzdGFuY2VCZXR3ZWVuU2VnbWVudHMoY2Fwc3VsZS5zZWdtZW50LCBlZGdlKSA8PSBzcXVhcmVkUmFkaXVzKTtcblxuICAvLyAoVGhlIGNhcHN1bGUtdnMtQUFCQi12ZXJ0ZXggY2FzZSBpcyBjb3ZlcmVkIGJ5IHRoZSBjYXBzdWxlLXZzLUFBQkItZWRnZSBjYXNlKS5cbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NhcHN1bGV9IGNhcHN1bGVcbiAqIEBwYXJhbSB7T2JifSBvYmJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBjYXBzdWxlVnNPYmIoY2Fwc3VsZSwgb2JiKSB7XG4gIHJldHVybiBvYmJDb2xsaXNpb25EZXRlY3Rpb24ub2JiVnNDYXBzdWxlKG9iYiwgY2Fwc3VsZSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlQVxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlQlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGNhcHN1bGVWc0NhcHN1bGUoY2Fwc3VsZUEsIGNhcHN1bGVCKSB7XG4gIGNvbnN0IHN1bU9mUmFkaWkgPSBjYXBzdWxlQS5yYWRpdXMgKyBjYXBzdWxlQi5yYWRpdXM7XG4gIHJldHVybiBmaW5kU3F1YXJlZERpc3RhbmNlQmV0d2VlblNlZ21lbnRzKGNhcHN1bGVBLnNlZ21lbnQsIGNhcHN1bGVCLnNlZ21lbnQpIDw9XG4gICAgICBzdW1PZlJhZGlpICogc3VtT2ZSYWRpaTtcbn1cblxuZXhwb3J0IHtcbiAgY2Fwc3VsZVZzUG9pbnQsXG4gIGNhcHN1bGVWc1NwaGVyZSxcbiAgY2Fwc3VsZVZzQWFiYixcbiAgY2Fwc3VsZVZzT2JiLFxuICBjYXBzdWxlVnNDYXBzdWxlLFxufTtcbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyB1dGlsaXR5IG1ldGhvZHMgZm9yIGRldGVjdGluZyB3aGV0aGVyIGludGVyc2VjdGlvbiBoYXMgb2NjdXJyZWQgYmV0d2VlblxuICogb3JpZW50ZWQgYm91bmRpbmcgYm94ZXMgYW5kIG90aGVyIHNoYXBlcy5cbiAqL1xuXG5pbXBvcnQge1xuICBmaW5kQ2xvc2VzdFBvaW50RnJvbU9iYlRvUG9pbnQsXG4gIGZpbmRQb2lCZXR3ZWVuU2VnbWVudEFuZFBsYW5lUmVnaW9uLFxuICBmaW5kU3F1YXJlZERpc3RhbmNlQmV0d2VlblNlZ21lbnRzLFxuICB0bXBWZWMxLFxuICB0bXBWZWMyLFxuICB0bXBWZWMzLFxuICB0bXBWZWM0XG59IGZyb20gJy4uLy4uLy4uL3V0aWwnO1xuaW1wb3J0ICogYXMgYWFiYkNvbGxpc2lvbkRldGVjdGlvbiBmcm9tICcuL2FhYmItY29sbGlzaW9uLWRldGVjdGlvbic7XG5pbXBvcnQgKiBhcyBjYXBzdWxlQ29sbGlzaW9uRGV0ZWN0aW9uIGZyb20gJy4vY2Fwc3VsZS1jb2xsaXNpb24tZGV0ZWN0aW9uJztcblxuLy8gVE9ETzogUmVmYWN0b3IgdGhlc2UgdG8gbm90IGFjdHVhbGx5IGNhbGN1bGF0ZSB0aGUgcG9pbnQgb2YgaW50ZXJzZWN0aW9uLiBUaGVzZSBjaGVja3MgY2FuXG4vLyBpbnN0ZWFkIGJlIGRvbmUgbW9yZSBlZmZpY2llbnRseSB1c2luZyBTQVQuXG5cbi8qKlxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICogQHBhcmFtIHt2ZWMzfSBwb2ludFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIG9iYlZzUG9pbnQob2JiLCBwb2ludCkge1xuICB2ZWMzLnN1YnRyYWN0KHRtcFZlYzQsIHBvaW50LCBvYmIuY2VudGVyT2ZWb2x1bWUpO1xuXG4gIHZlYzMuc2V0KHRtcFZlYzEsIDEsIDAsIDApO1xuICB2ZWMzLnRyYW5zZm9ybVF1YXQodG1wVmVjMSwgdG1wVmVjMSwgb2JiLm9yaWVudGF0aW9uKTtcbiAgY29uc3QgYXhpczFEaXN0YW5jZSA9IHZlYzMuZG90KHRtcFZlYzQsIHRtcFZlYzEpO1xuXG4gIGlmIChheGlzMURpc3RhbmNlID49IC1vYmIuaGFsZlNpZGVMZW5ndGhYICYmIGF4aXMxRGlzdGFuY2UgPD0gb2JiLmhhbGZTaWRlTGVuZ3RoWCkge1xuICAgIHZlYzMuc2V0KHRtcFZlYzIsIDAsIDEsIDApO1xuICAgIHZlYzMudHJhbnNmb3JtUXVhdCh0bXBWZWMyLCB0bXBWZWMyLCBvYmIub3JpZW50YXRpb24pO1xuICAgIGNvbnN0IGF4aXMyRGlzdGFuY2UgPSB2ZWMzLmRvdCh0bXBWZWM0LCB0bXBWZWMyKTtcblxuICAgIGlmIChheGlzMkRpc3RhbmNlID49IC1vYmIuaGFsZlNpZGVMZW5ndGhZICYmIGF4aXMyRGlzdGFuY2UgPD0gb2JiLmhhbGZTaWRlTGVuZ3RoWSkge1xuICAgICAgdmVjMy5zZXQodG1wVmVjMywgMCwgMCwgMSk7XG4gICAgICB2ZWMzLnRyYW5zZm9ybVF1YXQodG1wVmVjMywgdG1wVmVjMywgb2JiLm9yaWVudGF0aW9uKTtcbiAgICAgIGNvbnN0IGF4aXMzRGlzdGFuY2UgPSB2ZWMzLmRvdCh0bXBWZWM0LCB0bXBWZWMzKTtcblxuICAgICAgcmV0dXJuIGF4aXMzRGlzdGFuY2UgPj0gLW9iYi5oYWxmU2lkZUxlbmd0aFogJiYgYXhpczNEaXN0YW5jZSA8PSBvYmIuaGFsZlNpZGVMZW5ndGhaO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gb2JiVnNTcGhlcmUob2JiLCBzcGhlcmUpIHtcbiAgZmluZENsb3Nlc3RQb2ludEZyb21PYmJUb1BvaW50KHRtcFZlYzEsIG9iYiwgc3BoZXJlLmNlbnRlck9mVm9sdW1lKTtcbiAgcmV0dXJuIHZlYzMuc3F1YXJlZERpc3RhbmNlKHRtcFZlYzEsIHNwaGVyZS5jZW50ZXJPZlZvbHVtZSkgPD1cbiAgICAgIHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzO1xufVxuXG4vKipcbiAqIE5PVEU6IFRoaXMgaW1wbGVtZW50YXRpb24gY2hlYXRzIGJ5IGNoZWNraW5nIHdoZXRoZXIgdmVydGljZXMgZnJvbSBvbmUgc2hhcGUgbGllIHdpdGhpbiB0aGVcbiAqIG90aGVyLiBEdWUgdG8gdGhlIHR1bm5lbGxpbmcgcHJvYmxlbSwgaXQgaXMgcG9zc2libGUgdGhhdCBpbnRlcnNlY3Rpb24gb2NjdXJzIHdpdGhvdXQgYW55XG4gKiB2ZXJ0aWNlcyBseWluZyB3aXRoaW4gdGhlIG90aGVyIHNoYXBlLiBIb3dldmVyLCAoQSkgdGhpcyBpcyB1bmxpa2VseSwgYW5kIChCKSB3ZSBhcmUgaWdub3JpbmcgdGhlXG4gKiB0dW5uZWxsaW5nIHByb2JsZW0gZm9yIHRoZSByZXN0IG9mIHRoaXMgY29sbGlzaW9uIHN5c3RlbSBhbnl3YXkuXG4gKlxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICogQHBhcmFtIHtBYWJifSBhYWJiXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gb2JiVnNBYWJiKG9iYiwgYWFiYikge1xuICByZXR1cm4gX29iYlZzQm94SGVscGVyKG9iYiwgYWFiYiwgYWFiYkNvbGxpc2lvbkRldGVjdGlvbi5hYWJiVnNQb2ludCk7XG59XG5cbi8qKlxuICogTk9URTogVGhpcyBpbXBsZW1lbnRhdGlvbiBjaGVhdHMgYnkgY2hlY2tpbmcgd2hldGhlciB2ZXJ0aWNlcyBmcm9tIG9uZSBzaGFwZSBsaWUgd2l0aGluIHRoZVxuICogb3RoZXIuIER1ZSB0byB0aGUgdHVubmVsbGluZyBwcm9ibGVtLCBpdCBpcyBwb3NzaWJsZSB0aGF0IGludGVyc2VjdGlvbiBvY2N1cnMgd2l0aG91dCBhbnlcbiAqIHZlcnRpY2VzIGx5aW5nIHdpdGhpbiB0aGUgb3RoZXIgc2hhcGUuIEhvd2V2ZXIsIChBKSB0aGlzIGlzIHVubGlrZWx5LCBhbmQgKEIpIHdlIGFyZSBpZ25vcmluZyB0aGVcbiAqIHR1bm5lbGxpbmcgcHJvYmxlbSBmb3IgdGhlIHJlc3Qgb2YgdGhpcyBjb2xsaXNpb24gc3lzdGVtIGFueXdheS5cbiAqXG4gKiBAcGFyYW0ge09iYn0gb2JiQVxuICogQHBhcmFtIHtPYmJ9IG9iYkJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBvYmJWc09iYihvYmJBLCBvYmJCKSB7XG4gIHJldHVybiBfb2JiVnNCb3hIZWxwZXIob2JiQSwgb2JiQiwgb2JiVnNQb2ludCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICogQHBhcmFtIHtPYmJ8QWFiYn0gb3RoZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG90aGVyVnNQb2ludENhbGxiYWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9vYmJWc0JveEhlbHBlcihvYmIsIG90aGVyLCBvdGhlclZzUG9pbnRDYWxsYmFjaykge1xuICAvLyBDaGVjayB3aGV0aGVyIGFueSB2ZXJ0aWNlcyBmcm9tIEEgbGllIHdpdGhpbiBCJ3MgYm91bmRzLlxuICBpZiAob2JiLnNvbWVWZXJ0ZXgodmVydGV4ID0+IG90aGVyVnNQb2ludENhbGxiYWNrKG90aGVyLCB2ZXJ0ZXgpKSkgcmV0dXJuIHRydWU7XG5cbiAgLy8gQ2hlY2sgd2hldGhlciBhbnkgdmVydGljZXMgZnJvbSBCIGxpZSB3aXRoaW4gQSdzIGJvdW5kcy5cbiAgaWYgKG90aGVyLnNvbWVWZXJ0ZXgodmVydGV4ID0+IG9iYlZzUG9pbnQob2JiLCB2ZXJ0ZXgpKSkgcmV0dXJuIHRydWU7XG5cbiAgLy8gV2UgYXNzdW1lIHRoYXQgYSB2ZXJ0ZXgtdG8tZmFjZSBjb2xsaXNpb24gd291bGQgaGF2ZSBiZWVuIGRldGVjdGVkIGJ5IG9uZSBvZiB0aGUgdHdvIGFib3ZlXG4gIC8vIGNoZWNrcy4gQW55IGVkZ2UtdG8tZWRnZSBjb2xsaXNpb24gbXVzdCBpbnZvbHZlIGJvdGggYW4gZWRnZSBmcm9tIEEgdGhyb3VnaCBhIGZhY2Ugb2YgQiBhbmRcbiAgLy8gdmljZSB2ZXJzYS4gU28gaXQgaXMgc3VmZmljaWVudCB0byBvbmx5IGNoZWNrIHRoZSBlZGdlcyBvZiBvbmUgYW5kIHRoZSBmYWNlcyBvZiB0aGUgb3RoZXIuXG4gIGlmIChvdGhlci5zb21lRWRnZShlZGdlID0+XG4gICAgICAgICAgb2JiLnNvbWVGYWNlKGZhY2UgPT5cbiAgICAgICAgICAgICAgZmluZFBvaUJldHdlZW5TZWdtZW50QW5kUGxhbmVSZWdpb24odG1wVmVjMSwgZWRnZSwgLi4uZmFjZSkpKSlcbiAgICByZXR1cm4gdHJ1ZTtcblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gb2JiVnNDYXBzdWxlKG9iYiwgY2Fwc3VsZSkge1xuICAvLyBDaGVjayB0aGUgZWRnZXMuXG4gIGNvbnN0IHNxdWFyZWRSYWRpdXMgPSBjYXBzdWxlLnJhZGl1cyAqIGNhcHN1bGUucmFkaXVzO1xuICBsZXQgYXJlSW50ZXJzZWN0aW5nID0gb2JiLnNvbWVFZGdlKGVkZ2UgPT5cbiAgICAgIGZpbmRTcXVhcmVkRGlzdGFuY2VCZXR3ZWVuU2VnbWVudHMoY2Fwc3VsZS5zZWdtZW50LCBlZGdlKSA8IHNxdWFyZWRSYWRpdXMpO1xuXG4gIGlmIChhcmVJbnRlcnNlY3RpbmcpIHJldHVybiB0cnVlO1xuXG4gIC8vIENoZWNrIHRoZSBmYWNlcy5cbiAgYXJlSW50ZXJzZWN0aW5nID0gb2JiLnNvbWVQdXNoZWRPdXRGYWNlKGZhY2UgPT5cbiAgICAgICAgICBmaW5kUG9pQmV0d2VlblNlZ21lbnRBbmRQbGFuZVJlZ2lvbih0bXBWZWMxLCBjYXBzdWxlLnNlZ21lbnQsIC4uLmZhY2UpLCBjYXBzdWxlLnJhZGl1cyk7XG5cbiAgLy8gQ2hlY2sgZm9yIGluY2x1c2lvbiBvZiBvbmUgc2hhcGUgaW5zaWRlIHRoZSBvdGhlci5cbiAgYXJlSW50ZXJzZWN0aW5nID0gYXJlSW50ZXJzZWN0aW5nIHx8IG9iYlZzUG9pbnQob2JiLCBjYXBzdWxlLmNlbnRlck9mVm9sdW1lKTtcbiAgYXJlSW50ZXJzZWN0aW5nID0gYXJlSW50ZXJzZWN0aW5nIHx8IGNhcHN1bGVDb2xsaXNpb25EZXRlY3Rpb24uY2Fwc3VsZVZzUG9pbnQoY2Fwc3VsZSxcbiAgICAgIG9iYi5jZW50ZXJPZlZvbHVtZSk7XG5cbiAgcmV0dXJuIGFyZUludGVyc2VjdGluZztcbn1cblxuZXhwb3J0IHtcbiAgb2JiVnNQb2ludCxcbiAgb2JiVnNTcGhlcmUsXG4gIG9iYlZzQWFiYixcbiAgb2JiVnNPYmIsXG4gIG9iYlZzQ2Fwc3VsZSxcbn07XG4iLCJpbXBvcnQge2ZpbmRDbG9zZXN0UG9pbnRGcm9tQWFiYlRvUG9pbnQsIHRtcFZlYzF9IGZyb20gJy4uLy4uLy4uL3V0aWwnO1xuaW1wb3J0ICogYXMgb2JiQ29sbGlzaW9uRGV0ZWN0aW9uIGZyb20gJy4vb2JiLWNvbGxpc2lvbi1kZXRlY3Rpb24nO1xuaW1wb3J0ICogYXMgY2Fwc3VsZUNvbGxpc2lvbkRldGVjdGlvbiBmcm9tICcuL2NhcHN1bGUtY29sbGlzaW9uLWRldGVjdGlvbic7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyB1dGlsaXR5IG1ldGhvZHMgZm9yIGRldGVjdGluZyB3aGV0aGVyIGludGVyc2VjdGlvbiBoYXMgb2NjdXJyZWQgYmV0d2VlblxuICogc3BoZXJlcyBhbmQgb3RoZXIgc2hhcGVzLlxuICovXG5cbi8qKlxuICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZVxuICogQHBhcmFtIHt2ZWMzfSBwb2ludFxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHNwaGVyZVZzUG9pbnQoc3BoZXJlLCBwb2ludCkge1xuICByZXR1cm4gdmVjMy5zcXVhcmVkRGlzdGFuY2UocG9pbnQsIHNwaGVyZS5jZW50ZXJPZlZvbHVtZSkgPD0gc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXM7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZUFcbiAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmVCXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gc3BoZXJlVnNTcGhlcmUoc3BoZXJlQSwgc3BoZXJlQikge1xuICBjb25zdCBzdW1PZlJhZGlpID0gc3BoZXJlQS5yYWRpdXMgKyBzcGhlcmVCLnJhZGl1cztcbiAgcmV0dXJuIHZlYzMuc3F1YXJlZERpc3RhbmNlKHNwaGVyZUEuY2VudGVyT2ZWb2x1bWUsIHNwaGVyZUIuY2VudGVyT2ZWb2x1bWUpIDw9XG4gICAgICBzdW1PZlJhZGlpICogc3VtT2ZSYWRpaTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBzcGhlcmVWc0FhYmIoc3BoZXJlLCBhYWJiKSB7XG4gIGZpbmRDbG9zZXN0UG9pbnRGcm9tQWFiYlRvUG9pbnQodG1wVmVjMSwgYWFiYiwgc3BoZXJlLmNlbnRlck9mVm9sdW1lKTtcbiAgcmV0dXJuIHZlYzMuc3F1YXJlZERpc3RhbmNlKHRtcFZlYzEsIHNwaGVyZS5jZW50ZXJPZlZvbHVtZSkgPD0gc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXM7XG59XG5cbi8qKlxuICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZVxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHNwaGVyZVZzT2JiKHNwaGVyZSwgb2JiKSB7XG4gIHJldHVybiBvYmJDb2xsaXNpb25EZXRlY3Rpb24ub2JiVnNTcGhlcmUob2JiLCBzcGhlcmUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmVcbiAqIEBwYXJhbSB7Q2Fwc3VsZX0gY2Fwc3VsZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHNwaGVyZVZzQ2Fwc3VsZShzcGhlcmUsIGNhcHN1bGUpIHtcbiAgcmV0dXJuIGNhcHN1bGVDb2xsaXNpb25EZXRlY3Rpb24uY2Fwc3VsZVZzU3BoZXJlKGNhcHN1bGUsIHNwaGVyZSk7XG59XG5cbmV4cG9ydCB7XG4gIHNwaGVyZVZzUG9pbnQsXG4gIHNwaGVyZVZzU3BoZXJlLFxuICBzcGhlcmVWc0FhYmIsXG4gIHNwaGVyZVZzT2JiLFxuICBzcGhlcmVWc0NhcHN1bGUsXG59O1xuIiwiaW1wb3J0ICogYXMgYWFiYkNvbnRhY3RDYWxjdWxhdGlvbiBmcm9tICcuL3NyYy9hYWJiLWNvbnRhY3QtY2FsY3VsYXRpb24nO1xuaW1wb3J0ICogYXMgY2Fwc3VsZUNvbnRhY3RDYWxjdWxhdGlvbiBmcm9tICcuL3NyYy9jYXBzdWxlLWNvbnRhY3QtY2FsY3VsYXRpb24nO1xuaW1wb3J0ICogYXMgb2JiQ29udGFjdENhbGN1bGF0aW9uIGZyb20gJy4vc3JjL29iYi1jb250YWN0LWNhbGN1bGF0aW9uJztcbmltcG9ydCAqIGFzIHNwaGVyZUNvbnRhY3RDYWxjdWxhdGlvbiBmcm9tICcuL3NyYy9zcGhlcmUtY29udGFjdC1jYWxjdWxhdGlvbic7XG5cbmV4cG9ydCB7XG4gIGFhYmJDb250YWN0Q2FsY3VsYXRpb24sXG4gIGNhcHN1bGVDb250YWN0Q2FsY3VsYXRpb24sXG4gIG9iYkNvbnRhY3RDYWxjdWxhdGlvbixcbiAgc3BoZXJlQ29udGFjdENhbGN1bGF0aW9uLFxufTtcbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyB1dGlsaXR5IG1ldGhvZHMgZm9yIGNhbGN1bGF0aW5nIGEgY29udGFjdCBwb2ludCBiZXR3ZWVuIGF4aWFsbHktYWxpZ25lZCBcbiAqIGJvdW5kaW5nIGJveGVzIGFuZCBvdGhlciBzaGFwZXMuXG4gKlxuICogLSBFYWNoIG9mIHRoZXNlIGZ1bmN0aW9ucyBhc3N1bWVzIHRoYXQgdGhlIG9iamVjdHMgYXJlIGFjdHVhbGx5IGNvbGxpZGluZy5cbiAqIC0gVGhlIHJlc3VsdGluZyBjb250YWN0IHBvaW50IG1heSBiZSBhbnl3aGVyZSB3aXRoaW4gdGhlIGludGVyc2VjdGlvbiBvZiB0aGUgdHdvIG9iamVjdHMuXG4gKi9cblxuaW1wb3J0ICogYXMgc3BoZXJlQ29udGFjdENhbGN1bGF0aW9uIGZyb20gJy4vc3BoZXJlLWNvbnRhY3QtY2FsY3VsYXRpb24nO1xuaW1wb3J0ICogYXMgb2JiQ29udGFjdENhbGN1bGF0aW9uIGZyb20gJy4vb2JiLWNvbnRhY3QtY2FsY3VsYXRpb24nO1xuaW1wb3J0ICogYXMgY2Fwc3VsZUNvbnRhY3RDYWxjdWxhdGlvbiBmcm9tICcuL2NhcHN1bGUtY29udGFjdC1jYWxjdWxhdGlvbic7XG5pbXBvcnQge3RtcFZlYzF9IGZyb20gJy4uLy4uLy4uL3V0aWwnO1xuaW1wb3J0IHthYWJiQ29sbGlzaW9uRGV0ZWN0aW9ufSBmcm9tICcuLi8uLi9jb2xsaXNpb24tZGV0ZWN0aW9uJztcblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtBYWJifSBhYWJiXG4gKiBAcGFyYW0ge3ZlYzN9IHBvaW50XG4gKi9cbmZ1bmN0aW9uIGFhYmJWc1BvaW50KGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYWFiYiwgcG9pbnQpIHtcbiAgdmVjMy5jb3B5KGNvbnRhY3RQb2ludCwgcG9pbnQpO1xuICBmaW5kQWFiYk5vcm1hbEZyb21Db250YWN0UG9pbnQoY29udGFjdE5vcm1hbCwgY29udGFjdFBvaW50LCBhYWJiKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtBYWJifSBhYWJiXG4gKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlXG4gKi9cbmZ1bmN0aW9uIGFhYmJWc1NwaGVyZShjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGFhYmIsIHNwaGVyZSkge1xuICBzcGhlcmVDb250YWN0Q2FsY3VsYXRpb24uc3BoZXJlVnNBYWJiKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgc3BoZXJlLCBhYWJiKTtcbiAgdmVjMy5uZWdhdGUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7QWFiYn0gYWFiYkFcbiAqIEBwYXJhbSB7QWFiYn0gYWFiYkJcbiAqL1xuZnVuY3Rpb24gYWFiYlZzQWFiYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGFhYmJBLCBhYWJiQikge1xuICAvLyBDb21wdXRlIHRoZSBjb250YWN0IG5vcm1hbC5cbiAgdmVjMy5zZXQoY29udGFjdE5vcm1hbCwgMCwgMCwgMCk7XG4gIGNvbnN0IHhJbnRlcnNlY3Rpb25EZXB0aCA9IE1hdGgubWluKGFhYmJBLm1heFggLSBhYWJiQi5taW5YLCBhYWJiQi5tYXhYIC0gYWFiYkEubWluWCk7XG4gIGNvbnN0IHlJbnRlcnNlY3Rpb25EZXB0aCA9IE1hdGgubWluKGFhYmJBLm1heFkgLSBhYWJiQi5taW5ZLCBhYWJiQi5tYXhZIC0gYWFiYkEubWluWSk7XG4gIGNvbnN0IHpJbnRlcnNlY3Rpb25EZXB0aCA9IE1hdGgubWluKGFhYmJBLm1heFogLSBhYWJiQi5taW5aLCBhYWJiQi5tYXhaIC0gYWFiYkEubWluWik7XG4gIC8vIEFzc3VtZSB0aGF0IHRoZSBkaXJlY3Rpb24gb2YgaW50ZXJzZWN0aW9uIGNvcnJlc3BvbmRzIHRvIHdoaWNoZXZlciBheGlzIGhhcyB0aGUgc2hhbGxvd2VzdFxuICAvLyBpbnRlcnNlY3Rpb24uXG4gIGlmICh4SW50ZXJzZWN0aW9uRGVwdGggPD0geUludGVyc2VjdGlvbkRlcHRoKSB7XG4gICAgaWYgKHhJbnRlcnNlY3Rpb25EZXB0aCA8PSB6SW50ZXJzZWN0aW9uRGVwdGgpIHtcbiAgICAgIGNvbnRhY3ROb3JtYWxbMF0gPSBhYWJiQS5tYXhYIC0gYWFiYkIubWluWCA8PSBhYWJiQi5tYXhYIC0gYWFiYkEubWluWCA/IDEgOiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFjdE5vcm1hbFsyXSA9IGFhYmJBLm1heFogLSBhYWJiQi5taW5aIDw9IGFhYmJCLm1heFogLSBhYWJiQS5taW5aID8gMSA6IC0xO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoeUludGVyc2VjdGlvbkRlcHRoIDw9IHpJbnRlcnNlY3Rpb25EZXB0aCkge1xuICAgICAgY29udGFjdE5vcm1hbFsxXSA9IGFhYmJBLm1heFkgLSBhYWJiQi5taW5ZIDw9IGFhYmJCLm1heFkgLSBhYWJiQS5taW5ZID8gMSA6IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWN0Tm9ybWFsWzJdID0gYWFiYkEubWF4WiAtIGFhYmJCLm1pblogPD0gYWFiYkIubWF4WiAtIGFhYmJBLm1pblogPyAxIDogLTE7XG4gICAgfVxuICB9XG5cbiAgLy8gVE9ETzogVGhlIHR3byBBQUJCcyBmb3JtIGEgc3F1YXJlIGludGVyc2VjdGlvbiBjcm9zcy1zZWN0aW9uIHJlZ2lvbiBhbG9uZyB0aGUgZGlyZWN0aW9uIG9mIHRoZVxuICAvLyBub3JtYWwuIENhbGN1bGF0ZSB0aGUgY2VudGVyIG9mIHRoYXQgc3F1YXJlIHRvIHVzZSBhcyB0aGUgcG9pbnQgb2YgY29udGFjdC5cbiAgaWYgKCFhYWJiQS5zb21lVmVydGV4KHZlcnRleCA9PiBhYWJiQ29sbGlzaW9uRGV0ZWN0aW9uLmFhYmJWc1BvaW50KGFhYmJCLCB2ZXJ0ZXgpLFxuICAgICAgICAgIGNvbnRhY3RQb2ludCkpIHtcbiAgICBhYWJiQi5zb21lVmVydGV4KHZlcnRleCA9PiBhYWJiQ29sbGlzaW9uRGV0ZWN0aW9uLmFhYmJWc1BvaW50KGFhYmJBLCB2ZXJ0ZXgpLCBjb250YWN0UG9pbnQpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7QWFiYn0gYWFiYlxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICovXG5mdW5jdGlvbiBhYWJiVnNPYmIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhYWJiLCBvYmIpIHtcbiAgb2JiQ29udGFjdENhbGN1bGF0aW9uLm9iYlZzQWFiYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIG9iYiwgYWFiYik7XG4gIHZlYzMubmVnYXRlKGNvbnRhY3ROb3JtYWwsIGNvbnRhY3ROb3JtYWwpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdE5vcm1hbCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJcbiAqIEBwYXJhbSB7Q2Fwc3VsZX0gY2Fwc3VsZVxuICovXG5mdW5jdGlvbiBhYWJiVnNDYXBzdWxlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYWFiYiwgY2Fwc3VsZSkge1xuICBjYXBzdWxlQ29udGFjdENhbGN1bGF0aW9uLmNhcHN1bGVWc0FhYmIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBjYXBzdWxlLCBhYWJiKTtcbiAgdmVjMy5uZWdhdGUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50XG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGZpbmRBYWJiTm9ybWFsRnJvbUNvbnRhY3RQb2ludChjb250YWN0Tm9ybWFsLCBjb250YWN0UG9pbnQsIGFhYmIpIHtcbiAgdmVjMy5zZXQoY29udGFjdE5vcm1hbCwgMCwgMCwgMCk7XG4gIHZlYzMuc3VidHJhY3QodG1wVmVjMSwgY29udGFjdFBvaW50LCBhYWJiLmNlbnRlck9mVm9sdW1lKTtcbiAgY29uc3QgeERpc3RhbmNlRnJvbUZhY2UgPSBhYWJiLnJhbmdlWCAvIDIgLSBNYXRoLmFicyh0bXBWZWMxWzBdKTtcbiAgY29uc3QgeURpc3RhbmNlRnJvbUZhY2UgPSBhYWJiLnJhbmdlWSAvIDIgLSBNYXRoLmFicyh0bXBWZWMxWzFdKTtcbiAgY29uc3QgekRpc3RhbmNlRnJvbUZhY2UgPSBhYWJiLnJhbmdlWiAvIDIgLSBNYXRoLmFicyh0bXBWZWMxWzJdKTtcbiAgLy8gQXNzdW1lIHRoYXQgdGhlIHBvaW50IGlzIGNvbnRhY3Rpbmcgd2hpY2hldmVyIGZhY2UgaXQncyBjbG9zZXN0IHRvLlxuICBpZiAoeERpc3RhbmNlRnJvbUZhY2UgPD0geURpc3RhbmNlRnJvbUZhY2UpIHtcbiAgICBpZiAoeERpc3RhbmNlRnJvbUZhY2UgPD0gekRpc3RhbmNlRnJvbUZhY2UpIHtcbiAgICAgIGNvbnRhY3ROb3JtYWxbMF0gPSB0bXBWZWMxWzBdID4gMCA/IDEgOiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFjdE5vcm1hbFsyXSA9IHRtcFZlYzFbMl0gPiAwID8gMSA6IC0xO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoeURpc3RhbmNlRnJvbUZhY2UgPD0gekRpc3RhbmNlRnJvbUZhY2UpIHtcbiAgICAgIGNvbnRhY3ROb3JtYWxbMV0gPSB0bXBWZWMxWzFdID4gMCA/IDEgOiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFjdE5vcm1hbFsyXSA9IHRtcFZlYzFbMl0gPiAwID8gMSA6IC0xO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQge1xuICBhYWJiVnNQb2ludCxcbiAgYWFiYlZzU3BoZXJlLFxuICBhYWJiVnNBYWJiLFxuICBhYWJiVnNPYmIsXG4gIGFhYmJWc0NhcHN1bGUsXG4gIGZpbmRBYWJiTm9ybWFsRnJvbUNvbnRhY3RQb2ludCxcbn07XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgdXRpbGl0eSBtZXRob2RzIGZvciBjYWxjdWxhdGluZyBhIGNvbnRhY3QgcG9pbnQgYmV0d2VlbiBjYXBzdWxlcyBhbmQgb3RoZXIgXG4gKiBzaGFwZXMuXG4gKlxuICogLSBFYWNoIG9mIHRoZXNlIGZ1bmN0aW9ucyBhc3N1bWVzIHRoYXQgdGhlIG9iamVjdHMgYXJlIGFjdHVhbGx5IGNvbGxpZGluZy5cbiAqIC0gVGhlIHJlc3VsdGluZyBjb250YWN0IHBvaW50IG1heSBiZSBhbnl3aGVyZSB3aXRoaW4gdGhlIGludGVyc2VjdGlvbiBvZiB0aGUgdHdvIG9iamVjdHMuXG4gKi9cblxuaW1wb3J0IHtcbiAgZmluZENsb3Nlc3RQb2ludEZyb21BYWJiVG9Qb2ludCxcbiAgZmluZENsb3Nlc3RQb2ludE9uU2VnbWVudFRvUG9pbnQsXG4gIGZpbmRDbG9zZXN0UG9pbnRzRnJvbVNlZ21lbnRUb1NlZ21lbnQsXG4gIHRtcFZlYzEsXG4gIHRtcFZlYzJcbn0gZnJvbSAnLi4vLi4vLi4vdXRpbCc7XG5pbXBvcnQgKiBhcyBvYmJDb250YWN0Q2FsY3VsYXRpb24gZnJvbSAnLi9vYmItY29udGFjdC1jYWxjdWxhdGlvbic7XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7Q2Fwc3VsZX0gY2Fwc3VsZVxuICogQHBhcmFtIHt2ZWMzfSBwb2ludFxuICovXG5mdW5jdGlvbiBjYXBzdWxlVnNQb2ludChjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGNhcHN1bGUsIHBvaW50KSB7XG4gIHZlYzMuY29weShjb250YWN0UG9pbnQsIHBvaW50KTtcbiAgZmluZENsb3Nlc3RQb2ludE9uU2VnbWVudFRvUG9pbnQoY29udGFjdE5vcm1hbCwgY2Fwc3VsZS5zZWdtZW50LCBwb2ludCk7XG4gIHZlYzMuc3VidHJhY3QoY29udGFjdE5vcm1hbCwgY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsKTtcbiAgdmVjMy5ub3JtYWxpemUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHN1cmZhY2Ugb2YgdGhlIGNhcHN1bGUgdG8gdGhlIHNwaGVyZSBjZW50ZXIuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7Q2Fwc3VsZX0gY2Fwc3VsZVxuICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZVxuICovXG5mdW5jdGlvbiBjYXBzdWxlVnNTcGhlcmUoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBjYXBzdWxlLCBzcGhlcmUpIHtcbiAgY29uc3Qgc3BoZXJlQ2VudGVyID0gc3BoZXJlLmNlbnRlck9mVm9sdW1lO1xuICBmaW5kQ2xvc2VzdFBvaW50T25TZWdtZW50VG9Qb2ludChjb250YWN0UG9pbnQsIGNhcHN1bGUuc2VnbWVudCwgc3BoZXJlQ2VudGVyKTtcbiAgdmVjMy5zdWJ0cmFjdChjb250YWN0Tm9ybWFsLCBzcGhlcmVDZW50ZXIsIGNvbnRhY3RQb2ludCk7XG4gIHZlYzMubm9ybWFsaXplKGNvbnRhY3ROb3JtYWwsIGNvbnRhY3ROb3JtYWwpO1xuICB2ZWMzLnNjYWxlQW5kQWRkKGNvbnRhY3RQb2ludCwgY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBjYXBzdWxlLnJhZGl1cyk7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHN1cmZhY2Ugb2YgdGhlIGNhcHN1bGUgdG8gdGhlIEFBQkIuXG4gKlxuICogTk9URTogVGhpcyBpbXBsZW1lbnRhdGlvbiBjaGVhdHMgYnkgY2hlY2tpbmcgd2hldGhlciB2ZXJ0aWNlcyBmcm9tIG9uZSBzaGFwZSBsaWUgd2l0aGluIHRoZVxuICogb3RoZXIuIER1ZSB0byB0aGUgdHVubmVsbGluZyBwcm9ibGVtLCBpdCBpcyBwb3NzaWJsZSB0aGF0IGludGVyc2VjdGlvbiBvY2N1cnMgd2l0aG91dCBhbnlcbiAqIHZlcnRpY2VzIGx5aW5nIHdpdGhpbiB0aGUgb3RoZXIgc2hhcGUuIEhvd2V2ZXIsIChBKSB0aGlzIGlzIHVubGlrZWx5LCBhbmQgKEIpIHdlIGFyZSBpZ25vcmluZyB0aGVcbiAqIHR1bm5lbGxpbmcgcHJvYmxlbSBmb3IgdGhlIHJlc3Qgb2YgdGhpcyBjb2xsaXNpb24gc3lzdGVtIGFueXdheS5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJcbiAqL1xuZnVuY3Rpb24gY2Fwc3VsZVZzQWFiYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGNhcHN1bGUsIGFhYmIpIHtcbiAgLy8gdG1wVmVjMSByZXByZXNlbnRzIHRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSBjYXBzdWxlIHRvIHRoZSBBQUJCLiB0bXBWZWMyXG4gIC8vIHJlcHJlc2VudHMgdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIEFBQkIgdG8gdGhlIGNhcHN1bGUuXG5cbiAgLy9cbiAgLy8gQ2hlY2sgd2hldGhlciB0aGUgdHdvIGNhcHN1bGUgZW5kcyBpbnRlcnNlY3QgdGhlIEFBQkIgKHNwaGVyZSB2cyBBQUJCKSAoYWRkcmVzc2VzIHRoZVxuICAvLyBjYXBzdWxlLXZzLUFBQkItZmFjZSBjYXNlKS5cbiAgLy9cblxuICBjb25zdCBzcXVhcmVkUmFkaXVzID0gY2Fwc3VsZS5yYWRpdXMgKiBjYXBzdWxlLnJhZGl1cztcbiAgbGV0IGRvZXNBYWJiSW50ZXJzZWN0QW5FbmRQb2ludCA9IGZhbHNlO1xuXG4gIGxldCBlbmRQb2ludCA9IGNhcHN1bGUuc2VnbWVudC5zdGFydDtcbiAgZmluZENsb3Nlc3RQb2ludEZyb21BYWJiVG9Qb2ludCh0bXBWZWMyLCBhYWJiLCBlbmRQb2ludCk7XG4gIGlmICh2ZWMzLnNxdWFyZWREaXN0YW5jZSh0bXBWZWMyLCBlbmRQb2ludCkgPD0gc3F1YXJlZFJhZGl1cykge1xuICAgIGRvZXNBYWJiSW50ZXJzZWN0QW5FbmRQb2ludCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgZW5kUG9pbnQgPSBjYXBzdWxlLnNlZ21lbnQuZW5kO1xuICAgIGZpbmRDbG9zZXN0UG9pbnRGcm9tQWFiYlRvUG9pbnQodG1wVmVjMiwgYWFiYiwgZW5kUG9pbnQpO1xuICAgIGlmICh2ZWMzLnNxdWFyZWREaXN0YW5jZSh0bXBWZWMyLCBlbmRQb2ludCkgPD0gc3F1YXJlZFJhZGl1cykge1xuICAgICAgZG9lc0FhYmJJbnRlcnNlY3RBbkVuZFBvaW50ID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWRvZXNBYWJiSW50ZXJzZWN0QW5FbmRQb2ludCkge1xuICAgIC8vXG4gICAgLy8gQ2hlY2sgd2hldGhlciB0aGUgY2Fwc3VsZSBpbnRlcnNlY3RzIHdpdGggYW55IEFBQkIgZWRnZSAoYWRkcmVzc2VzIHRoZSBjYXBzdWxlLXZzLUFBQkItZWRnZVxuICAgIC8vIGNhc2UpLlxuICAgIC8vXG4gICAgYWFiYi5zb21lRWRnZShlZGdlID0+IHtcbiAgICAgIGZpbmRDbG9zZXN0UG9pbnRzRnJvbVNlZ21lbnRUb1NlZ21lbnQodG1wVmVjMSwgdG1wVmVjMixcbiAgICAgICAgICBjYXBzdWxlLnNlZ21lbnQsIGVkZ2UpO1xuICAgICAgY29uc3QgZGlzdGFuY2UgPSB2ZWMzLnNxdWFyZWREaXN0YW5jZSh0bXBWZWMxLCB0bXBWZWMyKTtcbiAgICAgIHJldHVybiBkaXN0YW5jZSA8PSBzcXVhcmVkUmFkaXVzO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gKFRoZSBjYXBzdWxlLXZzLUFBQkItdmVydGV4IGNhc2UgaXMgY292ZXJlZCBieSB0aGUgY2Fwc3VsZS12cy1BQUJCLWVkZ2UgY2FzZSkuXG5cbiAgZmluZENsb3Nlc3RQb2ludE9uU2VnbWVudFRvUG9pbnQodG1wVmVjMSwgY2Fwc3VsZS5zZWdtZW50LCB0bXBWZWMyKTtcbiAgdmVjMy5zdWJ0cmFjdChjb250YWN0Tm9ybWFsLCB0bXBWZWMyLCB0bXBWZWMxKTtcbiAgdmVjMy5ub3JtYWxpemUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG4gIHZlYzMuc2NhbGVBbmRBZGQoY29udGFjdFBvaW50LCB0bXBWZWMxLCBjb250YWN0Tm9ybWFsLCBjYXBzdWxlLnJhZGl1cyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7Q2Fwc3VsZX0gY2Fwc3VsZVxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICovXG5mdW5jdGlvbiBjYXBzdWxlVnNPYmIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBjYXBzdWxlLCBvYmIpIHtcbiAgb2JiQ29udGFjdENhbGN1bGF0aW9uLm9iYlZzQ2Fwc3VsZShjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIG9iYiwgY2Fwc3VsZSk7XG4gIHZlYzMubmVnYXRlKGNvbnRhY3ROb3JtYWwsIGNvbnRhY3ROb3JtYWwpO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSBzdXJmYWNlIG9mIGNhcHN1bGUgQSB0byBjYXBzdWxlIEIuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7Q2Fwc3VsZX0gY2Fwc3VsZUFcbiAqIEBwYXJhbSB7Q2Fwc3VsZX0gY2Fwc3VsZUJcbiAqL1xuZnVuY3Rpb24gY2Fwc3VsZVZzQ2Fwc3VsZShjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGNhcHN1bGVBLCBjYXBzdWxlQikge1xuICBmaW5kQ2xvc2VzdFBvaW50c0Zyb21TZWdtZW50VG9TZWdtZW50KHRtcFZlYzEsIHRtcFZlYzIsXG4gICAgICBjYXBzdWxlQS5zZWdtZW50LCBjYXBzdWxlQi5zZWdtZW50KTtcbiAgdmVjMy5zdWJ0cmFjdChjb250YWN0Tm9ybWFsLCB0bXBWZWMyLCB0bXBWZWMxKTtcbiAgdmVjMy5ub3JtYWxpemUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG4gIHZlYzMuc2NhbGVBbmRBZGQoY29udGFjdFBvaW50LCB0bXBWZWMxLCBjb250YWN0Tm9ybWFsLCBjYXBzdWxlQS5yYWRpdXMpO1xufVxuXG5leHBvcnQge1xuICBjYXBzdWxlVnNQb2ludCxcbiAgY2Fwc3VsZVZzU3BoZXJlLFxuICBjYXBzdWxlVnNBYWJiLFxuICBjYXBzdWxlVnNPYmIsXG4gIGNhcHN1bGVWc0NhcHN1bGUsXG59O1xuIiwiLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIHV0aWxpdHkgbWV0aG9kcyBmb3IgY2FsY3VsYXRpbmcgYSBjb250YWN0IHBvaW50IGJldHdlZW4gb3JpZW50ZWQgYm91bmRpbmdcbiAqIGJveGVzIGFuZCBvdGhlciBzaGFwZXMuXG4gKlxuICogLSBFYWNoIG9mIHRoZXNlIGZ1bmN0aW9ucyBhc3N1bWVzIHRoYXQgdGhlIG9iamVjdHMgYXJlIGFjdHVhbGx5IGNvbGxpZGluZy5cbiAqIC0gVGhlIHJlc3VsdGluZyBjb250YWN0IHBvaW50IG1heSBiZSBhbnl3aGVyZSB3aXRoaW4gdGhlIGludGVyc2VjdGlvbiBvZiB0aGUgdHdvIG9iamVjdHMuXG4gKi9cblxuaW1wb3J0IHtcbiAgZmluZFBvaUJldHdlZW5TZWdtZW50QW5kUGxhbmVSZWdpb24sXG4gIGZpbmRDbG9zZXN0UG9pbnRGcm9tT2JiVG9Qb2ludCxcbiAgZmluZFNxdWFyZWREaXN0YW5jZUJldHdlZW5TZWdtZW50cyxcbiAgZmluZENsb3Nlc3RQb2ludHNGcm9tU2VnbWVudFRvU2VnbWVudCxcbiAgdG1wVmVjMVxufSBmcm9tICcuLi8uLi8uLi91dGlsJztcbmltcG9ydCB7YWFiYkNvbGxpc2lvbkRldGVjdGlvbiwgb2JiQ29sbGlzaW9uRGV0ZWN0aW9ufSBmcm9tICcuLi8uLi9jb2xsaXNpb24tZGV0ZWN0aW9uJztcbmltcG9ydCB7TGluZVNlZ21lbnR9IGZyb20gJy4uLy4uL2NvbGxpZGFibGVzJztcbmltcG9ydCAqIGFzIGFhYmJDb250YWN0Q2FsY3VsYXRpb24gZnJvbSAnLi9hYWJiLWNvbnRhY3QtY2FsY3VsYXRpb24nO1xuXG4vLyBUT0RPOiBUaGVyZSBhcmUgbW9yZSBlZmZpY2llbnQgKGJ1dCBmYXIgbW9yZSBjb21wbGljYXRlZCkgYWxnb3JpdGhtcyBmb3IgZmluZGluZyB0aGUgcG9pbnQgb2Zcbi8vIGludGVyc2VjdGlvbiB3aXRoIE9CQnMuIFBvcnQgb3ZlciBzb21lIG90aGVyIHByZS1leGlzdGluZyBzb2x1dGlvbnMgZm9yIHRoZXNlLlxuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdE5vcm1hbCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKiBAcGFyYW0ge3ZlYzN9IHBvaW50XG4gKi9cbmZ1bmN0aW9uIG9iYlZzUG9pbnQoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBvYmIsIHBvaW50KSB7XG4gIHZlYzMuY29weShjb250YWN0UG9pbnQsIHBvaW50KTtcbiAgZmluZE9iYk5vcm1hbEZyb21Db250YWN0UG9pbnQoY29udGFjdE5vcm1hbCwgY29udGFjdFBvaW50LCBvYmIpO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBjbG9zZXN0IHBvaW50IGFueXdoZXJlIGluc2lkZSB0aGUgT0JCIHRvIHRoZSBjZW50ZXIgb2YgdGhlIHNwaGVyZS5cbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZVxuICovXG5mdW5jdGlvbiBvYmJWc1NwaGVyZShjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIG9iYiwgc3BoZXJlKSB7XG4gIGZpbmRDbG9zZXN0UG9pbnRGcm9tT2JiVG9Qb2ludChjb250YWN0UG9pbnQsIG9iYiwgc3BoZXJlLmNlbnRlck9mVm9sdW1lKTtcbiAgdmVjMy5zdWJ0cmFjdChjb250YWN0Tm9ybWFsLCBzcGhlcmUuY2VudGVyT2ZWb2x1bWUsIGNvbnRhY3RQb2ludCk7XG4gIHZlYzMubm9ybWFsaXplKGNvbnRhY3ROb3JtYWwsIGNvbnRhY3ROb3JtYWwpO1xufVxuXG4vKipcbiAqIE5PVEU6IFRoaXMgaW1wbGVtZW50YXRpb24gY2hlYXRzIGJ5IGNoZWNraW5nIHdoZXRoZXIgdmVydGljZXMgZnJvbSBvbmUgc2hhcGUgbGllIHdpdGhpbiB0aGVcbiAqIG90aGVyLiBEdWUgdG8gdGhlIHR1bm5lbGxpbmcgcHJvYmxlbSwgaXQgaXMgcG9zc2libGUgdGhhdCBpbnRlcnNlY3Rpb24gb2NjdXJzIHdpdGhvdXQgYW55XG4gKiB2ZXJ0aWNlcyBseWluZyB3aXRoaW4gdGhlIG90aGVyIHNoYXBlLiBIb3dldmVyLCAoQSkgdGhpcyBpcyB1bmxpa2VseSwgYW5kIChCKSB3ZSBhcmUgaWdub3JpbmcgdGhlXG4gKiB0dW5uZWxsaW5nIHByb2JsZW0gZm9yIHRoZSByZXN0IG9mIHRoaXMgY29sbGlzaW9uIHN5c3RlbSBhbnl3YXkuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7T2JifSBvYmJcbiAqIEBwYXJhbSB7QWFiYn0gYWFiYlxuICovXG5mdW5jdGlvbiBvYmJWc0FhYmIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBvYmIsIGFhYmIpIHtcbiAgcmV0dXJuIF9vYmJWc0JveEhlbHBlcihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIG9iYiwgYWFiYiwgYWFiYkNvbGxpc2lvbkRldGVjdGlvbi5hYWJiVnNQb2ludCxcbiAgICAgIGFhYmJDb250YWN0Q2FsY3VsYXRpb24uZmluZEFhYmJOb3JtYWxGcm9tQ29udGFjdFBvaW50KTtcbn1cblxuLyoqXG4gKiBOT1RFOiBUaGlzIGltcGxlbWVudGF0aW9uIGNoZWF0cyBieSBjaGVja2luZyB3aGV0aGVyIHZlcnRpY2VzIGZyb20gb25lIHNoYXBlIGxpZSB3aXRoaW4gdGhlXG4gKiBvdGhlci4gRHVlIHRvIHRoZSB0dW5uZWxsaW5nIHByb2JsZW0sIGl0IGlzIHBvc3NpYmxlIHRoYXQgaW50ZXJzZWN0aW9uIG9jY3VycyB3aXRob3V0IGFueVxuICogdmVydGljZXMgbHlpbmcgd2l0aGluIHRoZSBvdGhlciBzaGFwZS4gSG93ZXZlciwgKEEpIHRoaXMgaXMgdW5saWtlbHksIGFuZCAoQikgd2UgYXJlIGlnbm9yaW5nIHRoZVxuICogdHVubmVsbGluZyBwcm9ibGVtIGZvciB0aGUgcmVzdCBvZiB0aGlzIGNvbGxpc2lvbiBzeXN0ZW0gYW55d2F5LlxuICpcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdE5vcm1hbCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge09iYn0gb2JiQVxuICogQHBhcmFtIHtPYmJ9IG9iYkJcbiAqL1xuZnVuY3Rpb24gb2JiVnNPYmIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBvYmJBLCBvYmJCKSB7XG4gIHJldHVybiBfb2JiVnNCb3hIZWxwZXIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBvYmJBLCBvYmJCLCBvYmJDb2xsaXNpb25EZXRlY3Rpb24ub2JiVnNQb2ludCxcbiAgICAgIGZpbmRPYmJOb3JtYWxGcm9tQ29udGFjdFBvaW50KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICogQHBhcmFtIHtPYmJ8QWFiYn0gb3RoZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG90aGVyVnNQb2ludENvbGxpc2lvbkRldGVjdGlvbkNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmaW5kT3RoZXJOb3JtYWxGcm9tQ29udGFjdFBvaW50XG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfb2JiVnNCb3hIZWxwZXIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBvYmIsIG90aGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyVnNQb2ludENvbGxpc2lvbkRldGVjdGlvbkNhbGxiYWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmRPdGhlck5vcm1hbEZyb21Db250YWN0UG9pbnQpIHtcbiAgLy8gQ2hlY2sgd2hldGhlciBhbnkgdmVydGljZXMgZnJvbSBBIGxpZSB3aXRoaW4gQidzIGJvdW5kcy5cbiAgaWYgKG9iYi5zb21lVmVydGV4KHZlcnRleCA9PiBvdGhlclZzUG9pbnRDb2xsaXNpb25EZXRlY3Rpb25DYWxsYmFjayhvdGhlciwgdmVydGV4KSxcbiAgICAgICAgICBjb250YWN0UG9pbnQpKSB7XG4gICAgZmluZE90aGVyTm9ybWFsRnJvbUNvbnRhY3RQb2ludChjb250YWN0Tm9ybWFsLCBjb250YWN0UG9pbnQsIG90aGVyKTtcbiAgICB2ZWMzLm5lZ2F0ZShjb250YWN0Tm9ybWFsLCBjb250YWN0Tm9ybWFsKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBDaGVjayB3aGV0aGVyIGFueSB2ZXJ0aWNlcyBmcm9tIEIgbGllIHdpdGhpbiBBJ3MgYm91bmRzLlxuICBpZiAob3RoZXIuc29tZVZlcnRleCh2ZXJ0ZXggPT4gb2JiQ29sbGlzaW9uRGV0ZWN0aW9uLm9iYlZzUG9pbnQob2JiLCB2ZXJ0ZXgpLCBjb250YWN0UG9pbnQpKSB7XG4gICAgZmluZE9iYk5vcm1hbEZyb21Db250YWN0UG9pbnQoY29udGFjdE5vcm1hbCwgY29udGFjdFBvaW50LCBvYmIpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFdlIGFzc3VtZSB0aGF0IGEgdmVydGV4LXRvLWZhY2UgY29sbGlzaW9uIHdvdWxkIGhhdmUgYmVlbiBkZXRlY3RlZCBieSBvbmUgb2YgdGhlIHR3byBhYm92ZVxuICAvLyBjaGVja3MuIEFueSBlZGdlLXRvLWVkZ2UgY29sbGlzaW9uIG11c3QgaW52b2x2ZSBib3RoIGFuIGVkZ2UgZnJvbSBBIHRocm91Z2ggYSBmYWNlIG9mIEIgYW5kXG4gIC8vIHZpY2UgdmVyc2EuIFNvIGl0IGlzIHN1ZmZpY2llbnQgdG8gb25seSBjaGVjayB0aGUgZWRnZXMgb2Ygb25lIGFuZCB0aGUgZmFjZXMgb2YgdGhlIG90aGVyLlxuICBvdGhlci5zb21lRWRnZShlZGdlID0+XG4gICAgICBvYmIuc29tZUZhY2UoZmFjZSA9PiBmaW5kUG9pQmV0d2VlblNlZ21lbnRBbmRQbGFuZVJlZ2lvbihjb250YWN0UG9pbnQsIGVkZ2UsIC4uLmZhY2UpKSk7XG4gIGZpbmRPYmJOb3JtYWxGcm9tQ29udGFjdFBvaW50KGNvbnRhY3ROb3JtYWwsIGNvbnRhY3RQb2ludCwgb2JiKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICogQHBhcmFtIHtDYXBzdWxlfSBjYXBzdWxlXG4gKi9cbmZ1bmN0aW9uIG9iYlZzQ2Fwc3VsZShjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIG9iYiwgY2Fwc3VsZSkge1xuICAvLyB0bXBWZWMxIGlzIHRoZSBwb2ludCBvbiB0aGUgY2Fwc3VsZSBzZWdtZW50IHRoYXQgaXMgY2xvc2VzdCB0byB0aGUgT0JCLlxuXG4gIC8vXG4gIC8vIENoZWNrIHRoZSBlZGdlcy5cbiAgLy9cblxuICBjb25zdCBzZWdtZW50ID0gbmV3IExpbmVTZWdtZW50KHZlYzMuY3JlYXRlKCksIHZlYzMuY3JlYXRlKCkpO1xuICBjb25zdCBzcXVhcmVkUmFkaXVzID0gY2Fwc3VsZS5yYWRpdXMgKiBjYXBzdWxlLnJhZGl1cztcbiAgY29uc3QgYXJlSW50ZXJzZWN0aW5nID0gb2JiLnNvbWVFZGdlKGVkZ2UgPT5cbiAgICAgIGZpbmRTcXVhcmVkRGlzdGFuY2VCZXR3ZWVuU2VnbWVudHMoY2Fwc3VsZS5zZWdtZW50LCBlZGdlKSA8IHNxdWFyZWRSYWRpdXMsIHNlZ21lbnQpO1xuXG4gIGlmIChhcmVJbnRlcnNlY3RpbmcpIHtcbiAgICBmaW5kQ2xvc2VzdFBvaW50c0Zyb21TZWdtZW50VG9TZWdtZW50KHRtcFZlYzEsIGNvbnRhY3RQb2ludCwgY2Fwc3VsZS5zZWdtZW50LCBzZWdtZW50KTtcbiAgICB2ZWMzLnN1YnRyYWN0KGNvbnRhY3ROb3JtYWwsIHRtcFZlYzEsIGNvbnRhY3RQb2ludCk7XG4gICAgdmVjMy5ub3JtYWxpemUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy9cbiAgLy8gQ2hlY2sgdGhlIGZhY2VzLlxuICAvL1xuXG4gIG9iYi5zb21lUHVzaGVkT3V0RmFjZShmYWNlID0+XG4gICAgICBmaW5kUG9pQmV0d2VlblNlZ21lbnRBbmRQbGFuZVJlZ2lvbih0bXBWZWMxLCBjYXBzdWxlLnNlZ21lbnQsIC4uLmZhY2UpLCBjYXBzdWxlLnJhZGl1cyk7XG5cbiAgZmluZE9iYk5vcm1hbEZyb21Db250YWN0UG9pbnQoY29udGFjdE5vcm1hbCwgdG1wVmVjMSwgb2JiKTtcblxuICAvLyBOT1RFOiBUaGlzIGFzc3VtZXMgdGhhdCB0aGUgYW5nbGUgYmV0d2VlbiB0aGUgY2Fwc3VsZSBzZWdtZW50IGFuZCB0aGUgZmFjZSBwbGFuZSBpcyBub3Qgb2JsaXF1ZVxuICAvLyBhbmQgdGhhdCB0aGUgZGVwdGggb2YgcGVuZXRyYXRpb24gaXMgc2hhbGxvdy4gV2hlbiBib3RoIG9mIHRoZXNlIGNvbmRpdGlvbnMgYXJlIG5vdCB0cnVlLCB0aGVcbiAgLy8gY29udGFjdCBwb2ludCB3aWxsIGJlIG9mZnNldCBmcm9tIHRoZSBpbnRlcnNlY3Rpb24gcG9pbnQgb24gdGhlIHB1c2hlZC1vdXQgZmFjZS5cbiAgdmVjMy5zY2FsZUFuZEFkZChjb250YWN0UG9pbnQsIHRtcFZlYzEsIGNvbnRhY3ROb3JtYWwsIC1jYXBzdWxlLnJhZGl1cyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50XG4gKiBAcGFyYW0ge09iYn0gb2JiXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBmaW5kT2JiTm9ybWFsRnJvbUNvbnRhY3RQb2ludChjb250YWN0Tm9ybWFsLCBjb250YWN0UG9pbnQsIG9iYikge1xuICAvLyBDYWxjdWxhdGUgdGhlIGRpc3BsYWNlbWVudCBhbG9uZyBlYWNoIGF4aXMuXG4gIGNvbnN0IHByb2plY3Rpb25zID0gW107XG4gIHZlYzMuc3VidHJhY3QodG1wVmVjMSwgY29udGFjdFBvaW50LCBvYmIuY2VudGVyT2ZWb2x1bWUpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIHByb2plY3Rpb25zW2ldID0gdmVjMy5kb3Qob2JiLmF4ZXNbaV0sIHRtcFZlYzEpO1xuICB9XG5cbiAgLy8gRGV0ZXJtaW5lIHdoaWNoIGZhY2UgdGhlIG5vcm1hbCBpcyBwb2ludGluZyBhd2F5IGZyb20uXG4gIHZlYzMuc2V0KGNvbnRhY3ROb3JtYWwsIDAsIDAsIDApO1xuICBjb25zdCB4RGlzdGFuY2VGcm9tRmFjZSA9IG9iYi5oYWxmU2lkZUxlbmd0aHNbMF0gLSBNYXRoLmFicyhwcm9qZWN0aW9uc1swXSk7XG4gIGNvbnN0IHlEaXN0YW5jZUZyb21GYWNlID0gb2JiLmhhbGZTaWRlTGVuZ3Roc1sxXSAtIE1hdGguYWJzKHByb2plY3Rpb25zWzFdKTtcbiAgY29uc3QgekRpc3RhbmNlRnJvbUZhY2UgPSBvYmIuaGFsZlNpZGVMZW5ndGhzWzJdIC0gTWF0aC5hYnMocHJvamVjdGlvbnNbMl0pO1xuICAvLyBBc3N1bWUgdGhhdCB0aGUgcG9pbnQgaXMgY29udGFjdGluZyB3aGljaGV2ZXIgZmFjZSBpdCdzIGNsb3Nlc3QgdG8uXG4gIGlmICh4RGlzdGFuY2VGcm9tRmFjZSA8PSB5RGlzdGFuY2VGcm9tRmFjZSkge1xuICAgIGlmICh4RGlzdGFuY2VGcm9tRmFjZSA8PSB6RGlzdGFuY2VGcm9tRmFjZSkge1xuICAgICAgY29udGFjdE5vcm1hbFswXSA9IHByb2plY3Rpb25zWzBdID4gMCA/IDEgOiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFjdE5vcm1hbFsyXSA9IHByb2plY3Rpb25zWzJdID4gMCA/IDEgOiAtMTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHlEaXN0YW5jZUZyb21GYWNlIDw9IHpEaXN0YW5jZUZyb21GYWNlKSB7XG4gICAgICBjb250YWN0Tm9ybWFsWzFdID0gcHJvamVjdGlvbnNbMV0gPiAwID8gMSA6IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWN0Tm9ybWFsWzJdID0gcHJvamVjdGlvbnNbMl0gPiAwID8gMSA6IC0xO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFwcGx5IHRoZSBPQkIncyBvcmllbnRhdGlvbiB0byB0aGUgbm9ybWFsLlxuICB2ZWMzLnRyYW5zZm9ybVF1YXQoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCwgb2JiLm9yaWVudGF0aW9uKTtcbn1cblxuZXhwb3J0IHtcbiAgb2JiVnNQb2ludCxcbiAgb2JiVnNTcGhlcmUsXG4gIG9iYlZzQWFiYixcbiAgb2JiVnNPYmIsXG4gIG9iYlZzQ2Fwc3VsZSxcbiAgZmluZE9iYk5vcm1hbEZyb21Db250YWN0UG9pbnQsXG59O1xuIiwiLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIHV0aWxpdHkgbWV0aG9kcyBmb3IgY2FsY3VsYXRpbmcgYSBjb250YWN0IHBvaW50IGJldHdlZW4gc3BoZXJlcyBhbmQgb3RoZXJcbiAqIHNoYXBlcy5cbiAqXG4gKiAtIEVhY2ggb2YgdGhlc2UgZnVuY3Rpb25zIGFzc3VtZXMgdGhhdCB0aGUgb2JqZWN0cyBhcmUgYWN0dWFsbHkgY29sbGlkaW5nLlxuICogLSBUaGUgcmVzdWx0aW5nIGNvbnRhY3QgcG9pbnQgbWF5IGJlIGFueXdoZXJlIHdpdGhpbiB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSB0d28gb2JqZWN0cy5cbiAqL1xuXG5pbXBvcnQge2ZpbmRDbG9zZXN0UG9pbnRGcm9tQWFiYlN1cmZhY2VUb1BvaW50fSBmcm9tICcuLi8uLi8uLi91dGlsJztcbmltcG9ydCB7ZmluZEFhYmJOb3JtYWxGcm9tQ29udGFjdFBvaW50fSBmcm9tICcuL2FhYmItY29udGFjdC1jYWxjdWxhdGlvbic7XG5pbXBvcnQgKiBhcyBvYmJDb250YWN0Q2FsY3VsYXRpb24gZnJvbSAnLi9vYmItY29udGFjdC1jYWxjdWxhdGlvbic7XG5pbXBvcnQgKiBhcyBjYXBzdWxlQ29udGFjdENhbGN1bGF0aW9uIGZyb20gJy4vY2Fwc3VsZS1jb250YWN0LWNhbGN1bGF0aW9uJztcblxuLyoqXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3ROb3JtYWwgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZVxuICogQHBhcmFtIHt2ZWMzfSBwb2ludFxuICovXG5mdW5jdGlvbiBzcGhlcmVWc1BvaW50KGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgc3BoZXJlLCBwb2ludCkge1xuICB2ZWMzLmNvcHkoY29udGFjdFBvaW50LCBwb2ludCk7XG4gIC8vIEFzc3VtZSB0aGF0IHRoZSBwb2ludCBpcyBjb250YWN0aW5nIHRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSBzdXJmYWNlIG9mIHRoZSBzcGhlcmUuXG4gIHZlYzMuc3VidHJhY3QoY29udGFjdE5vcm1hbCwgcG9pbnQsIHNwaGVyZS5jZW50ZXJPZlZvbHVtZSk7XG4gIHZlYzMubm9ybWFsaXplKGNvbnRhY3ROb3JtYWwsIGNvbnRhY3ROb3JtYWwpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdE5vcm1hbCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlQVxuICogQHBhcmFtIHtTcGhlcmV9IHNwaGVyZUJcbiAqL1xuZnVuY3Rpb24gc3BoZXJlVnNTcGhlcmUoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBzcGhlcmVBLCBzcGhlcmVCKSB7XG4gIHZlYzMuc3VidHJhY3QoY29udGFjdE5vcm1hbCwgc3BoZXJlQi5jZW50ZXJPZlZvbHVtZSwgc3BoZXJlQS5jZW50ZXJPZlZvbHVtZSk7XG4gIHZlYzMubm9ybWFsaXplKGNvbnRhY3ROb3JtYWwsIGNvbnRhY3ROb3JtYWwpO1xuICAvLyBUaGUgcG9pbnQgb24gdGhlIHN1cmZhY2Ugb2Ygc3BoZXJlIEEgdGhhdCBpcyBjbG9zZXN0IHRvIHRoZSBjZW50ZXIgb2Ygc3BoZXJlIEIuXG4gIHZlYzMuc2NhbGVBbmRBZGQoY29udGFjdFBvaW50LCBzcGhlcmVBLmNlbnRlck9mVm9sdW1lLCBjb250YWN0Tm9ybWFsLCBzcGhlcmVBLnJhZGl1cyk7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHN1cmZhY2Ugb2YgdGhlIEFBQkIgdG8gdGhlIHNwaGVyZSBjZW50ZXIuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmVcbiAqIEBwYXJhbSB7QWFiYn0gYWFiYlxuICovXG5mdW5jdGlvbiBzcGhlcmVWc0FhYmIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBzcGhlcmUsIGFhYmIpIHtcbiAgZmluZENsb3Nlc3RQb2ludEZyb21BYWJiU3VyZmFjZVRvUG9pbnQoY29udGFjdFBvaW50LCBhYWJiLCBzcGhlcmUuY2VudGVyT2ZWb2x1bWUpO1xuICBmaW5kQWFiYk5vcm1hbEZyb21Db250YWN0UG9pbnQoY29udGFjdE5vcm1hbCwgY29udGFjdFBvaW50LCBhYWJiKTtcbiAgdmVjMy5uZWdhdGUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0UG9pbnQgT3V0cHV0IHBhcmFtLlxuICogQHBhcmFtIHt2ZWMzfSBjb250YWN0Tm9ybWFsIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7U3BoZXJlfSBzcGhlcmVcbiAqIEBwYXJhbSB7T2JifSBvYmJcbiAqL1xuZnVuY3Rpb24gc3BoZXJlVnNPYmIoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBzcGhlcmUsIG9iYikge1xuICBvYmJDb250YWN0Q2FsY3VsYXRpb24ub2JiVnNTcGhlcmUoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBvYmIsIHNwaGVyZSk7XG4gIHZlYzMubmVnYXRlKGNvbnRhY3ROb3JtYWwsIGNvbnRhY3ROb3JtYWwpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdE5vcm1hbCBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge1NwaGVyZX0gc3BoZXJlXG4gKiBAcGFyYW0ge0NhcHN1bGV9IGNhcHN1bGVcbiAqL1xuZnVuY3Rpb24gc3BoZXJlVnNDYXBzdWxlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgc3BoZXJlLCBjYXBzdWxlKSB7XG4gIGNhcHN1bGVDb250YWN0Q2FsY3VsYXRpb24uY2Fwc3VsZVZzU3BoZXJlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgY2Fwc3VsZSwgc3BoZXJlKTtcbiAgdmVjMy5uZWdhdGUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG59XG5cbmV4cG9ydCB7XG4gIHNwaGVyZVZzUG9pbnQsXG4gIHNwaGVyZVZzU3BoZXJlLFxuICBzcGhlcmVWc0FhYmIsXG4gIHNwaGVyZVZzT2JiLFxuICBzcGhlcmVWc0NhcHN1bGUsXG59O1xuIiwiZXhwb3J0ICogZnJvbSAnLi9jb2xsaWRhYmxlcyc7XG5leHBvcnQgKiBmcm9tICcuL2NvbGxpc2lvbi1kZXRlY3Rpb24nO1xuZXhwb3J0ICogZnJvbSAnLi9jb250YWN0LWNhbGN1bGF0aW9uJztcblxuZXhwb3J0ICogZnJvbSAnLi9zcmMvY29sbGlkYWJsZS1mYWN0b3JpZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvY29sbGlkYWJsZS1waHlzaWNzLWpvYic7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9jb2xsaWRhYmxlLXN0b3JlJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2NvbGxpc2lvbi1oYW5kbGVyJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2NvbGxpc2lvbi11dGlscyc7XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgYSBzZXQgb2YgZmFjdG9yeSBmdW5jdGlvbnMgZm9yIGNyZWF0aW5nIENvbGxpZGFibGUgaW5zdGFuY2VzLlxuICovXG5cbmltcG9ydCB7XG4gIENhcHN1bGUsXG4gIE9iYixcbiAgU3BoZXJlXG59IGZyb20gJy4uL2NvbGxpZGFibGVzJztcbmltcG9ydCB7X2dlb21ldHJ5fSBmcm9tICcuLi8uLi91dGlsJztcblxuLyoqXG4gKiBAcGFyYW0ge0NvbGxpZGFibGVTaGFwZUNvbmZpZ30gcGFyYW1zXG4gKiBAcGFyYW0ge0NvbGxpZGFibGVQaHlzaWNzSm9ifSBbcGh5c2ljc0pvYl1cbiAqIEByZXR1cm5zIHtDb2xsaWRhYmxlfVxuICovXG5mdW5jdGlvbiBjcmVhdGVDb2xsaWRhYmxlRnJvbVJlbmRlcmFibGVTaGFwZShwYXJhbXMsIHBoeXNpY3NKb2IpIHtcbiAgcmV0dXJuIF9jb2xsaWRhYmxlQ3JlYXRvcnNbcGFyYW1zLmNvbGxpZGFibGVTaGFwZUlkXShwYXJhbXMsIHBoeXNpY3NKb2IpO1xufVxuXG4vKipcbiAqIFRoaXMgYXNzdW1lcyB0aGUgYmFzZSBSZW5kZXJhYmxlU2hhcGUgaGFzIGEgc2lkZSBsZW5ndGggb2Ygb25lIHVuaXQuXG4gKlxuICogQHBhcmFtIHtDb2xsaWRhYmxlU2hhcGVDb25maWd9IHBhcmFtc1xuICogQHBhcmFtIHtDb2xsaWRhYmxlUGh5c2ljc0pvYn0gW3BoeXNpY3NKb2JdXG4gKiBAcmV0dXJucyB7Q29sbGlkYWJsZX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlT2JiRnJvbVJlbmRlcmFibGVTaGFwZShwYXJhbXMsIHBoeXNpY3NKb2IpIHtcbiAgY29uc3QgaGFsZlJhbmdlWCA9IHBhcmFtcy5zY2FsZVswXSAvIDI7XG4gIGNvbnN0IGhhbGZSYW5nZVkgPSBwYXJhbXMuc2NhbGVbMV0gLyAyO1xuICBjb25zdCBoYWxmUmFuZ2VaID0gcGFyYW1zLnNjYWxlWzJdIC8gMjtcbiAgcmV0dXJuIG5ldyBPYmIoaGFsZlJhbmdlWCwgaGFsZlJhbmdlWSwgaGFsZlJhbmdlWiwgcGFyYW1zLmlzU3RhdGlvbmFyeSwgcGh5c2ljc0pvYik7XG59XG5cbi8qKlxuICogVGhpcyBhc3N1bWVzIHRoZSBiYXNlIFJlbmRlcmFibGVTaGFwZSBoYXMgYSBcInJhZGl1c1wiIG9mIG9uZSB1bml0LlxuICpcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZVNoYXBlQ29uZmlnfSBwYXJhbXNcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZVBoeXNpY3NKb2J9IFtwaHlzaWNzSm9iXVxuICogQHJldHVybnMge0NvbGxpZGFibGV9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNwaGVyZUZyb21SZW5kZXJhYmxlU2hhcGUocGFyYW1zLCBwaHlzaWNzSm9iKSB7XG4gIGNvbnN0IHJhZGl1cyA9IHBhcmFtcy5yYWRpdXMgfHwgdmVjMy5sZW5ndGgocGFyYW1zLnNjYWxlKSAvIE1hdGguc3FydCgzKTtcbiAgcmV0dXJuIG5ldyBTcGhlcmUoMCwgMCwgMCwgcmFkaXVzLCBwYXJhbXMuaXNTdGF0aW9uYXJ5LCBwaHlzaWNzSm9iKTtcbn1cblxuLyoqXG4gKiBUaGUgcmFkaXVzIG9mIHRoZSBjcmVhdGVkIGNhcHN1bGUgd2lsbCBiZSBhbiBhdmVyYWdlIGZyb20gdGhlIHR3byBzaG9ydGVzdCBzaWRlcy5cbiAqXG4gKiBUaGVyZSBhcmUgdHdvIG1vZGVzOiBlaXRoZXIgd2UgdXNlIHNjYWxlLCBvciB3ZSB1c2UgcmFkaXVzIGFuZCBjYXBzdWxlRW5kUG9pbnRzRGlzdGFuY2UuXG4gKlxuICogQHBhcmFtIHtDb2xsaWRhYmxlU2hhcGVDb25maWd9IHBhcmFtc1xuICogQHBhcmFtIHtDb2xsaWRhYmxlUGh5c2ljc0pvYn0gW3BoeXNpY3NKb2JdXG4gKiBAcmV0dXJucyB7Q29sbGlkYWJsZX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2Fwc3VsZUZyb21SZW5kZXJhYmxlU2hhcGUocGFyYW1zLCBwaHlzaWNzSm9iKSB7XG4gIGNvbnN0IHNjYWxlID0gcGFyYW1zLnNjYWxlO1xuICBjb25zdCBjYXBzdWxlRW5kUG9pbnRzRGlzdGFuY2UgPSBwYXJhbXMuY2Fwc3VsZUVuZFBvaW50c0Rpc3RhbmNlO1xuICBjb25zdCBpc1N0YXRpb25hcnkgPSBwYXJhbXMuaXNTdGF0aW9uYXJ5O1xuICBsZXQgcmFkaXVzID0gcGFyYW1zLnJhZGl1cztcblxuICBsZXQgaGFsZkRpc3RhbmNlO1xuXG4gIC8vIFRoZXJlIGFyZSB0d28gbW9kZXM6IGVpdGhlciB3ZSB1c2Ugc2NhbGUsIG9yIHdlIHVzZSByYWRpdXMgYW5kIGNhcHN1bGVFbmRQb2ludHNEaXN0YW5jZS5cbiAgaWYgKHR5cGVvZiByYWRpdXMgPT09ICdudW1iZXInICYmIHR5cGVvZiBjYXBzdWxlRW5kUG9pbnRzRGlzdGFuY2UgPT09ICdudW1iZXInKSB7XG4gICAgaGFsZkRpc3RhbmNlID0gY2Fwc3VsZUVuZFBvaW50c0Rpc3RhbmNlIC8gMjtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBjb3B5ID0gdmVjMy5jbG9uZShzY2FsZSk7XG4gICAgY29weS5zb3J0KCk7XG5cbiAgICBjb25zdCBsZW5ndGggPSBjb3B5WzJdO1xuICAgIHJhZGl1cyA9IChjb3B5WzBdICsgY29weVsxXSkgLyAyO1xuICAgIGhhbGZEaXN0YW5jZSA9IGxlbmd0aCAvIDIgLSByYWRpdXM7XG4gIH1cblxuICBjb25zdCBvcmllbnRhdGlvbiA9IHF1YXQuY3JlYXRlKCk7XG4gIGlmIChzY2FsZVswXSA+IHNjYWxlWzFdKSB7XG4gICAgaWYgKHNjYWxlWzBdID4gc2NhbGVbMl0pIHtcbiAgICAgIHZlYzMucm90YXRlWShvcmllbnRhdGlvbiwgb3JpZW50YXRpb24sIF9nZW9tZXRyeS5IQUxGX1BJKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRG8gbm90aGluZzsgdGhlIGNhcHN1bGUgZGVmYXVsdHMgdG8gYmVpbmcgYWxpZ25lZCB3aXRoIHRoZSB6LWF4aXMuXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChzY2FsZVsxXSA+IHNjYWxlWzJdKSB7XG4gICAgICB2ZWMzLnJvdGF0ZVgob3JpZW50YXRpb24sIG9yaWVudGF0aW9uLCAtX2dlb21ldHJ5LkhBTEZfUEkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBEbyBub3RoaW5nOyB0aGUgY2Fwc3VsZSBkZWZhdWx0cyB0byBiZWluZyBhbGlnbmVkIHdpdGggdGhlIHotYXhpcy5cbiAgICB9XG4gIH1cblxuICBjb25zdCBjYXBzdWxlID0gbmV3IENhcHN1bGUoaGFsZkRpc3RhbmNlLCByYWRpdXMsIGlzU3RhdGlvbmFyeSwgcGh5c2ljc0pvYik7XG4gIGNhcHN1bGUub3JpZW50YXRpb24gPSBvcmllbnRhdGlvbjtcblxuICByZXR1cm4gY2Fwc3VsZTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NvbGxpZGFibGVTaGFwZUNvbmZpZ30gcGFyYW1zXG4gKiBAcGFyYW0ge0NvbGxpZGFibGVQaHlzaWNzSm9ifSBbcGh5c2ljc0pvYl1cbiAqIEByZXR1cm5zIHtDb2xsaWRhYmxlfVxuICovXG5mdW5jdGlvbiBjcmVhdGVTcGhlcmVPckNhcHN1bGVGcm9tUmVuZGVyYWJsZVNoYXBlKHBhcmFtcywgcGh5c2ljc0pvYikge1xuICBjb25zdCBzY2FsZSA9IHBhcmFtcy5zY2FsZTtcbiAgY29uc3QgcmFkaXVzID0gcGFyYW1zLnJhZGl1cztcbiAgY29uc3QgY2Fwc3VsZUVuZFBvaW50c0Rpc3RhbmNlID0gcGFyYW1zLmNhcHN1bGVFbmRQb2ludHNEaXN0YW5jZTtcblxuICBjb25zdCBoYWxmTGVuZ3RoWCA9IHNjYWxlWzBdICogcmFkaXVzO1xuICBjb25zdCBoYWxmTGVuZ3RoWSA9IHNjYWxlWzFdICogcmFkaXVzO1xuICBjb25zdCBoYWxmTGVuZ3RoWiA9IHNjYWxlWzJdICogKHJhZGl1cyArIGNhcHN1bGVFbmRQb2ludHNEaXN0YW5jZSkgLyAyO1xuXG4gIGNvbnN0IG1pbkxlbmd0aCA9IE1hdGgubWluKE1hdGgubWluKGhhbGZMZW5ndGhYLCBoYWxmTGVuZ3RoWSksIGhhbGZMZW5ndGhaKTtcbiAgY29uc3QgbWF4TGVuZ3RoID0gTWF0aC5tYXgoTWF0aC5tYXgoaGFsZkxlbmd0aFgsIGhhbGZMZW5ndGhZKSwgaGFsZkxlbmd0aFopO1xuXG4gIGlmIChtYXhMZW5ndGggLyBtaW5MZW5ndGggPj0gX1NQSEVSRV9WU19DQVBTVUxFX0FTUEVDVF9SQVRJT19USFJFU0hPTEQpIHtcbiAgICByZXR1cm4gY3JlYXRlQ2Fwc3VsZUZyb21SZW5kZXJhYmxlU2hhcGUocGFyYW1zLCBwaHlzaWNzSm9iKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlU3BoZXJlRnJvbVJlbmRlcmFibGVTaGFwZShwYXJhbXMsIHBoeXNpY3NKb2IpO1xuICB9XG59XG5cbmNvbnN0IF9TUEhFUkVfVlNfQ0FQU1VMRV9BU1BFQ1RfUkFUSU9fVEhSRVNIT0xEID0gMjtcblxuY29uc3QgX2NvbGxpZGFibGVDcmVhdG9ycyA9IHtcbiAgJ0NVQkUnOiBjcmVhdGVPYmJGcm9tUmVuZGVyYWJsZVNoYXBlLFxuICAnU1BIRVJFX09SX0NBUFNVTEUnOiBjcmVhdGVTcGhlcmVPckNhcHN1bGVGcm9tUmVuZGVyYWJsZVNoYXBlLFxuICAnU1BIRVJFJzogY3JlYXRlU3BoZXJlRnJvbVJlbmRlcmFibGVTaGFwZSxcbiAgJ0NBUFNVTEUnOiBjcmVhdGVDYXBzdWxlRnJvbVJlbmRlcmFibGVTaGFwZSxcbn07XG5cbmV4cG9ydCB7XG4gIGNyZWF0ZUNhcHN1bGVGcm9tUmVuZGVyYWJsZVNoYXBlLFxuICBjcmVhdGVDb2xsaWRhYmxlRnJvbVJlbmRlcmFibGVTaGFwZSxcbiAgY3JlYXRlT2JiRnJvbVJlbmRlcmFibGVTaGFwZSxcbiAgY3JlYXRlU3BoZXJlRnJvbVJlbmRlcmFibGVTaGFwZSxcbiAgY3JlYXRlU3BoZXJlT3JDYXBzdWxlRnJvbVJlbmRlcmFibGVTaGFwZSxcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQ29sbGlkYWJsZVNoYXBlQ29uZmlnXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29sbGlkYWJsZVNoYXBlSWQgVGhlIElEIG9mIHRoZSB0eXBlIG9mIGNvbGxpZGFibGUgc2hhcGUuXG4gKiBAcHJvcGVydHkge3ZlYzN9IFtzY2FsZV1cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2lzU3RhdGlvbmFyeT1mYWxzZV0gV2hldGhlciB0aGUgY29sbGlkYWJsZSBpcyBmaXhlZCBpbiBwbGFjZS5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtDb2xsaWRhYmxlU2hhcGVDb25maWd9IFNwaGVyaWNhbENvbGxpZGFibGVTaGFwZVBhcmFtc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHJhZGl1c1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge1NwaGVyaWNhbENvbGxpZGFibGVTaGFwZVBhcmFtc30gQ2Fwc3VsZUNvbGxpZGFibGVTaGFwZVBhcmFtc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGNhcHN1bGVFbmRQb2ludHNEaXN0YW5jZSBUaGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgY2VudGVycyBvZiB0aGUgc3BoZXJlcyBvbiBlaXRoZXIgZW5kXG4gKiBvZiB0aGUgY2Fwc3VsZS5cbiAqL1xuIiwiaW1wb3J0IHtjcmVhdGVDb2xsaWRhYmxlRnJvbVJlbmRlcmFibGVTaGFwZX0gZnJvbSAnLi9jb2xsaWRhYmxlLWZhY3Rvcmllcyc7XG5pbXBvcnQge2NvbGxpZGFibGVTdG9yZX0gZnJvbSAnLi9jb2xsaWRhYmxlLXN0b3JlJztcbmltcG9ydCB7UGh5c2ljc0pvYn0gZnJvbSAnLi4vLi4vc3JjL3BoeXNpY3Mtam9iJztcbmltcG9ydCB7Y3JlYXRlRm9yQ29sbGlkYWJsZX0gZnJvbSAnLi4vLi4vdXRpbCc7XG5cbi8qKlxuICogQSBDb2xsaWRhYmxlUGh5c2ljc0pvYiBleHRlbmRzIHRoZSBzdGFuZGFyZCBQaHlzaWNzSm9iIHdpdGggYSBjb2xsaWRhYmxlIGdlb21ldHJ5LlxuICovXG5jbGFzcyBDb2xsaWRhYmxlUGh5c2ljc0pvYiBleHRlbmRzIFBoeXNpY3NKb2Ige1xuICAvKipcbiAgICogQHBhcmFtIHtDb2xsaWRhYmxlU2hhcGVDb25maWd9IGNvbGxpZGFibGVQYXJhbXNcbiAgICogQHBhcmFtIHtQaHlzaWNzU3RhdGV9IHN0YXRlXG4gICAqIEBwYXJhbSB7QXJyYXkuPEZvcmNlQXBwbGllcj59IGZvcmNlQXBwbGllcnNcbiAgICogQHBhcmFtIHtPYmplY3R9IGNvbnRyb2xsZXJcbiAgICogQHBhcmFtIHtDb2xsaXNpb25IYW5kbGVyfSBjb2xsaXNpb25IYW5kbGVyXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb2xsaWRhYmxlUGFyYW1zLCBzdGF0ZSwgZm9yY2VBcHBsaWVycywgY29udHJvbGxlciwgY29sbGlzaW9uSGFuZGxlcikge1xuICAgIHN1cGVyKGZvcmNlQXBwbGllcnMsIHN0YXRlKTtcblxuICAgIGNvbGxpZGFibGVQYXJhbXMuc2NhbGUgPSBjb2xsaWRhYmxlUGFyYW1zLnNjYWxlIHx8IHZlYzMuZnJvbVZhbHVlcygxLCAxLCAxKTtcbiAgICB0aGlzLmNvbGxpZGFibGUgPSBjcmVhdGVDb2xsaWRhYmxlRnJvbVJlbmRlcmFibGVTaGFwZShjb2xsaWRhYmxlUGFyYW1zLCB0aGlzKTtcbiAgICB0aGlzLmN1cnJlbnRTdGF0ZS51bnJvdGF0ZWRJbmVydGlhVGVuc29yID1cbiAgICAgICAgY3JlYXRlRm9yQ29sbGlkYWJsZSh0aGlzLmNvbGxpZGFibGUsIHRoaXMuY3VycmVudFN0YXRlLm1hc3MpO1xuICAgIHRoaXMuY3VycmVudFN0YXRlLnVwZGF0ZURlcGVuZGVudEZpZWxkcygpO1xuICAgIHRoaXMuaXNBdFJlc3QgPSBmYWxzZTtcbiAgICB0aGlzLmNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xuICAgIHRoaXMuX2NvbGxpc2lvbkhhbmRsZXIgPSBjb2xsaXNpb25IYW5kbGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Rm9yY2VBcHBsaWVyfSBmb3JjZUFwcGxpZXJcbiAgICovXG4gIGFkZEZvcmNlQXBwbGllcihmb3JjZUFwcGxpZXIpIHtcbiAgICBzdXBlci5hZGRGb3JjZUFwcGxpZXIoZm9yY2VBcHBsaWVyKTtcbiAgICB0aGlzLmlzQXRSZXN0ID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtGb3JjZUFwcGxpZXJ9IGZvcmNlQXBwbGllclxuICAgKi9cbiAgcmVtb3ZlRm9yY2VBcHBsaWVyKGZvcmNlQXBwbGllcikge1xuICAgIHN1cGVyLnJlbW92ZUZvcmNlQXBwbGllcihmb3JjZUFwcGxpZXIpO1xuICAgIHRoaXMuaXNBdFJlc3QgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGNhbGxiYWNrIGlzIHRyaWdnZXJlZCBpbiByZXNwb25zZSB0byBhIGNvbGxpc2lvbi5cbiAgICpcbiAgICogQHBhcmFtIHtDb2xsaXNpb259IGNvbGxpc2lvblxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGlzIG5lZWRzIHRoZSBzdGFuZGFyZCBjb2xsaXNpb24gcmVzdGl0dXRpb24gdG8gcHJvY2VlZC5cbiAgICovXG4gIGhhbmRsZUNvbGxpc2lvbihjb2xsaXNpb24pIHtcbiAgICByZXR1cm4gdGhpcy5fY29sbGlzaW9uSGFuZGxlcihjb2xsaXNpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnRUaW1lXVxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0KHN0YXJ0VGltZSkge1xuICAgIHN1cGVyLnN0YXJ0KHN0YXJ0VGltZSk7XG4gICAgY29sbGlkYWJsZVN0b3JlLnJlZ2lzdGVyQ29sbGlkYWJsZSh0aGlzLmNvbGxpZGFibGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZmluaXNoKCkge1xuICAgIHN1cGVyLmZpbmlzaCgpO1xuICAgIGNvbGxpZGFibGVTdG9yZS51bnJlZ2lzdGVyQ29sbGlkYWJsZSh0aGlzLmNvbGxpZGFibGUpO1xuICB9XG5cbiAgLyoqIEByZXR1cm5zIHt2ZWMzfSAqL1xuICBnZXQgcG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFN0YXRlLnBvc2l0aW9uO1xuICB9XG5cbiAgLyoqIEBwYXJhbSB7dmVjM30gdmFsdWUgKi9cbiAgc2V0IHBvc2l0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5jdXJyZW50U3RhdGUucG9zaXRpb24gPSB2ZWMzLmNsb25lKHZhbHVlKTtcbiAgICB0aGlzLmNvbGxpZGFibGUucG9zaXRpb24gPSB2ZWMzLmNsb25lKHZhbHVlKTtcbiAgfVxufVxuXG5leHBvcnQge0NvbGxpZGFibGVQaHlzaWNzSm9ifTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7RnVuY3Rpb259IENvbGxpc2lvbkhhbmRsZXJcbiAqIEBwYXJhbSB7Q29sbGlzaW9ufSBjb2xsaXNpb25cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoaXMgbmVlZHMgdGhlIHN0YW5kYXJkIGNvbGxpc2lvbiByZXN0aXR1dGlvbiB0byBwcm9jZWVkLlxuICovXG4iLCJpbXBvcnQge2RldGVjdEJvdW5kaW5nVm9sdW1lSW50ZXJzZWN0aW9ufSBmcm9tICcuL2NvbGxpc2lvbi11dGlscyc7XG5cbi8vIFRPRE86IEltcGxlbWVudCBzb21lIGZvcm0gb2YgYm91bmRpbmcgdm9sdW1lIGhpZXJhcmNoeSB0byBtYWtlIHNlYXJjaGluZyBmb3IgcG90ZW50aWFsIGNvbGxpc2lvbnNcbi8vIG1vcmUgZWZmaWNpZW50LlxuXG4vKipcbiAqIFRoaXMgY2xhc3MgcmVnaXN0ZXJzIGFuZCByZXRyaWV2ZXMgYWxsIENvbGxpZGFibGVzIHdpdGhpbiBhIHNjZW5lLlxuICovXG5jbGFzcyBDb2xsaWRhYmxlU3RvcmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9jb2xsaWRhYmxlcyA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIENhY2hlcyB0aGUgZ2l2ZW4gcHJvZ3JhbSB3cmFwcGVyLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBpZGVtcG90ZW50OyBhIGdpdmVuIHByb2dyYW0gd2lsbCBvbmx5IGJlIGNhY2hlZCBvbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbGxpZGFibGV9IGNvbGxpZGFibGVcbiAgICovXG4gIHJlZ2lzdGVyQ29sbGlkYWJsZShjb2xsaWRhYmxlKSB7XG4gICAgdGhpcy5fY29sbGlkYWJsZXMucHVzaChjb2xsaWRhYmxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0NvbGxpZGFibGV9IGNvbGxpZGFibGVcbiAgICovXG4gIHVucmVnaXN0ZXJDb2xsaWRhYmxlKGNvbGxpZGFibGUpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuX2NvbGxpZGFibGVzLmluZGV4T2YoY29sbGlkYWJsZSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHRoaXMuX2NvbGxpZGFibGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29sbGlkYWJsZX0gY29sbGlkYWJsZVxuICAgKiBAcmV0dXJucyB7QXJyYXkuPENvbGxpZGFibGU+fVxuICAgKi9cbiAgZ2V0UG9zc2libGVDb2xsaXNpb25zRm9yQ29sbGlkYWJsZShjb2xsaWRhYmxlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbGxpZGFibGVzLmZpbHRlcihvdGhlciA9PlxuICAgICAgY29sbGlkYWJsZSAhPT0gb3RoZXIgJiZcbiAgICAgIGRldGVjdEJvdW5kaW5nVm9sdW1lSW50ZXJzZWN0aW9uKGNvbGxpZGFibGUsIG90aGVyKSk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge0FycmF5LjxDb2xsaXNpb24+fVxuICAgKi9cbiAgZ2V0UG9zc2libGVDb2xsaXNpb25zRm9yQWxsQ29sbGlkYWJsZXMoKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGNvdW50ID0gdGhpcy5fY29sbGlkYWJsZXMubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgY29uc3QgY29sbGlkYWJsZUEgPSB0aGlzLl9jb2xsaWRhYmxlc1tpXTtcbiAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgICAgY29uc3QgY29sbGlkYWJsZUIgPSB0aGlzLl9jb2xsaWRhYmxlc1tqXTtcbiAgICAgICAgaWYgKGRldGVjdEJvdW5kaW5nVm9sdW1lSW50ZXJzZWN0aW9uKGNvbGxpZGFibGVBLCBjb2xsaWRhYmxlQikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh7Y29sbGlkYWJsZUE6IGNvbGxpZGFibGVBLCBjb2xsaWRhYmxlQjogY29sbGlkYWJsZUJ9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBmb3JFYWNoKGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fY29sbGlkYWJsZXMuZm9yRWFjaChjYWxsYmFjayk7XG4gIH1cbn1cblxuY29uc3QgY29sbGlkYWJsZVN0b3JlID0gbmV3IENvbGxpZGFibGVTdG9yZSgpO1xuZXhwb3J0IHtjb2xsaWRhYmxlU3RvcmV9O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENvbGxpc2lvblxuICogQHByb3BlcnR5IHtDb2xsaWRhYmxlfSBjb2xsaWRhYmxlQVxuICogQHByb3BlcnR5IHtDb2xsaWRhYmxlfSBjb2xsaWRhYmxlQlxuICogQHByb3BlcnR5IHt2ZWMzfSBbY29udGFjdFBvaW50XSBJbiB3b3JsZCBjb29yZGluYXRlcy5cbiAqIEBwcm9wZXJ0eSB7dmVjM30gW2NvbnRhY3ROb3JtYWxdIFBvaW50cyBhd2F5IGZyb20gYm9keSBBIGFuZCB0b3dhcmQgYm9keSBCLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFt0aW1lXVxuICovXG4iLCJpbXBvcnQge1xuICBhcmVWZWMzc0Nsb3NlLFxuICB0bXBWZWMxLFxuICB0bXBWZWMyLFxuICB0bXBWZWMzLFxuICB0bXBWZWM0LFxufSBmcm9tICcuLi8uLi91dGlsJztcblxuaW1wb3J0IHtjb2xsaWRhYmxlU3RvcmV9IGZyb20gJy4vY29sbGlkYWJsZS1zdG9yZSc7XG5pbXBvcnQge2RldGVjdEludGVyc2VjdGlvbiwgY2FsY3VsYXRlQ29udGFjdH0gZnJvbSAnLi9jb2xsaXNpb24tdXRpbHMnO1xuXG4vKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgYSBjb2xsaXNpb24gcGlwZWxpbmUuXG4gKlxuICogVGhlc2UgZnVuY3Rpb25zIHdpbGwgZGV0ZWN0IGNvbGxpc2lvbnMgYmV0d2VlbiBjb2xsaWRhYmxlIGJvZGllcyBhbmQgdXBkYXRlIHRoZWlyIG1vbWVudGEgaW5cbiAqIHJlc3BvbnNlIHRvIHRoZSBjb2xsaXNpb25zLlxuICpcbiAqIC0gQ29uc2lzdHMgb2YgYW4gZWZmaWNpZW50IGJyb2FkLXBoYXNlIGNvbGxpc2lvbiBkZXRlY3Rpb24gc3RlcCBmb2xsb3dlZCBieSBhIHByZWNpc2VcbiAqICAgbmFycm93LXBoYXNlIHN0ZXAuXG4gKiAtIENhbGN1bGF0ZXMgdGhlIHBvc2l0aW9uLCBzdXJmYWNlIG5vcm1hbCwgYW5kIHRpbWUgb2YgZWFjaCBjb250YWN0LlxuICogLSBDYWxjdWxhdGVzIHRoZSBpbXB1bHNlIG9mIGEgY29sbGlzaW9uIGFuZCB1cGRhdGVzIHRoZSBib2RpZXMnIGxpbmVhciBhbmQgYW5ndWxhciBtb21lbnRhIGluXG4gKiAgIHJlc3BvbnNlLlxuICogLSBBcHBsaWVzIENvdWxvbWIgZnJpY3Rpb24gdG8gY29sbGlkaW5nIGJvZGllcy5cbiAqIC0gU3ViLWRpdmlkZXMgdGhlIHRpbWUgc3RlcCB0byBtb3JlIHByZWNpc2VseSBkZXRlcm1pbmUgd2hlbiBhbmQgd2hlcmUgYSBjb2xsaXNpb24gb2NjdXJzLlxuICogLSBTdXBwb3J0cyBtdWx0aXBsZSBjb2xsaXNpb25zIHdpdGggYSBzaW5nbGUgYm9keSBpbiBhIHNpbmdsZSB0aW1lIHN0ZXAuXG4gKiAtIEVmZmljaWVudGx5IHN1cHBvcnRzIGJvZGllcyBjb21pbmcgdG8gcmVzdCBhZ2FpbnN0IGVhY2ggb3RoZXIuXG4gKiAtIEJvZGllcyB3aWxsIG5ldmVyIHBlbmV0cmF0ZSBvbmUgYW5vdGhlci5cbiAqIC0gVGhpcyBkb2VzIG5vdCBhZGRyZXNzIHRoZSB0dW5uZWxsaW5nIHByb2JsZW0uIFRoYXQgaXMsIGl0IGlzIHBvc3NpYmxlIGZvciB0d28gZmFzdC1tb3ZpbmdcbiAqICAgYm9kaWVzIHRvIHBhc3MgdGhyb3VnaCBlYWNoIG90aGVyIGFzIGxvbmcgYXMgdGhleSBkaWQgbm90IGludGVyc2VjdCBlYWNoIG90aGVyIGR1cmluZyBhbnkgdGltZVxuICogICBzdGVwLlxuICogLSBUaGlzIG9ubHkgc3VwcG9ydHMgY29sbGlzaW9ucyBiZXR3ZWVuIGNlcnRhaW4gdHlwZXMgb2Ygc2hhcGVzLiBGb3J0dW5hdGVseSwgdGhpcyBzZXQgcHJvdmlkZXNcbiAqICAgcmVhc29uYWJsZSBhcHByb3hpbWF0aW9ucyBmb3IgbW9zdCBvdGhlciBzaGFwZXMuIFRoZSBzdXBwb3J0ZWQgdHlwZXMgb2Ygc2hhcGVzIGFyZTogc3BoZXJlcyxcbiAqICAgY2Fwc3VsZXMsIEFBQkJzLCBhbmQgT0JCcy5cbiAqXG4gKiAjIyBPYmplY3RzIHRoYXQgY29tZSB0byByZXN0XG4gKlxuICogQW4gaW1wb3J0YW50IGVmZmljaWVuY3kgaW1wcm92ZW1lbnQgaXMgdG8gbm90IHByb2Nlc3Mgb2JqZWN0cyB0aHJvdWdoIHRoZSBwaHlzaWNzIGVuZ2luZSBwaXBlbGluZVxuICogYWZ0ZXIgdGhleSBoYXZlIGNvbWUgdG8gcmVzdC4gVGhlIGlzQXRSZXN0IGZpZWxkIGluZGljYXRlcyB3aGVuIGEgYm9keSBoYXMgY29tZSB0byByZXN0LlxuICpcbiAqIGlzQXRSZXN0IGlzIHNldCB0byB0cnVlIGFmdGVyIGEgcGh5c2ljcyBmcmFtZSBpcyBmaW5pc2hlZCBpZiB0aGUgY29sbGlzaW9ucywgZm9yY2VzLCBwb3NpdGlvbixcbiAqIGFuZCBvcmllbnRhdGlvbiBvZiBhIGpvYiBoYXZlIG5vdCBjaGFuZ2VkIGZyb20gdGhlIHByZXZpb3VzIHRvIHRoZSBjdXJyZW50IHN0YXRlLlxuICpcbiAqIGlzQXRSZXN0IGlzIHNldCB0byBmYWxzZSBmcm9tIHR3byBwb3NzaWJsZSBldmVudHM6IGFmdGVyIGEgcGh5c2ljcyBmcmFtZSBpcyBmaW5pc2hlZCBpZiB0aGVcbiAqIGNvbGxpc2lvbnMgaGF2ZSBjaGFuZ2VkIGZyb20gdGhlIHByZXZpb3VzIHRvIHRoZSBjdXJyZW50IHN0YXRlLCBvciB3aGVuIGEgZm9yY2UgaXMgYWRkZWQgdG9cbiAqIHJlbW92ZWQgZnJvbSB0aGUgam9iLlxuICpcbiAqICMjIENvbGxpc2lvbiBjYWxjdWxhdGlvbnMgZG8gbm90IGNvbnNpZGVyIHZlbG9jaXR5XG4gKlxuICogQ29sbGlzaW9uIGRldGVjdGlvbiB3b3JrcyBieSB3YWl0aW5nIHVudGlsIHR3byBib2RpZXMgaW50ZXJzZWN0LiBIb3dldmVyLCBiZWNhdXNlIHRpbWUgZnJhbWVzIGFyZVxuICogbm90IGluZmluaXRlbHkgc21hbGwsIHdoZW4gYW4gaW50ZXJzZWN0aW9uIGlzIGRldGVjdGVkLCBpdCdzIGFscmVhZHkgcGFzdCB0aGUgZXhhY3QgaW5zdGFuY2Ugb2ZcbiAqIGNvbGxpc2lvbi4gVG8gYWxsZXZpYXRlIHByb2JsZW1zIGZyb20gdGhpcywgdGhlIHZlbG9jaXR5IG9mIGVhY2ggYm9keSBjYW4gYmUgY29uc2lkZXJlZCB3aGVuXG4gKiBjYWxjdWxhdGluZyB0aGUgY29sbGlzaW9uIHRpbWUsIHBvc2l0aW9uLCBhbmQgY29udGFjdCBub3JtYWwuIEhvd2V2ZXIsIHRha2luZyB2ZWxvY2l0eSBpbnRvXG4gKiBhY2NvdW50IG1ha2VzIHRoZSBjb250YWN0IGNhbGN1bGF0aW9ucyBtdWNoIG1vcmUgY29tcGxleCwgc28gd2UgZG8gbm90IGNvbnNpZGVyIHZlbG9jaXR5IGluIG91clxuICogY2FsY3VsYXRpb25zLlxuICpcbiAqIEEgbm90YWJsZSBjb25zZXF1ZW5jZSBvZiB0aGlzIGlzIHRoYXQgdGhlIGNhbGN1bGF0ZWQgY29udGFjdCBub3JtYWxzIGNhbiBiZSBpbmNvcnJlY3QuIENvbnNpZGVyXG4gKiB0aGUgZm9sbG93aW5nIG1vdmluZyBzcXVhcmVzLiBBdCB0aW1lIHQyIHRoZXkgYXJlIGZvdW5kIHRvIGhhdmUgY29sbGlkZWQuIFRoZSBjYWxjdWxhdGVkIGNvbnRhY3RcbiAqIHBvaW50IHdpbGwgYmUgc29tZXdoZXJlIHdpdGhpbiB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSBjb3JuZXJzLiBCdXQgdGhlIGNhbGN1bGF0ZWQgY29udGFjdCBub3JtYWxcbiAqIHdpbGwgcG9pbnQgdXB3YXJkcywgd2hpbGUgdGhlIHRydWUgY29udGFjdCBub3JtYWwgc2hvdWxkIHBvaW50IHRvIHRoZSByaWdodC4gVGhpcyBpcyBiZWNhdXNlIHRoZVxuICogY29udGFjdCBjYWxjdWxhdGlvbnMgZG8gbm90IGNvbnNpZGVyIHZlbG9jaXR5IGFuZCBpbnN0ZWFkIG9ubHkgY29uc2lkZXIgdGhlIHNoYWxsb3dlc3QgZGlyZWN0aW9uXG4gKiBvZiBvdmVybGFwLlxuICpcbiAqIC8vIFRpbWUgdDFcbiAqICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgIDwtLSB8ICAgICAgQiAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICB8XG4gKiAgKy0tLS0tLS0tLS0tLSsgICAgfCAgICAgICAgICAgIHxcbiAqICB8ICAgICAgICAgICAgfCAgICArLS0tLS0tLS0tLS0tK1xuICogIHwgICAgICAgICAgICB8XG4gKiAgfCAgICAgIEEgICAgIHwgLS0+XG4gKiAgfCAgICAgICAgICAgIHxcbiAqICB8ICAgICAgICAgICAgfFxuICogICstLS0tLS0tLS0tLS0rXG4gKlxuICogLy8gVGltZSB0MlxuICogICAgICAgICArLS0tLS0tLS0tLS0tK1xuICogICAgICAgICB8ICAgICAgICAgICAgfFxuICogICAgICAgICB8ICAgICAgICAgICAgfFxuICogICAgICAgICB8ICAgICAgQiAgICAgfFxuICogICAgICAgICB8ICAgICAgICAgICAgfFxuICogICstLS0tLS0tLS0tLS0rICAgICAgfFxuICogIHwgICAgICArLS0tLS18LS0tLS0tK1xuICogIHwgICAgICAgICAgICB8XG4gKiAgfCAgICAgIEEgICAgIHxcbiAqICB8ICAgICAgICAgICAgfFxuICogIHwgICAgICAgICAgICB8XG4gKiAgKy0tLS0tLS0tLS0tLStcbiAqL1xuXG4vKipcbiAqIERldGVjdCBhbmQgaGFuZGxlIGFueSBjb2xsaXNpb25zIGJldHdlZW4gYSBnaXZlbiBqb2IgYW5kIGFsbCBvdGhlciBjb2xsaWRhYmxlIGJvZGllcy5cbiAqXG4gKiBAcGFyYW0ge0NvbGxpZGFibGVQaHlzaWNzSm9ifSBqb2JcbiAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZWxhcHNlZFRpbWVcbiAqIEBwYXJhbSB7UGh5c2ljc0NvbmZpZ30gcGh5c2ljc1BhcmFtc1xuICovXG5mdW5jdGlvbiBoYW5kbGVDb2xsaXNpb25zRm9ySm9iKGpvYiwgZWxhcHNlZFRpbWUsIHBoeXNpY3NQYXJhbXMpIHtcbiAgY29uc3QgY29sbGlkYWJsZSA9IGpvYi5jb2xsaWRhYmxlO1xuXG4gIC8vIENsZWFyIGFueSBwcmV2aW91cyBjb2xsaXNpb24gaW5mby5cbiAgY29sbGlkYWJsZS5wcmV2aW91c0NvbGxpc2lvbnMgPSBjb2xsaWRhYmxlLmNvbGxpc2lvbnM7XG4gIGNvbGxpZGFibGUuY29sbGlzaW9ucyA9IFtdO1xuXG4gIC8vIEZpbmQgYWxsIGNvbGxpZGluZyBjb2xsaWRhYmxlcy5cbiAgY29uc3QgY29sbGlkaW5nQ29sbGlkYWJsZXMgPSBmaW5kSW50ZXJzZWN0aW5nQ29sbGlkYWJsZXNGb3JDb2xsaWRhYmxlKGNvbGxpZGFibGUpO1xuXG4gIC8vIFN0b3JlIHRoZSB0aW1lIG9mIGNvbGxpc2lvbiBmb3IgZWFjaCBjb2xsaXNpb24uXG4gIGNvbnN0IGNvbGxpc2lvbnMgPSBfcmVjb3JkQ29sbGlzaW9ucyhjb2xsaWRhYmxlLCBjb2xsaWRpbmdDb2xsaWRhYmxlcywgZWxhcHNlZFRpbWUpO1xuXG4gIC8vIENhbGN1bGF0ZSB0aGUgcG9pbnRzIG9mIGNvbnRhY3QgZm9yIGVhY2ggY29sbGlzaW9uLlxuICBfY2FsY3VsYXRlUG9pbnRzT2ZDb250YWN0KGNvbGxpc2lvbnMpO1xuXG4gIC8vIENvbGxpc2lvbiByZXNvbHV0aW9uLlxuICBfcmVzb2x2ZUNvbGxpc2lvbnMoY29sbGlzaW9ucywgcGh5c2ljc1BhcmFtcyk7XG59XG5cbi8qKlxuICogRmluZHMgYWxsIG90aGVyIGNvbGxpZGFibGVzIHRoYXQgaW50ZXJzZWN0IHdpdGggdGhlIGdpdmVuIGNvbGxpZGFibGUuXG4gKlxuICogQHBhcmFtIHtDb2xsaWRhYmxlfSBjb2xsaWRhYmxlXG4gKiBAcmV0dXJucyB7QXJyYXkuPENvbGxpZGFibGU+fVxuICovXG5mdW5jdGlvbiBmaW5kSW50ZXJzZWN0aW5nQ29sbGlkYWJsZXNGb3JDb2xsaWRhYmxlKGNvbGxpZGFibGUpIHtcbiAgLy8gQnJvYWQtcGhhc2UgY29sbGlzaW9uIGRldGVjdGlvbiAocGFpcnMgd2hvc2UgYm91bmRpbmcgdm9sdW1lcyBpbnRlcnNlY3QpLlxuICBjb25zdCBjb2xsaWRpbmdDb2xsaWRhYmxlcyA9IGNvbGxpZGFibGVTdG9yZS5nZXRQb3NzaWJsZUNvbGxpc2lvbnNGb3JDb2xsaWRhYmxlKGNvbGxpZGFibGUpO1xuXG4gIC8vIE5hcnJvdy1waGFzZSBjb2xsaXNpb24gZGV0ZWN0aW9uIChwYWlycyB0aGF0IGFjdHVhbGx5IGludGVyc2VjdCkuXG4gIHJldHVybiBfZGV0ZWN0UHJlY2lzZUNvbGxpc2lvbnNGcm9tQ29sbGlkaW5nQ29sbGlkYWJsZXMoY29sbGlkYWJsZSwgY29sbGlkaW5nQ29sbGlkYWJsZXMpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QXJyYXkuPENvbGxpZGFibGVQaHlzaWNzSm9iPn0gam9ic1xuICovXG5mdW5jdGlvbiBkZXRlcm1pbmVKb2JzQXRSZXN0KGpvYnMpIHtcbiAgam9icy5mb3JFYWNoKGpvYiA9PiBqb2IuaXNBdFJlc3QgPSBfaXNKb2JBdFJlc3Qoam9iKSk7XG59XG5cbmZ1bmN0aW9uIHJlY29yZE9sZENvbGxpc2lvbnNGb3JEZXZNb2RlRm9yQWxsQ29sbGlkYWJsZXMoKSB7XG4gIGNvbGxpZGFibGVTdG9yZS5mb3JFYWNoKF9yZWNvcmRPbGRDb2xsaXNpb25zRm9yRGV2TW9kZUZvckNvbGxpZGFibGUpO1xufVxuXG4vKipcbiAqIExvZ3MgYSB3YXJuaW5nIG1lc3NhZ2UgZm9yIGFueSBwYWlyIG9mIG9iamVjdHMgdGhhdCBpbnRlcnNlY3QuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrVGhhdE5vT2JqZWN0c0NvbGxpZGUoKSB7XG4gIC8vIEJyb2FkLXBoYXNlIGNvbGxpc2lvbiBkZXRlY3Rpb24gKHBhaXJzIHdob3NlIGJvdW5kaW5nIHZvbHVtZXMgaW50ZXJzZWN0KS5cbiAgbGV0IGNvbGxpc2lvbnMgPSBjb2xsaWRhYmxlU3RvcmUuZ2V0UG9zc2libGVDb2xsaXNpb25zRm9yQWxsQ29sbGlkYWJsZXMoKTtcblxuICAvLyBOYXJyb3ctcGhhc2UgY29sbGlzaW9uIGRldGVjdGlvbiAocGFpcnMgdGhhdCBhY3R1YWxseSBpbnRlcnNlY3QpLlxuICBjb2xsaXNpb25zID0gX2RldGVjdFByZWNpc2VDb2xsaXNpb25zRnJvbUNvbGxpc2lvbnMoY29sbGlzaW9ucyk7XG5cbiAgY29sbGlzaW9ucy5mb3JFYWNoKGNvbGxpc2lvbiA9PiB7XG4gICAgY29uc29sZS53YXJuKCdPYmplY3RzIHN0aWxsIGludGVyc2VjdCBhZnRlciBjb2xsaXNpb24gcmVzb2x1dGlvbicsIGNvbGxpc2lvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIENyZWF0ZSBjb2xsaXNpb24gb2JqZWN0cyB0aGF0IHJlY29yZCB0aGUgdGltZSBvZiBjb2xsaXNpb24gYW5kIHRoZSBjb2xsaWRhYmxlcyBpbiB0aGUgY29sbGlzaW9uLlxuICpcbiAqIEFsc28gcmVjb3JkIHJlZmVyZW5jZXMgdG8gdGhlc2UgY29sbGlzaW9ucyBvbiB0aGUgY29sbGlkYWJsZXMuXG4gKlxuICogQHBhcmFtIHtDb2xsaWRhYmxlfSBjb2xsaWRhYmxlXG4gKiBAcGFyYW0ge0FycmF5LjxDb2xsaWRhYmxlPn0gY29sbGlkaW5nQ29sbGlkYWJsZXNcbiAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gZWxhcHNlZFRpbWVcbiAqIEByZXR1cm5zIHtBcnJheS48Q29sbGlzaW9uPn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9yZWNvcmRDb2xsaXNpb25zKGNvbGxpZGFibGUsIGNvbGxpZGluZ0NvbGxpZGFibGVzLCBlbGFwc2VkVGltZSkge1xuICByZXR1cm4gY29sbGlkaW5nQ29sbGlkYWJsZXMubWFwKG90aGVyID0+IHtcbiAgICBjb25zdCBjb2xsaXNpb24gPSB7XG4gICAgICBjb2xsaWRhYmxlQTogY29sbGlkYWJsZSxcbiAgICAgIGNvbGxpZGFibGVCOiBvdGhlcixcbiAgICAgIHRpbWU6IGVsYXBzZWRUaW1lXG4gICAgfTtcblxuICAgIC8vIFJlY29yZCB0aGUgZmFjdCB0aGF0IHRoZXNlIG9iamVjdHMgY29sbGlkZWQgKHRoZSBNb2RlbENvbnRyb2xsZXIgbWF5IHdhbnQgdG8gaGFuZGxlIHRoaXMpLlxuICAgIGNvbGxpc2lvbi5jb2xsaWRhYmxlQS5jb2xsaXNpb25zLnB1c2goY29sbGlzaW9uKTtcbiAgICBjb2xsaXNpb24uY29sbGlkYWJsZUIuY29sbGlzaW9ucy5wdXNoKGNvbGxpc2lvbik7XG5cbiAgICByZXR1cm4gY29sbGlzaW9uO1xuICB9KTtcbn1cblxuLyoqXG4gKiBOYXJyb3ctcGhhc2UgY29sbGlzaW9uIGRldGVjdGlvbi5cbiAqXG4gKiBHaXZlbiBhIGxpc3Qgb2YgcG9zc2libGUgY29sbGlzaW9uIHBhaXJzLCBmaWx0ZXIgb3V0IHdoaWNoIHBhaXJzIGFyZSBhY3R1YWxseSBjb2xsaWRpbmcuXG4gKlxuICogQHBhcmFtIHtBcnJheS48Q29sbGlzaW9uPn0gY29sbGlzaW9uc1xuICogQHJldHVybnMge0FycmF5LjxDb2xsaXNpb24+fVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2RldGVjdFByZWNpc2VDb2xsaXNpb25zRnJvbUNvbGxpc2lvbnMoY29sbGlzaW9ucykge1xuICByZXR1cm4gY29sbGlzaW9ucy5maWx0ZXIoY29sbGlzaW9uID0+IHtcbiAgICAvLyBUT0RPOlxuICAgIC8vIC0gVXNlIHRlbXBvcmFsIGJpc2VjdGlvbiB3aXRoIGRpc2NyZXRlIHN1Yi10aW1lIHN0ZXBzIHRvIGZpbmQgdGltZSBvZiBjb2xsaXNpb24gKHVzZVxuICAgIC8vICAgICAgIHgtdnMteS1zcGVjaWZpYyBpbnRlcnNlY3Rpb24gZGV0ZWN0aW9uIG1ldGhvZHMpLlxuICAgIC8vIC0gTWFrZSBzdXJlIHRoZSBjb2xsaXNpb24gb2JqZWN0IGlzIHNldCB1cCB3aXRoIHRoZSBcInByZXZpb3VzU3RhdGVcIiBmcm9tIHRoZSBzdWItc3RlcFxuICAgIC8vICAgYmVmb3JlIGNvbGxpc2lvbiBhbmQgdGhlIHRpbWUgZnJvbSB0aGUgc3ViLXN0ZXAgYWZ0ZXIgY29sbGlzaW9uIChkZXRlcm1pbmVkIGZyb20gdGhlXG4gICAgLy8gICBwcmV2aW91cyB0ZW1wb3JhbCBiaXNlY3Rpb24gc2VhcmNoLi4uKVxuXG4gICAgcmV0dXJuIGRldGVjdEludGVyc2VjdGlvbihjb2xsaXNpb24uY29sbGlkYWJsZUEsIGNvbGxpc2lvbi5jb2xsaWRhYmxlQik7XG4gIH0pO1xufVxuXG4vKipcbiAqIE5hcnJvdy1waGFzZSBjb2xsaXNpb24gZGV0ZWN0aW9uLlxuICpcbiAqIEdpdmVuIGEgbGlzdCBvZiBwb3NzaWJsZSBjb2xsaXNpb24gcGFpcnMsIGZpbHRlciBvdXQgd2hpY2ggcGFpcnMgYXJlIGFjdHVhbGx5IGNvbGxpZGluZy5cbiAqXG4gKiBAcGFyYW0ge0NvbGxpZGFibGV9IGNvbGxpZGFibGVcbiAqIEBwYXJhbSB7QXJyYXkuPENvbGxpZGFibGU+fSBjb2xsaWRpbmdDb2xsaWRhYmxlc1xuICogQHJldHVybnMge0FycmF5LjxDb2xsaWRhYmxlPn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9kZXRlY3RQcmVjaXNlQ29sbGlzaW9uc0Zyb21Db2xsaWRpbmdDb2xsaWRhYmxlcyhjb2xsaWRhYmxlLCBjb2xsaWRpbmdDb2xsaWRhYmxlcykge1xuICByZXR1cm4gY29sbGlkaW5nQ29sbGlkYWJsZXMuZmlsdGVyKG90aGVyID0+IHtcbiAgICAvLyBUT0RPOlxuICAgIC8vIC0gVXNlIHRlbXBvcmFsIGJpc2VjdGlvbiB3aXRoIGRpc2NyZXRlIHN1Yi10aW1lIHN0ZXBzIHRvIGZpbmQgdGltZSBvZiBjb2xsaXNpb24gKHVzZVxuICAgIC8vICAgICAgIHgtdnMteS1zcGVjaWZpYyBpbnRlcnNlY3Rpb24gZGV0ZWN0aW9uIG1ldGhvZHMpLlxuICAgIC8vIC0gTWFrZSBzdXJlIHRoZSBjb2xsaXNpb24gb2JqZWN0IGlzIHNldCB1cCB3aXRoIHRoZSBcInByZXZpb3VzU3RhdGVcIiBmcm9tIHRoZSBzdWItc3RlcFxuICAgIC8vICAgYmVmb3JlIGNvbGxpc2lvbiBhbmQgdGhlIHRpbWUgZnJvbSB0aGUgc3ViLXN0ZXAgYWZ0ZXIgY29sbGlzaW9uIChkZXRlcm1pbmVkIGZyb20gdGhlXG4gICAgLy8gICBwcmV2aW91cyB0ZW1wb3JhbCBiaXNlY3Rpb24gc2VhcmNoLi4uKVxuXG4gICAgcmV0dXJuIGRldGVjdEludGVyc2VjdGlvbihjb2xsaWRhYmxlLCBvdGhlcik7XG4gIH0pO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgaW50ZXJzZWN0aW9uIHBvc2l0aW9uIGFuZCBjb250YWN0IG5vcm1hbCBvZiBlYWNoIGNvbGxpc2lvbi5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxDb2xsaXNpb24+fSBjb2xsaXNpb25zXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfY2FsY3VsYXRlUG9pbnRzT2ZDb250YWN0KGNvbGxpc2lvbnMpIHtcbiAgY29sbGlzaW9ucy5mb3JFYWNoKGNhbGN1bGF0ZUNvbnRhY3QpO1xufVxuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIGxpbmVhciBhbmQgYW5ndWxhciBtb21lbnRhIG9mIGVhY2ggYm9keSBpbiByZXNwb25zZSB0byBpdHMgY29sbGlzaW9uLlxuICpcbiAqIEBwYXJhbSB7QXJyYXkuPENvbGxpc2lvbj59IGNvbGxpc2lvbnNcbiAqIEBwYXJhbSB7UGh5c2ljc0NvbmZpZ30gcGh5c2ljc1BhcmFtc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX3Jlc29sdmVDb2xsaXNpb25zKGNvbGxpc2lvbnMsIHBoeXNpY3NQYXJhbXMpIHtcbiAgY29sbGlzaW9ucy5mb3JFYWNoKGNvbGxpc2lvbiA9PiB7XG4gICAgLy8gSWYgbmVpdGhlciBwaHlzaWNzIGpvYiBuZWVkcyB0aGUgc3RhbmRhcmQgY29sbGlzaW9uIHJlc3RpdHV0aW9uLCB0aGVuIGRvbid0IGRvIGl0LlxuICAgIGlmIChfbm90aWZ5UGh5c2ljc0pvYnNPZkNvbGxpc2lvbihjb2xsaXNpb24pKSB7XG4gICAgICBpZiAoY29sbGlzaW9uLmNvbGxpZGFibGVBLnBoeXNpY3NKb2IgJiYgY29sbGlzaW9uLmNvbGxpZGFibGVCLnBoeXNpY3NKb2IpIHtcbiAgICAgICAgLy8gTmVpdGhlciBvZiB0aGUgY29sbGlkYWJsZXMgaXMgc3RhdGlvbmFyeS5cbiAgICAgICAgX3Jlc29sdmVDb2xsaXNpb24oY29sbGlzaW9uLCBwaHlzaWNzUGFyYW1zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9uZSBvZiB0aGUgdHdvIGNvbGxpZGFibGVzIGlzIHN0YXRpb25hcnkuXG4gICAgICAgIF9yZXNvbHZlQ29sbGlzaW9uV2l0aFN0YXRpb25hcnlPYmplY3QoY29sbGlzaW9uLCBwaHlzaWNzUGFyYW1zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q29sbGlzaW9ufSBjb2xsaXNpb25cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIG9uZSBvZiB0aGUgUGh5c2ljc0pvYnMgbmVlZCB0aGUgc3RhbmRhcmQgY29sbGlzaW9uIHJlc3RpdHV0aW9uIHRvXG4gKiBwcm9jZWVkLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX25vdGlmeVBoeXNpY3NKb2JzT2ZDb2xsaXNpb24oY29sbGlzaW9uKSB7XG4gIHJldHVybiBjb2xsaXNpb24uY29sbGlkYWJsZUEucGh5c2ljc0pvYi5oYW5kbGVDb2xsaXNpb24oY29sbGlzaW9uKSB8fFxuICAgICAgY29sbGlzaW9uLmNvbGxpZGFibGVCLnBoeXNpY3NKb2IuaGFuZGxlQ29sbGlzaW9uKGNvbGxpc2lvbilcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGEgY29sbGlzaW9uIGJldHdlZW4gdHdvIG1vdmluZywgcGh5c2ljcy1iYXNlZCBvYmplY3RzLlxuICpcbiAqIFRoaXMgaXMgYmFzZWQgb24gY29sbGlzaW9uLXJlc3BvbnNlIGFsZ29yaXRobXMgZnJvbSBXaWtpcGVkaWFcbiAqIChodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db2xsaXNpb25fcmVzcG9uc2UjSW1wdWxzZS1iYXNlZF9yZWFjdGlvbl9tb2RlbCkuXG4gKlxuICogQHBhcmFtIHtDb2xsaXNpb259IGNvbGxpc2lvblxuICogQHBhcmFtIHtQaHlzaWNzQ29uZmlnfSBwaHlzaWNzUGFyYW1zXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfcmVzb2x2ZUNvbGxpc2lvbihjb2xsaXNpb24sIHBoeXNpY3NQYXJhbXMpIHtcbiAgY29uc3QgY29sbGlkYWJsZUEgPSBjb2xsaXNpb24uY29sbGlkYWJsZUE7XG4gIGNvbnN0IGNvbGxpZGFibGVCID0gY29sbGlzaW9uLmNvbGxpZGFibGVCO1xuICBjb25zdCBwcmV2aW91c1N0YXRlQSA9IGNvbGxpZGFibGVBLnBoeXNpY3NKb2IucHJldmlvdXNTdGF0ZTtcbiAgY29uc3QgcHJldmlvdXNTdGF0ZUIgPSBjb2xsaWRhYmxlQi5waHlzaWNzSm9iLnByZXZpb3VzU3RhdGU7XG4gIGNvbnN0IG5leHRTdGF0ZUEgPSBjb2xsaWRhYmxlQS5waHlzaWNzSm9iLmN1cnJlbnRTdGF0ZTtcbiAgY29uc3QgbmV4dFN0YXRlQiA9IGNvbGxpZGFibGVCLnBoeXNpY3NKb2IuY3VycmVudFN0YXRlO1xuICBjb25zdCBjZW50ZXJBID0gY29sbGlkYWJsZUEuY2VudGVyT2ZNYXNzO1xuICBjb25zdCBjZW50ZXJCID0gY29sbGlkYWJsZUIuY2VudGVyT2ZNYXNzO1xuICBjb25zdCBjb250YWN0UG9pbnQgPSBjb2xsaXNpb24uY29udGFjdFBvaW50O1xuXG4gIGNvbnN0IGNvbnRhY3RQb2ludE9mZnNldEEgPSB0bXBWZWMzO1xuICB2ZWMzLnN1YnRyYWN0KGNvbnRhY3RQb2ludE9mZnNldEEsIGNvbnRhY3RQb2ludCwgY2VudGVyQSk7XG4gIGNvbnN0IGNvbnRhY3RQb2ludE9mZnNldEIgPSB0bXBWZWM0O1xuICB2ZWMzLnN1YnRyYWN0KGNvbnRhY3RQb2ludE9mZnNldEIsIGNvbnRhY3RQb2ludCwgY2VudGVyQik7XG5cbiAgLy9cbiAgLy8gQ2FsY3VsYXRlIHRoZSByZWxhdGl2ZSB2ZWxvY2l0eSBvZiB0aGUgYm9kaWVzIGF0IHRoZSBwb2ludCBvZiBjb250YWN0LlxuICAvL1xuICAvLyBXZSB1c2UgdGhlIHZlbG9jaXR5IGZyb20gdGhlIHByZXZpb3VzIHN0YXRlLCBzaW5jZSBpdCBpcyB0aGUgdmVsb2NpdHkgdGhhdCBsZWQgdG8gdGhlXG4gIC8vIGNvbGxpc2lvbi5cbiAgLy9cblxuICBjb25zdCB2ZWxvY2l0eUEgPSB0bXBWZWMxO1xuICB2ZWMzLmNyb3NzKHRtcFZlYzEsIHByZXZpb3VzU3RhdGVBLmFuZ3VsYXJWZWxvY2l0eSwgY29udGFjdFBvaW50T2Zmc2V0QSk7XG4gIHZlYzMuYWRkKHZlbG9jaXR5QSwgcHJldmlvdXNTdGF0ZUEudmVsb2NpdHksIHRtcFZlYzEpO1xuXG4gIGNvbnN0IHZlbG9jaXR5QiA9IHRtcFZlYzI7XG4gIHZlYzMuY3Jvc3ModG1wVmVjMiwgcHJldmlvdXNTdGF0ZUIuYW5ndWxhclZlbG9jaXR5LCBjb250YWN0UG9pbnRPZmZzZXRCKTtcbiAgdmVjMy5hZGQodmVsb2NpdHlCLCBwcmV2aW91c1N0YXRlQi52ZWxvY2l0eSwgdG1wVmVjMik7XG5cbiAgY29uc3QgcmVsYXRpdmVWZWxvY2l0eSA9IHZlYzMuY3JlYXRlKCk7XG4gIHZlYzMuc3VidHJhY3QocmVsYXRpdmVWZWxvY2l0eSwgdmVsb2NpdHlCLCB2ZWxvY2l0eUEpO1xuXG4gIGlmICh2ZWMzLmRvdChyZWxhdGl2ZVZlbG9jaXR5LCBjb2xsaXNpb24uY29udGFjdE5vcm1hbCkgPj0gMCkge1xuICAgIC8vIElmIHRoZSByZWxhdGl2ZSB2ZWxvY2l0eSBpcyBub3QgcG9pbnRpbmcgYWdhaW5zdCB0aGUgbm9ybWFsLCB0aGVuIHRoZSBub3JtYWwgd2FzIGNhbGN1bGF0ZWRcbiAgICAvLyBpbmNvcnJlY3RseSAodGhpcyBpcyBsaWtlbHkgZHVlIHRvIHRoZSB0aW1lIHN0ZXAgYmVpbmcgdG9vIGxhcmdlIGFuZCB0aGUgZmFjdCB0aGF0IG91clxuICAgIC8vIGNvbnRhY3QgY2FsY3VsYXRpb25zIGRvbid0IGNvbnNpZGVyIHZlbG9jaXR5KS4gU28gdXBkYXRlIHRoZSBjb250YWN0IG5vcm1hbCB0byBiZSBpbiB0aGVcbiAgICAvLyBkaXJlY3Rpb24gb2YgdGhlIHJlbGF0aXZlIHZlbG9jaXR5LlxuXG4gICAgLy8gVE9ETzogQ2hlY2sgdGhhdCB0aGlzIHdvcmtzIGFzIGV4cGVjdGVkLlxuXG4gICAgLy8gY29uc29sZS53YXJuKCdOb24tY29sbGlzaW9uIGJlY2F1c2Ugb2JqZWN0cyBhcmUgbW92aW5nIGF3YXkgZnJvbSBlYWNoIG90aGVyLicpO1xuXG4gICAgdmVjMy5jb3B5KGNvbGxpc2lvbi5jb250YWN0Tm9ybWFsLCByZWxhdGl2ZVZlbG9jaXR5KTtcbiAgICB2ZWMzLm5vcm1hbGl6ZShjb2xsaXNpb24uY29udGFjdE5vcm1hbCwgY29sbGlzaW9uLmNvbnRhY3ROb3JtYWwpO1xuICAgIHZlYzMubmVnYXRlKGNvbGxpc2lvbi5jb250YWN0Tm9ybWFsLCBjb2xsaXNpb24uY29udGFjdE5vcm1hbCk7XG4gIH1cblxuICBfYXBwbHlJbXB1bHNlRnJvbUNvbGxpc2lvbihjb2xsaXNpb24sIHJlbGF0aXZlVmVsb2NpdHksIGNvbnRhY3RQb2ludE9mZnNldEEsXG4gICAgICBjb250YWN0UG9pbnRPZmZzZXRCLCBwaHlzaWNzUGFyYW1zKTtcblxuICAvLyBOT1RFOiBUaGlzIHN0YXRlIHJldmVyc2lvbiBpcyBvbmx5IGFwcGxpZWQgdG8gY29sbGlkYWJsZUEuIFRoaXMgYXNzdW1lcyB0aGF0IG9ubHkgQSBpcyBtb3ZpbmdcbiAgLy8gZHVyaW5nIHRoaXMgaXRlcmF0aW9uIG9mIHRoZSBjb2xsaXNpb24gcGlwZWxpbmUuXG5cbiAgLy8gUmV2ZXJ0IHRvIHRoZSBwb3NpdGlvbiBhbmQgb3JpZW50YXRpb24gZnJvbSBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGNvbGxpc2lvbi5cbiAgdmVjMy5jb3B5KG5leHRTdGF0ZUEucG9zaXRpb24sIHByZXZpb3VzU3RhdGVBLnBvc2l0aW9uKTtcbiAgcXVhdC5jb3B5KG5leHRTdGF0ZUEub3JpZW50YXRpb24sIHByZXZpb3VzU3RhdGVBLm9yaWVudGF0aW9uKTtcblxuICAvLyBBbHNvIHJldmVydCB0aGUgY29sbGlkYWJsZXMnIHBvc2l0aW9uIGFuZCBvcmllbnRhdGlvbi5cbiAgY29sbGlkYWJsZUEucG9zaXRpb24gPSBwcmV2aW91c1N0YXRlQS5wb3NpdGlvbjtcbiAgY29sbGlkYWJsZUEub3JpZW50YXRpb24gPSBwcmV2aW91c1N0YXRlQS5vcmllbnRhdGlvbjtcblxuICBuZXh0U3RhdGVBLnVwZGF0ZURlcGVuZGVudEZpZWxkcygpO1xuICBuZXh0U3RhdGVCLnVwZGF0ZURlcGVuZGVudEZpZWxkcygpO1xufVxuXG4vKipcbiAqIFJlc29sdmUgYSBjb2xsaXNpb24gYmV0d2VlbiBvbmUgbW92aW5nLCBwaHlzaWNzLWJhc2VkIG9iamVjdCBhbmQgb25lIHN0YXRpb25hcnkgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7Q29sbGlzaW9ufSBjb2xsaXNpb25cbiAqIEBwYXJhbSB7UGh5c2ljc0NvbmZpZ30gcGh5c2ljc1BhcmFtc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX3Jlc29sdmVDb2xsaXNpb25XaXRoU3RhdGlvbmFyeU9iamVjdChjb2xsaXNpb24sIHBoeXNpY3NQYXJhbXMpIHtcbiAgY29uc3QgY29udGFjdE5vcm1hbCA9IGNvbGxpc2lvbi5jb250YWN0Tm9ybWFsO1xuXG4gIGxldCBwaHlzaWNzQ29sbGlkYWJsZTtcbiAgaWYgKGNvbGxpc2lvbi5jb2xsaWRhYmxlQS5waHlzaWNzSm9iKSB7XG4gICAgcGh5c2ljc0NvbGxpZGFibGUgPSBjb2xsaXNpb24uY29sbGlkYWJsZUE7XG4gIH0gZWxzZSB7XG4gICAgcGh5c2ljc0NvbGxpZGFibGUgPSBjb2xsaXNpb24uY29sbGlkYWJsZUI7XG4gICAgdmVjMy5uZWdhdGUoY29udGFjdE5vcm1hbCwgY29udGFjdE5vcm1hbCk7XG4gIH1cblxuICBjb25zdCBwcmV2aW91c1N0YXRlID0gcGh5c2ljc0NvbGxpZGFibGUucGh5c2ljc0pvYi5wcmV2aW91c1N0YXRlO1xuICBjb25zdCBuZXh0U3RhdGUgPSBwaHlzaWNzQ29sbGlkYWJsZS5waHlzaWNzSm9iLmN1cnJlbnRTdGF0ZTtcbiAgY29uc3QgY2VudGVyID0gcGh5c2ljc0NvbGxpZGFibGUuY2VudGVyT2ZNYXNzO1xuICBjb25zdCBjb250YWN0UG9pbnQgPSBjb2xsaXNpb24uY29udGFjdFBvaW50O1xuXG4gIGNvbnN0IGNvbnRhY3RQb2ludE9mZnNldCA9IHRtcFZlYzM7XG4gIHZlYzMuc3VidHJhY3QoY29udGFjdFBvaW50T2Zmc2V0LCBjb250YWN0UG9pbnQsIGNlbnRlcik7XG5cbiAgLy8gQ2FsY3VsYXRlIHRoZSByZWxhdGl2ZSB2ZWxvY2l0eSBvZiB0aGUgYm9kaWVzIGF0IHRoZSBwb2ludCBvZiBjb250YWN0LiBXZSB1c2UgdGhlIHZlbG9jaXR5IGZyb21cbiAgLy8gdGhlIHByZXZpb3VzIHN0YXRlLCBzaW5jZSBpdCBpcyB0aGUgdmVsb2NpdHkgdGhhdCBsZWQgdG8gdGhlIGNvbGxpc2lvbi5cbiAgY29uc3QgdmVsb2NpdHkgPSB2ZWMzLmNyZWF0ZSgpO1xuICB2ZWMzLmNyb3NzKHRtcFZlYzEsIHByZXZpb3VzU3RhdGUuYW5ndWxhclZlbG9jaXR5LCBjb250YWN0UG9pbnRPZmZzZXQpO1xuICB2ZWMzLmFkZCh2ZWxvY2l0eSwgcHJldmlvdXNTdGF0ZS52ZWxvY2l0eSwgdG1wVmVjMSk7XG5cbiAgaWYgKHZlYzMuZG90KHZlbG9jaXR5LCBjb250YWN0Tm9ybWFsKSA8PSAwKSB7XG4gICAgLy8gSWYgdGhlIHJlbGF0aXZlIHZlbG9jaXR5IGlzIG5vdCBwb2ludGluZyBhZ2FpbnN0IHRoZSBub3JtYWwsIHRoZW4gdGhlIG5vcm1hbCB3YXMgY2FsY3VsYXRlZFxuICAgIC8vIGluY29ycmVjdGx5ICh0aGlzIGlzIGxpa2VseSBkdWUgdG8gdGhlIHRpbWUgc3RlcCBiZWluZyB0b28gbGFyZ2UgYW5kIHRoZSBmYWN0IHRoYXQgb3VyXG4gICAgLy8gY29udGFjdCBjYWxjdWxhdGlvbnMgZG9uJ3QgY29uc2lkZXIgdmVsb2NpdHkpLiBTbyB1cGRhdGUgdGhlIGNvbnRhY3Qgbm9ybWFsIHRvIGJlIGluIHRoZVxuICAgIC8vIGRpcmVjdGlvbiBvZiB0aGUgcmVsYXRpdmUgdmVsb2NpdHkuXG5cbiAgICAvLyBUT0RPOiBDaGVjayB0aGF0IHRoaXMgd29ya3MgYXMgZXhwZWN0ZWQuXG5cbiAgICBjb25zb2xlLndhcm4oJ05vbi1jb2xsaXNpb24gYmVjYXVzZSBvYmplY3QgaXMgbW92aW5nIGF3YXkgZnJvbSBzdGF0aW9uYXJ5IG9iamVjdC4nKTtcblxuICAgIHZlYzMuY29weShjb2xsaXNpb24uY29udGFjdE5vcm1hbCwgdmVsb2NpdHkpO1xuICAgIHZlYzMubm9ybWFsaXplKGNvbGxpc2lvbi5jb250YWN0Tm9ybWFsLCBjb2xsaXNpb24uY29udGFjdE5vcm1hbCk7XG4gICAgdmVjMy5uZWdhdGUoY29sbGlzaW9uLmNvbnRhY3ROb3JtYWwsIGNvbGxpc2lvbi5jb250YWN0Tm9ybWFsKTtcbiAgfVxuXG4gIF9hcHBseUltcHVsc2VGcm9tQ29sbGlzaW9uV2l0aFN0YXRpb25hcnlPYmplY3QocGh5c2ljc0NvbGxpZGFibGUsIGNvbGxpc2lvbiwgdmVsb2NpdHksXG4gICAgICBjb250YWN0UG9pbnRPZmZzZXQsIHBoeXNpY3NQYXJhbXMpO1xuXG4gIC8vIFJldmVydCB0byB0aGUgcG9zaXRpb24gYW5kIG9yaWVudGF0aW9uIGZyb20gaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBjb2xsaXNpb24uXG4gIHZlYzMuY29weShuZXh0U3RhdGUucG9zaXRpb24sIHByZXZpb3VzU3RhdGUucG9zaXRpb24pO1xuICBxdWF0LmNvcHkobmV4dFN0YXRlLm9yaWVudGF0aW9uLCBwcmV2aW91c1N0YXRlLm9yaWVudGF0aW9uKTtcblxuICAvLyBBbHNvIHJldmVydCB0aGUgY29sbGlkYWJsZSdzIHBvc2l0aW9uIGFuZCBvcmllbnRhdGlvbi5cbiAgcGh5c2ljc0NvbGxpZGFibGUucG9zaXRpb24gPSBwcmV2aW91c1N0YXRlLnBvc2l0aW9uO1xuICBwaHlzaWNzQ29sbGlkYWJsZS5vcmllbnRhdGlvbiA9IHByZXZpb3VzU3RhdGUub3JpZW50YXRpb247XG5cbiAgbmV4dFN0YXRlLnVwZGF0ZURlcGVuZGVudEZpZWxkcygpO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYmFzZWQgb24gY29sbGlzaW9uLXJlc3BvbnNlIGFsZ29yaXRobXMgZnJvbSBXaWtpcGVkaWFcbiAqIChodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db2xsaXNpb25fcmVzcG9uc2UjSW1wdWxzZS1iYXNlZF9yZWFjdGlvbl9tb2RlbCkuIFRoaXMgYWxnb3JpdGhtXG4gKiBoYXMgYmVlbiBzaW1wbGlmaWVkIGJ5IGFzc3VtaW5nIHRoZSBzdGF0aW9uYXJ5IGJvZHkgaGFzIGluZmluaXRlIG1hc3MgYW5kIHplcm8gdmVsb2NpdHkuXG4gKlxuICogQHBhcmFtIHtDb2xsaXNpb259IGNvbGxpc2lvblxuICogQHBhcmFtIHt2ZWMzfSByZWxhdGl2ZVZlbG9jaXR5XG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludE9mZnNldEFcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50T2Zmc2V0QlxuICogQHBhcmFtIHtQaHlzaWNzQ29uZmlnfSBwaHlzaWNzUGFyYW1zXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfYXBwbHlJbXB1bHNlRnJvbUNvbGxpc2lvbihjb2xsaXNpb24sIHJlbGF0aXZlVmVsb2NpdHksIGNvbnRhY3RQb2ludE9mZnNldEEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWN0UG9pbnRPZmZzZXRCLCBwaHlzaWNzUGFyYW1zKSB7XG4gIGNvbnN0IGNvbGxpZGFibGVBID0gY29sbGlzaW9uLmNvbGxpZGFibGVBO1xuICBjb25zdCBjb2xsaWRhYmxlQiA9IGNvbGxpc2lvbi5jb2xsaWRhYmxlQjtcblxuICBjb25zdCBzdGF0ZUEgPSBjb2xsaWRhYmxlQS5waHlzaWNzSm9iLmN1cnJlbnRTdGF0ZTtcbiAgY29uc3Qgc3RhdGVCID0gY29sbGlkYWJsZUIucGh5c2ljc0pvYi5jdXJyZW50U3RhdGU7XG5cbiAgY29uc3QgY29udGFjdE5vcm1hbCA9IGNvbGxpc2lvbi5jb250YWN0Tm9ybWFsO1xuXG4gIC8vXG4gIC8vIENhbGN1bGF0ZSBhbmQgYXBwbHkgdGhlIG1haW4gY29sbGlzaW9uIGltcHVsc2UuXG4gIC8vXG5cbiAgdmVjMy5zY2FsZSh0bXBWZWMxLCByZWxhdGl2ZVZlbG9jaXR5LCAtKDEgKyBwaHlzaWNzUGFyYW1zLmNvZWZmaWNpZW50T2ZSZXN0aXR1dGlvbikpO1xuICBjb25zdCBudW1lcmF0b3IgPSB2ZWMzLmRvdCh0bXBWZWMxLCBjb250YWN0Tm9ybWFsKTtcblxuICB2ZWMzLmNyb3NzKHRtcFZlYzEsIGNvbnRhY3RQb2ludE9mZnNldEEsIGNvbnRhY3ROb3JtYWwpO1xuICB2ZWMzLnRyYW5zZm9ybU1hdDModG1wVmVjMSwgdG1wVmVjMSwgc3RhdGVBLmludmVyc2VJbmVydGlhVGVuc29yKTtcbiAgdmVjMy5jcm9zcyh0bXBWZWMxLCB0bXBWZWMxLCBjb250YWN0UG9pbnRPZmZzZXRBKTtcblxuICB2ZWMzLmNyb3NzKHRtcFZlYzIsIGNvbnRhY3RQb2ludE9mZnNldEIsIGNvbnRhY3ROb3JtYWwpO1xuICB2ZWMzLnRyYW5zZm9ybU1hdDModG1wVmVjMiwgdG1wVmVjMiwgc3RhdGVCLmludmVyc2VJbmVydGlhVGVuc29yKTtcbiAgdmVjMy5jcm9zcyh0bXBWZWMyLCB0bXBWZWMyLCBjb250YWN0UG9pbnRPZmZzZXRCKTtcblxuICB2ZWMzLmFkZCh0bXBWZWMxLCB0bXBWZWMxLCB0bXBWZWMyKTtcbiAgY29uc3QgZGVub21pbmF0b3IgPSB2ZWMzLmRvdCh0bXBWZWMxLCBjb250YWN0Tm9ybWFsKSArIHN0YXRlQS5pbnZlcnNlTWFzcyArIHN0YXRlQi5pbnZlcnNlTWFzcztcblxuICBjb25zdCBpbXB1bHNlTWFnbml0dWRlID0gbnVtZXJhdG9yIC8gZGVub21pbmF0b3I7XG5cbiAgX2FwcGx5SW1wdWxzZShzdGF0ZUEsIC1pbXB1bHNlTWFnbml0dWRlLCBjb250YWN0Tm9ybWFsLCBjb250YWN0UG9pbnRPZmZzZXRBKTtcbiAgX2FwcGx5SW1wdWxzZShzdGF0ZUIsIGltcHVsc2VNYWduaXR1ZGUsIGNvbnRhY3ROb3JtYWwsIGNvbnRhY3RQb2ludE9mZnNldEIpO1xuXG4gIC8vXG4gIC8vIENhbGN1bGF0ZSBhbmQgYXBwbHkgYSBkeW5hbWljIGZyaWN0aW9uIGltcHVsc2UuXG4gIC8vXG5cbiAgY29uc3QgZnJpY3Rpb25JbXB1bHNlTWFnbml0dWRlID0gaW1wdWxzZU1hZ25pdHVkZSAqIHBoeXNpY3NQYXJhbXMuY29lZmZpY2llbnRPZkZyaWN0aW9uO1xuXG4gIGNvbnN0IHRhbmdlbnQgPSB0bXBWZWMyO1xuICB2ZWMzLnNjYWxlKHRtcFZlYzEsIGNvbnRhY3ROb3JtYWwsIHZlYzMuZG90KHJlbGF0aXZlVmVsb2NpdHksIGNvbnRhY3ROb3JtYWwpKTtcbiAgdmVjMy5zdWJ0cmFjdCh0YW5nZW50LCByZWxhdGl2ZVZlbG9jaXR5LCB0bXBWZWMxKTtcbiAgdmVjMy5ub3JtYWxpemUodGFuZ2VudCwgdGFuZ2VudCk7XG5cbiAgX2FwcGx5SW1wdWxzZShzdGF0ZUEsIGZyaWN0aW9uSW1wdWxzZU1hZ25pdHVkZSwgdGFuZ2VudCwgY29udGFjdFBvaW50T2Zmc2V0QSk7XG4gIF9hcHBseUltcHVsc2Uoc3RhdGVCLCAtZnJpY3Rpb25JbXB1bHNlTWFnbml0dWRlLCB0YW5nZW50LCBjb250YWN0UG9pbnRPZmZzZXRCKTtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGJhc2VkIG9uIGNvbGxpc2lvbi1yZXNwb25zZSBhbGdvcml0aG1zIGZyb20gV2lraXBlZGlhXG4gKiAoaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29sbGlzaW9uX3Jlc3BvbnNlI0ltcHVsc2UtYmFzZWRfcmVhY3Rpb25fbW9kZWwpLiBUaGlzIGFsZ29yaXRobVxuICogaGFzIGJlZW4gc2ltcGxpZmllZCBieSBhc3N1bWluZyB0aGUgc3RhdGlvbmFyeSBib2R5IGhhcyBpbmZpbml0ZSBtYXNzIGFuZCB6ZXJvIHZlbG9jaXR5LlxuICpcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZX0gcGh5c2ljc0NvbGxpZGFibGVcbiAqIEBwYXJhbSB7Q29sbGlzaW9ufSBjb2xsaXNpb25cbiAqIEBwYXJhbSB7dmVjM30gdmVsb2NpdHlcbiAqIEBwYXJhbSB7dmVjM30gY29udGFjdFBvaW50T2Zmc2V0XG4gKiBAcGFyYW0ge1BoeXNpY3NDb25maWd9IHBoeXNpY3NQYXJhbXNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9hcHBseUltcHVsc2VGcm9tQ29sbGlzaW9uV2l0aFN0YXRpb25hcnlPYmplY3QocGh5c2ljc0NvbGxpZGFibGUsIGNvbGxpc2lvbiwgdmVsb2NpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhY3RQb2ludE9mZnNldCwgcGh5c2ljc1BhcmFtcykge1xuICBjb25zdCBzdGF0ZSA9IHBoeXNpY3NDb2xsaWRhYmxlLnBoeXNpY3NKb2IuY3VycmVudFN0YXRlO1xuICBjb25zdCBjb250YWN0Tm9ybWFsID0gY29sbGlzaW9uLmNvbnRhY3ROb3JtYWw7XG5cbiAgLy9cbiAgLy8gQ2FsY3VsYXRlIGFuZCBhcHBseSB0aGUgbWFpbiBjb2xsaXNpb24gaW1wdWxzZS5cbiAgLy9cblxuICB2ZWMzLnNjYWxlKHRtcFZlYzEsIHZlbG9jaXR5LCAtKDEgKyBwaHlzaWNzUGFyYW1zLmNvZWZmaWNpZW50T2ZSZXN0aXR1dGlvbikpO1xuICBjb25zdCBudW1lcmF0b3IgPSB2ZWMzLmRvdCh0bXBWZWMxLCBjb250YWN0Tm9ybWFsKTtcblxuICB2ZWMzLmNyb3NzKHRtcFZlYzEsIGNvbnRhY3RQb2ludE9mZnNldCwgY29udGFjdE5vcm1hbCk7XG4gIHZlYzMudHJhbnNmb3JtTWF0Myh0bXBWZWMxLCB0bXBWZWMxLCBzdGF0ZS5pbnZlcnNlSW5lcnRpYVRlbnNvcik7XG4gIHZlYzMuY3Jvc3ModG1wVmVjMSwgdG1wVmVjMSwgY29udGFjdFBvaW50T2Zmc2V0KTtcbiAgY29uc3QgZGVub21pbmF0b3IgPSB2ZWMzLmRvdCh0bXBWZWMxLCBjb250YWN0Tm9ybWFsKSArIHN0YXRlLmludmVyc2VNYXNzO1xuXG4gIGNvbnN0IGltcHVsc2VNYWduaXR1ZGUgPSBudW1lcmF0b3IgLyBkZW5vbWluYXRvcjtcblxuICBfYXBwbHlJbXB1bHNlKHN0YXRlLCBpbXB1bHNlTWFnbml0dWRlLCBjb250YWN0Tm9ybWFsLCBjb250YWN0UG9pbnRPZmZzZXQpO1xuXG4gIC8vXG4gIC8vIENhbGN1bGF0ZSBhbmQgYXBwbHkgYSBkeW5hbWljIGZyaWN0aW9uIGltcHVsc2UuXG4gIC8vXG5cbiAgY29uc3QgZnJpY3Rpb25JbXB1bHNlTWFnbml0dWRlID0gaW1wdWxzZU1hZ25pdHVkZSAqIHBoeXNpY3NQYXJhbXMuY29lZmZpY2llbnRPZkZyaWN0aW9uO1xuXG4gIGNvbnN0IHRhbmdlbnQgPSB0bXBWZWMyO1xuICB2ZWMzLnNjYWxlKHRtcFZlYzEsIGNvbnRhY3ROb3JtYWwsIHZlYzMuZG90KHZlbG9jaXR5LCBjb250YWN0Tm9ybWFsKSk7XG4gIHZlYzMuc3VidHJhY3QodGFuZ2VudCwgdmVsb2NpdHksIHRtcFZlYzEpO1xuICB2ZWMzLm5vcm1hbGl6ZSh0YW5nZW50LCB0YW5nZW50KTtcblxuICBfYXBwbHlJbXB1bHNlKHN0YXRlLCBmcmljdGlvbkltcHVsc2VNYWduaXR1ZGUsIHRhbmdlbnQsIGNvbnRhY3RQb2ludE9mZnNldCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtQaHlzaWNzU3RhdGV9IHN0YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gaW1wdWxzZU1hZ25pdHVkZVxuICogQHBhcmFtIHt2ZWMzfSBpbXB1bHNlRGlyZWN0aW9uXG4gKiBAcGFyYW0ge3ZlYzN9IGNvbnRhY3RQb2ludE9mZnNldFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2FwcGx5SW1wdWxzZShzdGF0ZSwgaW1wdWxzZU1hZ25pdHVkZSwgaW1wdWxzZURpcmVjdGlvbiwgY29udGFjdFBvaW50T2Zmc2V0KSB7XG4gIC8vIENhbGN1bGF0ZSB0aGUgdXBkYXRlZCBsaW5lYXIgbW9tZW50YS5cbiAgY29uc3QgZmluYWxMaW5lYXJNb21lbnR1bSA9IHZlYzMuY3JlYXRlKCk7XG4gIHZlYzMuc2NhbGVBbmRBZGQoZmluYWxMaW5lYXJNb21lbnR1bSwgc3RhdGUubW9tZW50dW0sIGltcHVsc2VEaXJlY3Rpb24sIGltcHVsc2VNYWduaXR1ZGUpO1xuXG4gIC8vIENhbGN1bGF0ZSB0aGUgdXBkYXRlZCBhbmd1bGFyIG1vbWVudGEuXG4gIGNvbnN0IGZpbmFsQW5ndWxhck1vbWVudHVtID0gdmVjMy5jcmVhdGUoKTtcbiAgdmVjMy5jcm9zcyh0bXBWZWMxLCBjb250YWN0UG9pbnRPZmZzZXQsIGltcHVsc2VEaXJlY3Rpb24pO1xuICB2ZWMzLnNjYWxlQW5kQWRkKGZpbmFsQW5ndWxhck1vbWVudHVtLCBzdGF0ZS5hbmd1bGFyTW9tZW50dW0sIHRtcFZlYzEsIGltcHVsc2VNYWduaXR1ZGUpO1xuXG4gIC8vIEFwcGx5IHRoZSB1cGRhdGVkIG1vbWVudGEuXG4gIHZlYzMuY29weShzdGF0ZS5tb21lbnR1bSwgZmluYWxMaW5lYXJNb21lbnR1bSk7XG4gIHZlYzMuY29weShzdGF0ZS5hbmd1bGFyTW9tZW50dW0sIGZpbmFsQW5ndWxhck1vbWVudHVtKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NvbGxpZGFibGVQaHlzaWNzSm9ifSBqb2JcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2lzSm9iQXRSZXN0KGpvYikge1xuICByZXR1cm4gYXJlVmVjM3NDbG9zZShqb2IuY3VycmVudFN0YXRlLnBvc2l0aW9uLCBqb2IucHJldmlvdXNTdGF0ZS5wb3NpdGlvbikgJiZcbiAgICAgIGFyZVZlYzNzQ2xvc2Uoam9iLmN1cnJlbnRTdGF0ZS52ZWxvY2l0eSwgam9iLnByZXZpb3VzU3RhdGUudmVsb2NpdHkpICYmXG4gICAgICBhcmVWZWMzc0Nsb3NlKGpvYi5jdXJyZW50U3RhdGUub3JpZW50YXRpb24sIGpvYi5wcmV2aW91c1N0YXRlLm9yaWVudGF0aW9uKSAmJlxuICAgICAgX2RvQ29sbGlzaW9uc01hdGNoKGpvYi5jb2xsaWRhYmxlLmNvbGxpc2lvbnMsIGpvYi5jb2xsaWRhYmxlLnByZXZpb3VzQ29sbGlzaW9ucyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtBcnJheS48Q29sbGlzaW9uPn0gY29sbGlzaW9uc0FcbiAqIEBwYXJhbSB7QXJyYXkuPENvbGxpc2lvbj59IGNvbGxpc2lvbnNCXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9kb0NvbGxpc2lvbnNNYXRjaChjb2xsaXNpb25zQSwgY29sbGlzaW9uc0IpIHtcbiAgY29uc3QgY291bnQgPSBjb2xsaXNpb25zQS5sZW5ndGg7XG5cbiAgaWYgKGNvdW50ICE9PSBjb2xsaXNpb25zQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICBjb25zdCBjb2xsaXNpb25BID0gY29sbGlzaW9uc0FbaV07XG4gICAgY29uc3QgY29sbGlzaW9uQiA9IGNvbGxpc2lvbnNCW2ldO1xuICAgIGlmIChjb2xsaXNpb25BLmNvbGxpZGFibGVBICE9PSBjb2xsaXNpb25CLmNvbGxpZGFibGVBIHx8XG4gICAgICAgIGNvbGxpc2lvbkEuY29sbGlkYWJsZUIgIT09IGNvbGxpc2lvbkIuY29sbGlkYWJsZUIgfHxcbiAgICAgICAgIWFyZVZlYzNzQ2xvc2UoY29sbGlzaW9uQS5jb250YWN0UG9pbnQsIGNvbGxpc2lvbkIuY29udGFjdFBvaW50KSB8fFxuICAgICAgICAhYXJlVmVjM3NDbG9zZShjb2xsaXNpb25BLmNvbnRhY3ROb3JtYWwsIGNvbGxpc2lvbkIuY29udGFjdE5vcm1hbCkpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZX0gY29sbGlkYWJsZVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX3JlY29yZE9sZENvbGxpc2lvbnNGb3JEZXZNb2RlRm9yQ29sbGlkYWJsZShjb2xsaWRhYmxlKSB7XG4gIGlmICghY29sbGlkYWJsZS5leHRyYVByZXZpb3VzQ29sbGlzaW9ucykge1xuICAgIGNvbGxpZGFibGUuZXh0cmFQcmV2aW91c0NvbGxpc2lvbnMgPSBbXTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAzOyBpID4gMDsgaS0tKSB7XG4gICAgY29sbGlkYWJsZS5leHRyYVByZXZpb3VzQ29sbGlzaW9uc1tpXSA9IGNvbGxpZGFibGUuZXh0cmFQcmV2aW91c0NvbGxpc2lvbnNbaSAtIDFdO1xuICB9XG4gIGNvbGxpZGFibGUuZXh0cmFQcmV2aW91c0NvbGxpc2lvbnNbMF0gPSBjb2xsaWRhYmxlLnByZXZpb3VzQ29sbGlzaW9ucztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NvbGxpc2lvbn0gY29sbGlzaW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0NvbnRyb2xsZXJcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE90aGVyQ29udHJvbGxlckZyb21Db2xsaXNpb24oY29sbGlzaW9uLCB0aGlzQ29udHJvbGxlcikge1xuICBjb25zdCBjb250cm9sbGVyQSA9IGNvbGxpc2lvbi5jb2xsaWRhYmxlQS5waHlzaWNzSm9iLmNvbnRyb2xsZXI7XG4gIGNvbnN0IGNvbnRyb2xsZXJCID0gY29sbGlzaW9uLmNvbGxpZGFibGVCLnBoeXNpY3NKb2IuY29udHJvbGxlcjtcbiAgaWYgKGNvbnRyb2xsZXJBID09PSB0aGlzQ29udHJvbGxlcikge1xuICAgIHJldHVybiBjb250cm9sbGVyQjtcbiAgfSBlbHNlIGlmIChjb250cm9sbGVyQiA9PT0gdGhpc0NvbnRyb2xsZXIpIHtcbiAgICByZXR1cm4gY29udHJvbGxlckE7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOZWl0aGVyIGNvbGxpZGFibGUgY29ycmVzcG9uZHMgdG8gdGhlIGdpdmVuIGNvbnRyb2xsZXInKTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBoYW5kbGVDb2xsaXNpb25zRm9ySm9iLFxuICBmaW5kSW50ZXJzZWN0aW5nQ29sbGlkYWJsZXNGb3JDb2xsaWRhYmxlLFxuICBkZXRlcm1pbmVKb2JzQXRSZXN0LFxuICByZWNvcmRPbGRDb2xsaXNpb25zRm9yRGV2TW9kZUZvckFsbENvbGxpZGFibGVzLFxuICBjaGVja1RoYXROb09iamVjdHNDb2xsaWRlLFxuICBnZXRPdGhlckNvbnRyb2xsZXJGcm9tQ29sbGlzaW9uLFxufTtcbiIsImltcG9ydCB7XG4gIEFhYmIsXG4gIENhcHN1bGUsXG4gIE9iYixcbiAgU3BoZXJlXG59IGZyb20gJy4uL2NvbGxpZGFibGVzJztcblxuaW1wb3J0IHtcbiAgYWFiYkNvbGxpc2lvbkRldGVjdGlvbixcbiAgY2Fwc3VsZUNvbGxpc2lvbkRldGVjdGlvbixcbiAgb2JiQ29sbGlzaW9uRGV0ZWN0aW9uLFxuICBzcGhlcmVDb2xsaXNpb25EZXRlY3Rpb24sXG59IGZyb20gJy4uL2NvbGxpc2lvbi1kZXRlY3Rpb24nO1xuXG5pbXBvcnQge1xuICBhYWJiQ29udGFjdENhbGN1bGF0aW9uLFxuICBjYXBzdWxlQ29udGFjdENhbGN1bGF0aW9uLFxuICBvYmJDb250YWN0Q2FsY3VsYXRpb24sXG4gIHNwaGVyZUNvbnRhY3RDYWxjdWxhdGlvbixcbn0gZnJvbSAnLi4vY29udGFjdC1jYWxjdWxhdGlvbic7XG5cbi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyBhIGNvbGxlY3Rpb24gb2Ygc3RhdGljIHV0aWxpdHkgZnVuY3Rpb25zIGZvciBkZXRlY3RpbmcgYW5kIHJlc3BvbmRpbmcgdG9cbiAqIGNvbGxpc2lvbnMuXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0NvbGxpZGFibGV9IGFcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZX0gYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGRldGVjdEludGVyc2VjdGlvbihhLCBiKSB7XG4gIGlmIChhIGluc3RhbmNlb2YgU3BoZXJlKSB7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBTcGhlcmUpIHtcbiAgICAgIHJldHVybiBzcGhlcmVDb2xsaXNpb25EZXRlY3Rpb24uc3BoZXJlVnNTcGhlcmUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQWFiYikge1xuICAgICAgcmV0dXJuIHNwaGVyZUNvbGxpc2lvbkRldGVjdGlvbi5zcGhlcmVWc0FhYmIoYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQ2Fwc3VsZSkge1xuICAgICAgcmV0dXJuIHNwaGVyZUNvbGxpc2lvbkRldGVjdGlvbi5zcGhlcmVWc0NhcHN1bGUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgT2JiKSB7XG4gICAgICByZXR1cm4gc3BoZXJlQ29sbGlzaW9uRGV0ZWN0aW9uLnNwaGVyZVZzT2JiKGEsIGIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3BoZXJlQ29sbGlzaW9uRGV0ZWN0aW9uLnNwaGVyZVZzUG9pbnQoYSwgYik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBBYWJiKSB7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBTcGhlcmUpIHtcbiAgICAgIHJldHVybiBhYWJiQ29sbGlzaW9uRGV0ZWN0aW9uLmFhYmJWc1NwaGVyZShhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBBYWJiKSB7XG4gICAgICByZXR1cm4gYWFiYkNvbGxpc2lvbkRldGVjdGlvbi5hYWJiVnNBYWJiKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIENhcHN1bGUpIHtcbiAgICAgIHJldHVybiBhYWJiQ29sbGlzaW9uRGV0ZWN0aW9uLmFhYmJWc0NhcHN1bGUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgT2JiKSB7XG4gICAgICByZXR1cm4gYWFiYkNvbGxpc2lvbkRldGVjdGlvbi5hYWJiVnNPYmIoYSwgYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhYWJiQ29sbGlzaW9uRGV0ZWN0aW9uLmFhYmJWc1BvaW50KGEsIGIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhIGluc3RhbmNlb2YgQ2Fwc3VsZSkge1xuICAgIGlmIChiIGluc3RhbmNlb2YgU3BoZXJlKSB7XG4gICAgICByZXR1cm4gY2Fwc3VsZUNvbGxpc2lvbkRldGVjdGlvbi5jYXBzdWxlVnNTcGhlcmUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQWFiYikge1xuICAgICAgcmV0dXJuIGNhcHN1bGVDb2xsaXNpb25EZXRlY3Rpb24uY2Fwc3VsZVZzQWFiYihhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBDYXBzdWxlKSB7XG4gICAgICByZXR1cm4gY2Fwc3VsZUNvbGxpc2lvbkRldGVjdGlvbi5jYXBzdWxlVnNDYXBzdWxlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIE9iYikge1xuICAgICAgcmV0dXJuIGNhcHN1bGVDb2xsaXNpb25EZXRlY3Rpb24uY2Fwc3VsZVZzT2JiKGEsIGIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY2Fwc3VsZUNvbGxpc2lvbkRldGVjdGlvbi5jYXBzdWxlVnNQb2ludChhLCBiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIE9iYikge1xuICAgIGlmIChiIGluc3RhbmNlb2YgU3BoZXJlKSB7XG4gICAgICByZXR1cm4gb2JiQ29sbGlzaW9uRGV0ZWN0aW9uLm9iYlZzU3BoZXJlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIEFhYmIpIHtcbiAgICAgIHJldHVybiBvYmJDb2xsaXNpb25EZXRlY3Rpb24ub2JiVnNBYWJiKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIENhcHN1bGUpIHtcbiAgICAgIHJldHVybiBvYmJDb2xsaXNpb25EZXRlY3Rpb24ub2JiVnNDYXBzdWxlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIE9iYikge1xuICAgICAgcmV0dXJuIG9iYkNvbGxpc2lvbkRldGVjdGlvbi5vYmJWc09iYihhLCBiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9iYkNvbGxpc2lvbkRldGVjdGlvbi5vYmJWc1BvaW50KGEsIGIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIFNwaGVyZSkge1xuICAgICAgcmV0dXJuIHNwaGVyZUNvbGxpc2lvbkRldGVjdGlvbi5zcGhlcmVWc1BvaW50KGIsIGEpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIEFhYmIpIHtcbiAgICAgIHJldHVybiBhYWJiQ29sbGlzaW9uRGV0ZWN0aW9uLmFhYmJWc1BvaW50KGIsIGEpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIENhcHN1bGUpIHtcbiAgICAgIHJldHVybiBjYXBzdWxlQ29sbGlzaW9uRGV0ZWN0aW9uLmNhcHN1bGVWc1BvaW50KGIsIGEpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIE9iYikge1xuICAgICAgcmV0dXJuIG9iYkNvbGxpc2lvbkRldGVjdGlvbi5vYmJWc1BvaW50KGIsIGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtDb2xsaXNpb259IGNvbGxpc2lvblxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVDb250YWN0KGNvbGxpc2lvbikge1xuICBjb25zdCBhID0gY29sbGlzaW9uLmNvbGxpZGFibGVBO1xuICBjb25zdCBiID0gY29sbGlzaW9uLmNvbGxpZGFibGVCO1xuICBjb25zdCBjb250YWN0UG9pbnQgPSB2ZWMzLmNyZWF0ZSgpO1xuICBjb25zdCBjb250YWN0Tm9ybWFsID0gdmVjMy5jcmVhdGUoKTtcblxuICBpZiAoYSBpbnN0YW5jZW9mIFNwaGVyZSkge1xuICAgIGlmIChiIGluc3RhbmNlb2YgU3BoZXJlKSB7XG4gICAgICBzcGhlcmVDb250YWN0Q2FsY3VsYXRpb24uc3BoZXJlVnNTcGhlcmUoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBBYWJiKSB7XG4gICAgICBzcGhlcmVDb250YWN0Q2FsY3VsYXRpb24uc3BoZXJlVnNBYWJiKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQ2Fwc3VsZSkge1xuICAgICAgc3BoZXJlQ29udGFjdENhbGN1bGF0aW9uLnNwaGVyZVZzQ2Fwc3VsZShjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGEsIGIpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIE9iYikge1xuICAgICAgc3BoZXJlQ29udGFjdENhbGN1bGF0aW9uLnNwaGVyZVZzT2JiKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNwaGVyZUNvbnRhY3RDYWxjdWxhdGlvbi5zcGhlcmVWc1BvaW50KGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBBYWJiKSB7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBTcGhlcmUpIHtcbiAgICAgIGFhYmJDb250YWN0Q2FsY3VsYXRpb24uYWFiYlZzU3BoZXJlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQWFiYikge1xuICAgICAgYWFiYkNvbnRhY3RDYWxjdWxhdGlvbi5hYWJiVnNBYWJiKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQ2Fwc3VsZSkge1xuICAgICAgYWFiYkNvbnRhY3RDYWxjdWxhdGlvbi5hYWJiVnNDYXBzdWxlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgT2JiKSB7XG4gICAgICBhYWJiQ29udGFjdENhbGN1bGF0aW9uLmFhYmJWc09iYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGEsIGIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhYWJiQ29udGFjdENhbGN1bGF0aW9uLmFhYmJWc1BvaW50KGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBDYXBzdWxlKSB7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBTcGhlcmUpIHtcbiAgICAgIGNhcHN1bGVDb250YWN0Q2FsY3VsYXRpb24uY2Fwc3VsZVZzU3BoZXJlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQWFiYikge1xuICAgICAgY2Fwc3VsZUNvbnRhY3RDYWxjdWxhdGlvbi5jYXBzdWxlVnNBYWJiKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQ2Fwc3VsZSkge1xuICAgICAgY2Fwc3VsZUNvbnRhY3RDYWxjdWxhdGlvbi5jYXBzdWxlVnNDYXBzdWxlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgT2JiKSB7XG4gICAgICBjYXBzdWxlQ29udGFjdENhbGN1bGF0aW9uLmNhcHN1bGVWc09iYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGEsIGIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYXBzdWxlQ29udGFjdENhbGN1bGF0aW9uLmNhcHN1bGVWc1BvaW50KGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBPYmIpIHtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIFNwaGVyZSkge1xuICAgICAgb2JiQ29udGFjdENhbGN1bGF0aW9uLm9iYlZzU3BoZXJlKGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYSwgYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQWFiYikge1xuICAgICAgb2JiQ29udGFjdENhbGN1bGF0aW9uLm9iYlZzQWFiYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGEsIGIpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIENhcHN1bGUpIHtcbiAgICAgIG9iYkNvbnRhY3RDYWxjdWxhdGlvbi5vYmJWc0NhcHN1bGUoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBhLCBiKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBPYmIpIHtcbiAgICAgIG9iYkNvbnRhY3RDYWxjdWxhdGlvbi5vYmJWc09iYihjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGEsIGIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmJDb250YWN0Q2FsY3VsYXRpb24ub2JiVnNQb2ludChjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGEsIGIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIFNwaGVyZSkge1xuICAgICAgc3BoZXJlQ29udGFjdENhbGN1bGF0aW9uLnNwaGVyZVZzUG9pbnQoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBiLCBhKTtcbiAgICB9IGVsc2UgaWYgKGIgaW5zdGFuY2VvZiBBYWJiKSB7XG4gICAgICBhYWJiQ29udGFjdENhbGN1bGF0aW9uLmFhYmJWc1BvaW50KGNvbnRhY3RQb2ludCwgY29udGFjdE5vcm1hbCwgYiwgYSk7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgQ2Fwc3VsZSkge1xuICAgICAgY2Fwc3VsZUNvbnRhY3RDYWxjdWxhdGlvbi5jYXBzdWxlVnNQb2ludChjb250YWN0UG9pbnQsIGNvbnRhY3ROb3JtYWwsIGIsIGEpO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIE9iYikge1xuICAgICAgb2JiQ29udGFjdENhbGN1bGF0aW9uLm9iYlZzUG9pbnQoY29udGFjdFBvaW50LCBjb250YWN0Tm9ybWFsLCBiLCBhKTtcbiAgICB9IGVsc2Uge31cbiAgICB2ZWMzLm5lZ2F0ZShjb250YWN0Tm9ybWFsLCBjb250YWN0Tm9ybWFsKTtcbiAgfVxuXG4gIGNvbGxpc2lvbi5jb250YWN0UG9pbnQgPSBjb250YWN0UG9pbnQ7XG4gIGNvbGxpc2lvbi5jb250YWN0Tm9ybWFsID0gY29udGFjdE5vcm1hbDtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0NvbGxpZGFibGV9IGFcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZX0gYlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGRldGVjdEJvdW5kaW5nVm9sdW1lSW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGRldGVjdEludGVyc2VjdGlvbihhLmJvdW5kaW5nVm9sdW1lLCBiLmJvdW5kaW5nVm9sdW1lKTtcbn1cblxuZXhwb3J0IHtcbiAgZGV0ZWN0SW50ZXJzZWN0aW9uLFxuICBjYWxjdWxhdGVDb250YWN0LFxuICBkZXRlY3RCb3VuZGluZ1ZvbHVtZUludGVyc2VjdGlvbixcbn07XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIHJlLWV4cG9ydHMgYWxsIG9mIHRoZSBleHBvcnRzIGluIHRoZSBncmFmeCBmcmFtZXdvcmsuIFRoaXMgbWFrZXMgdGhlIGVudGlyZSBmcmFtZXdvcmtcbiAqIGNvbnZlbmllbnRseSBhY2Nlc3NpYmxlIHZpYSB0aGlzIHNpbmdsZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0ICogZnJvbSAnLi9jb2xsaXNpb25zJztcbmV4cG9ydCAqIGZyb20gJy4vaW50ZWdyYXRvcic7XG5leHBvcnQgKiBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgKiBmcm9tICcuL3NyYy9waHlzaWNzLWVuZ2luZSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9waHlzaWNzLWpvYic7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9waHlzaWNzLXN0YXRlJztcbiIsImV4cG9ydCAqIGZyb20gJy4vc3JjL2ludGVncmF0b3InO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvcms0LWludGVncmF0b3InO1xuIiwiLyoqXG4gKiBUaGlzIGNsYXNzIG51bWVyaWNhbGx5IGludGVncmF0ZXMgdGhlIGVxdWF0aW9ucyBvZiBtb3Rpb24uIFRoYXQgaXMsIGFuIGludGVncmF0b3IgaW1wbGVtZW50c1xuICogcGh5c2ljcyBzaW11bGF0aW9ucyBieSB1cGRhdGluZyBwb3NpdGlvbiBhbmQgdmVsb2NpdHkgdmFsdWVzIGZvciBlYWNoIHRpbWUgc3RlcC5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqL1xuY2xhc3MgSW50ZWdyYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIEludGVncmF0b3IgaXMgYW4gYWJzdHJhY3QgY2xhc3MuIEl0IHNob3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGRpcmVjdGx5LlxuICAgIGlmIChuZXcudGFyZ2V0ID09PSBJbnRlZ3JhdG9yKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29uc3RydWN0IEludGVncmF0b3IgaW5zdGFuY2VzIGRpcmVjdGx5Jyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludGVncmF0ZSB0aGUgc3RhdGUgZnJvbSB0IHRvIHQgKyBkdC5cbiAgICpcbiAgICogQHBhcmFtIHtQaHlzaWNzSm9ifSBqb2JcbiAgICogQHBhcmFtIHtudW1iZXJ9IHQgVG90YWwgZWxhcHNlZCB0aW1lLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZHQgRHVyYXRpb24gb2YgdGhlIGN1cnJlbnQgdGltZSBzdGVwLlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIGludGVncmF0ZShqb2IsIHQsIGR0KSB7XG4gICAgLy8gRXh0ZW5kaW5nIGNsYXNzZXMgc2hvdWxkIGltcGxlbWVudCB0aGlzIG1ldGhvZC5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1BoeXNpY3NEZXJpdmF0aXZlfVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZURlcml2YXRpdmUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZlbG9jaXR5OiB2ZWMzLmNyZWF0ZSgpLFxuICAgICAgZm9yY2U6IHZlYzMuY3JlYXRlKCksXG4gICAgICBzcGluOiBxdWF0LmNyZWF0ZSgpLFxuICAgICAgdG9ycXVlOiB2ZWMzLmNyZWF0ZSgpXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQge0ludGVncmF0b3J9O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFBoeXNpY3NEZXJpdmF0aXZlXG4gKiBAcHJvcGVydHkge3ZlYzN9IHZlbG9jaXR5IERlcml2YXRpdmUgb2YgcG9zaXRpb24uXG4gKiBAcHJvcGVydHkge3ZlYzN9IGZvcmNlIERlcml2YXRpdmUgb2YgbW9tZW50dW0uXG4gKiBAcHJvcGVydHkge3F1YXR9IHNwaW4gRGVyaXZhdGl2ZSBvZiBvcmllbnRhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7dmVjM30gdG9ycXVlIERlcml2YXRpdmUgb2YgYW5ndWxhciBtb21lbnR1bS5cbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEZvcmNlQXBwbGllck91dHB1dFxuICogQHByb3BlcnR5IHt2ZWMzfSBmb3JjZVxuICogQHByb3BlcnR5IHt2ZWMzfSB0b3JxdWVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEZvcmNlQXBwbGllcklucHV0XG4gKiBAcHJvcGVydHkge1BoeXNpY3NTdGF0ZX0gc3RhdGVcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0XG4gKiBAcHJvcGVydHkge251bWJlcn0gZHRcbiAqL1xuIiwiaW1wb3J0IHtfZ2VvbWV0cnksIF91dGlsfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7SW50ZWdyYXRvcn0gZnJvbSAnLi9pbnRlZ3JhdG9yJztcbmltcG9ydCB7UGh5c2ljc1N0YXRlfSBmcm9tICcuLi8uLi9zcmMvcGh5c2ljcy1zdGF0ZSc7XG5cbi8vIFRPRE86IEFjY291bnQgZm9yIHRoZSBmYWN0IHRoYXQgY29sbGlzaW9ucyB0YWtlIHBsYWNlIGJldHdlZW4gdGltZSBzdGVwczsgaW50ZWdyYXRpb24gc2hvdWxkXG4vLyByZWFsbHkgY29uc2lkZXIgdGhlIHByZXZpb3VzIHN0YXRlIGFzIGJlaW5nIHRoZSB0aW1lIGFuZCBzdGF0ZSBhdCB0aGUgbW9tZW50IG9mIGNvbGxpc2lvbi5cblxuLyoqXG4gKiBUaGlzIGNsYXNzIG51bWVyaWNhbGx5IGludGVncmF0ZXMgdGhlIGVxdWF0aW9ucyBvZiBtb3Rpb24uIFRoYXQgaXMsIHRoaXMgaW1wbGVtZW50cyBwaHlzaWNzXG4gKiBzaW11bGF0aW9ucyBieSB1cGRhdGluZyBwb3NpdGlvbiBhbmQgdmVsb2NpdHkgdmFsdWVzIGZvciBlYWNoIHRpbWUgc3RlcC5cbiAqXG4gKiBUaGlzIGludGVncmF0b3IgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlIGNsYXNzaWNhbCBSdW5nZS1LdXR0YSBtZXRob2QgKFJLNClcbiAqIChodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9SdW5nZV9rdXR0YSkuXG4gKlxuICogVGhpcyBpbnRlZ3JhdG9yIGNhdXNlcyBlbmVyZ3kgdG8gYmUgbG9zdCBhdCBhIHNtYWxsIHJhdGUuIFRoaXMgaXMgYSBjb21tb24gcHJvYmxlbSBmb3IgbnVtZXJpY2FsXG4gKiBpbnRlZ3JhdG9ycywgYW5kIGlzIHVzdWFsbHkgbmVnbGlnaWJsZS5cbiAqL1xuY2xhc3MgUks0SW50ZWdyYXRvciBleHRlbmRzIEludGVncmF0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmIChfdXRpbC5pc0luRGV2TW9kZSkge1xuICAgICAgdGhpcy5fd3JhcEZvckRldk1vZGUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW50ZWdyYXRlIHRoZSBzdGF0ZSBmcm9tIHQgdG8gdCArIGR0LlxuICAgKlxuICAgKiBAcGFyYW0ge1BoeXNpY3NKb2J9IGpvYlxuICAgKiBAcGFyYW0ge251bWJlcn0gdCBUb3RhbCBlbGFwc2VkIHRpbWUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkdCBEdXJhdGlvbiBvZiB0aGUgY3VycmVudCB0aW1lIHN0ZXAuXG4gICAqL1xuICBpbnRlZ3JhdGUoam9iLCB0LCBkdCkge1xuICAgIGNvbnN0IHN0YXRlID0gam9iLmN1cnJlbnRTdGF0ZTtcbiAgICBfdGVtcFN0YXRlLmNvcHkoc3RhdGUpO1xuXG4gICAgX2NhbGN1bGF0ZURlcml2YXRpdmUoX2EsIF90ZW1wU3RhdGUsIGpvYiwgdCwgMCwgX0VNUFRZX0RFUklWQVRJVkUpO1xuICAgIF9jYWxjdWxhdGVEZXJpdmF0aXZlKF9iLCBfdGVtcFN0YXRlLCBqb2IsIHQsIGR0ICogMC41LCBfYSk7XG4gICAgX2NhbGN1bGF0ZURlcml2YXRpdmUoX2MsIF90ZW1wU3RhdGUsIGpvYiwgdCwgZHQgKiAwLjUsIF9iKTtcbiAgICBfY2FsY3VsYXRlRGVyaXZhdGl2ZShfZCwgX3RlbXBTdGF0ZSwgam9iLCB0LCBkdCwgX2MpO1xuXG4gICAgX2NhbGN1bGF0ZVZlYzNEZXJpdmF0aXZlV2VpZ2h0ZWRTdW0oXG4gICAgICAgIF9wb3NpdGlvbkRlcml2YXRpdmUsIF9hLnZlbG9jaXR5LCBfYi52ZWxvY2l0eSwgX2MudmVsb2NpdHksIF9kLnZlbG9jaXR5KTtcbiAgICBfY2FsY3VsYXRlVmVjM0Rlcml2YXRpdmVXZWlnaHRlZFN1bShcbiAgICAgICAgX21vbWVudHVtRGVyaXZhdGl2ZSwgX2EuZm9yY2UsIF9iLmZvcmNlLCBfYy5mb3JjZSwgX2QuZm9yY2UpO1xuICAgIF9jYWxjdWxhdGVRdWF0RGVyaXZhdGl2ZVdlaWdodGVkU3VtKF9vcmllbnRhdGlvbkRlcml2YXRpdmUsIF9hLnNwaW4sIF9iLnNwaW4sIF9jLnNwaW4sIF9kLnNwaW4pO1xuICAgIF9jYWxjdWxhdGVWZWMzRGVyaXZhdGl2ZVdlaWdodGVkU3VtKFxuICAgICAgICBfYW5ndWxhck1vbWVudHVtRGVyaXZhdGl2ZSwgX2EudG9ycXVlLCBfYi50b3JxdWUsIF9jLnRvcnF1ZSwgX2QudG9ycXVlKTtcblxuICAgIHZlYzMuc2NhbGVBbmRBZGQoc3RhdGUucG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uLCBfcG9zaXRpb25EZXJpdmF0aXZlLCBkdCk7XG4gICAgdmVjMy5zY2FsZUFuZEFkZChzdGF0ZS5tb21lbnR1bSwgc3RhdGUubW9tZW50dW0sIF9tb21lbnR1bURlcml2YXRpdmUsIGR0KTtcbiAgICBfZ2VvbWV0cnkuc2NhbGVBbmRBZGRRdWF0KHN0YXRlLm9yaWVudGF0aW9uLCBzdGF0ZS5vcmllbnRhdGlvbiwgX29yaWVudGF0aW9uRGVyaXZhdGl2ZSwgZHQpO1xuICAgIHZlYzMuc2NhbGVBbmRBZGQoc3RhdGUuYW5ndWxhck1vbWVudHVtLCBzdGF0ZS5hbmd1bGFyTW9tZW50dW0sIF9hbmd1bGFyTW9tZW50dW1EZXJpdmF0aXZlLCBkdCk7XG5cbiAgICBzdGF0ZS51cGRhdGVEZXBlbmRlbnRGaWVsZHMoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcmFwcyB0aGUgaW50ZWdyYXRlIG1ldGhvZCBhbmQgY2hlY2sgZm9yIE5hTiB2YWx1ZXMgYWZ0ZXIgZWFjaCBpbnRlZ3JhdGlvbi5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF93cmFwRm9yRGV2TW9kZSgpIHtcbiAgICBjb25zdCB1bmd1YXJkZWRJbnRlZ3JhdGUgPSB0aGlzLmludGVncmF0ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaW50ZWdyYXRlID0gKGpvYiwgdCwgZHQpID0+IHtcbiAgICAgIHVuZ3VhcmRlZEludGVncmF0ZShqb2IsIHQsIGR0KTtcbiAgICAgIF9jaGVja0ZvclN0YXRlRXJyb3Ioam9iLmN1cnJlbnRTdGF0ZSk7XG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgZGVyaXZhdGl2ZSBmcm9tIHRoZSBnaXZlbiBzdGF0ZSB3aXRoIHRoZSBnaXZlbiB0aW1lIHN0ZXAuXG4gKlxuICogQHBhcmFtIHtQaHlzaWNzRGVyaXZhdGl2ZX0gb3V0XG4gKiBAcGFyYW0ge1BoeXNpY3NTdGF0ZX0gc3RhdGVcbiAqIEBwYXJhbSB7UGh5c2ljc0pvYn0gam9iXG4gKiBAcGFyYW0ge251bWJlcn0gdFxuICogQHBhcmFtIHtudW1iZXJ9IGR0XG4gKiBAcGFyYW0ge1BoeXNpY3NEZXJpdmF0aXZlfSBkXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfY2FsY3VsYXRlRGVyaXZhdGl2ZShvdXQsIHN0YXRlLCBqb2IsIHQsIGR0LCBkKSB7XG4gIHZlYzMuc2NhbGVBbmRBZGQoc3RhdGUucG9zaXRpb24sIHN0YXRlLnBvc2l0aW9uLCBkLnZlbG9jaXR5LCBkdCk7XG4gIHZlYzMuc2NhbGVBbmRBZGQoc3RhdGUubW9tZW50dW0sIHN0YXRlLm1vbWVudHVtLCBkLmZvcmNlLCBkdCk7XG4gIF9nZW9tZXRyeS5zY2FsZUFuZEFkZFF1YXQoc3RhdGUub3JpZW50YXRpb24sIHN0YXRlLm9yaWVudGF0aW9uLCBkLnNwaW4sIGR0KTtcbiAgdmVjMy5zY2FsZUFuZEFkZChzdGF0ZS5hbmd1bGFyTW9tZW50dW0sIHN0YXRlLmFuZ3VsYXJNb21lbnR1bSwgZC50b3JxdWUsIGR0KTtcblxuICBzdGF0ZS51cGRhdGVEZXBlbmRlbnRGaWVsZHMoKTtcblxuICBvdXQudmVsb2NpdHkgPSBzdGF0ZS52ZWxvY2l0eTtcbiAgb3V0LnNwaW4gPSBzdGF0ZS5zcGluO1xuICB2ZWMzLnNldChvdXQuZm9yY2UsIDAsIDAsIDApO1xuICB2ZWMzLnNldChvdXQudG9ycXVlLCAwLCAwLCAwKTtcblxuICBfZm9yY2VBcHBsaWVyT3V0cHV0LmZvcmNlID0gb3V0LmZvcmNlO1xuICBfZm9yY2VBcHBsaWVyT3V0cHV0LnRvcnF1ZSA9IG91dC50b3JxdWU7XG4gIF9mb3JjZUFwcGxpZXJJbnB1dC5zdGF0ZSA9IHN0YXRlO1xuICBfZm9yY2VBcHBsaWVySW5wdXQudCA9IHQgKyBkdDtcbiAgX2ZvcmNlQXBwbGllcklucHV0LmR0ID0gZHQ7XG5cbiAgam9iLmFwcGx5Rm9yY2VzKF9mb3JjZUFwcGxpZXJPdXRwdXQsIF9mb3JjZUFwcGxpZXJJbnB1dCk7XG59XG5cbmNvbnN0IF9FTVBUWV9ERVJJVkFUSVZFID0gSW50ZWdyYXRvci5jcmVhdGVEZXJpdmF0aXZlKCk7XG5cbmNvbnN0IF90ZW1wU3RhdGUgPSBuZXcgUGh5c2ljc1N0YXRlKCk7XG5jb25zdCBfYSA9IEludGVncmF0b3IuY3JlYXRlRGVyaXZhdGl2ZSgpO1xuY29uc3QgX2IgPSBJbnRlZ3JhdG9yLmNyZWF0ZURlcml2YXRpdmUoKTtcbmNvbnN0IF9jID0gSW50ZWdyYXRvci5jcmVhdGVEZXJpdmF0aXZlKCk7XG5jb25zdCBfZCA9IEludGVncmF0b3IuY3JlYXRlRGVyaXZhdGl2ZSgpO1xuXG5jb25zdCBfcG9zaXRpb25EZXJpdmF0aXZlID0gdmVjMy5jcmVhdGUoKTtcbmNvbnN0IF9tb21lbnR1bURlcml2YXRpdmUgPSB2ZWMzLmNyZWF0ZSgpO1xuY29uc3QgX29yaWVudGF0aW9uRGVyaXZhdGl2ZSA9IHF1YXQuY3JlYXRlKCk7XG5jb25zdCBfYW5ndWxhck1vbWVudHVtRGVyaXZhdGl2ZSA9IHZlYzMuY3JlYXRlKCk7XG5cbmNvbnN0IF9mb3JjZUFwcGxpZXJPdXRwdXQgPSB7fTtcbmNvbnN0IF9mb3JjZUFwcGxpZXJJbnB1dCA9IHt9O1xuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gb3V0XG4gKiBAcGFyYW0ge3ZlYzN9IGFcbiAqIEBwYXJhbSB7dmVjM30gYlxuICogQHBhcmFtIHt2ZWMzfSBjXG4gKiBAcGFyYW0ge3ZlYzN9IGRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9jYWxjdWxhdGVWZWMzRGVyaXZhdGl2ZVdlaWdodGVkU3VtKG91dCwgYSwgYiwgYywgZCkge1xuICBvdXRbMF0gPSAxIC8gNiAqIChhWzBdICsgMiAqIChiWzBdICsgY1swXSkgKyBkWzBdKTtcbiAgb3V0WzFdID0gMSAvIDYgKiAoYVsxXSArIDIgKiAoYlsxXSArIGNbMV0pICsgZFsxXSk7XG4gIG91dFsyXSA9IDEgLyA2ICogKGFbMl0gKyAyICogKGJbMl0gKyBjWzJdKSArIGRbMl0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7cXVhdH0gb3V0XG4gKiBAcGFyYW0ge3F1YXR9IGFcbiAqIEBwYXJhbSB7cXVhdH0gYlxuICogQHBhcmFtIHtxdWF0fSBjXG4gKiBAcGFyYW0ge3F1YXR9IGRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9jYWxjdWxhdGVRdWF0RGVyaXZhdGl2ZVdlaWdodGVkU3VtKG91dCwgYSwgYiwgYywgZCkge1xuICBvdXRbMF0gPSAxIC8gNiAqIChhWzBdICsgMiAqIChiWzBdICsgY1swXSkgKyBkWzBdKTtcbiAgb3V0WzFdID0gMSAvIDYgKiAoYVsxXSArIDIgKiAoYlsxXSArIGNbMV0pICsgZFsxXSk7XG4gIG91dFsyXSA9IDEgLyA2ICogKGFbMl0gKyAyICogKGJbMl0gKyBjWzJdKSArIGRbMl0pO1xuICBvdXRbM10gPSAxIC8gNiAqIChhWzNdICsgMiAqIChiWzNdICsgY1szXSkgKyBkWzNdKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1BoeXNpY3NTdGF0ZX0gc3RhdGVcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9jaGVja0ZvclN0YXRlRXJyb3Ioc3RhdGUpIHtcbiAgY29uc3QgZXJyb3JQcm9wZXJ0aWVzID0gW1xuICAgICdwb3NpdGlvbicsXG4gICAgJ21vbWVudHVtJyxcbiAgICAnb3JpZW50YXRpb24nLFxuICAgICdhbmd1bGFyTW9tZW50dW0nLFxuICBdLmZpbHRlcihwcm9wZXJ0eSA9PiBfY29udGFpbnNOYU4oc3RhdGVbcHJvcGVydHldKSk7XG4gIGNvbnN0IHByb3BlcnR5ID0gZXJyb3JQcm9wZXJ0aWVzWzBdO1xuICBpZiAocHJvcGVydHkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cHJvcGVydHl9IGNvbnRhaW5zIGEgTmFOIHZhbHVlIGFmdGVyIGludGVncmF0aW5nOiAke3N0YXRlW3Byb3BlcnR5XX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gdmVjdG9yIGNvbnRhaW5zIGEgTmFOIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7dmVjM30gdlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX2NvbnRhaW5zTmFOKHYpIHtcbiAgcmV0dXJuIGlzTmFOKHZbMF0pIHx8IGlzTmFOKHZbMV0pIHx8IGlzTmFOKHZbMl0pO1xufVxuXG5jb25zdCByazRJbnRlZ3JhdG9yID0gbmV3IFJLNEludGVncmF0b3IoKTtcblxuZXhwb3J0IHtyazRJbnRlZ3JhdG9yfTtcbiIsImltcG9ydCB7RnJhbWVMYXRlbmN5UHJvZmlsZXIsIFBlcnNpc3RlbnRBbmltYXRpb25Kb2J9IGZyb20gJ2xzbC1hbmltYXRleCc7XG5pbXBvcnQge191dGlsfSBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IHtcbiAgY2hlY2tUaGF0Tm9PYmplY3RzQ29sbGlkZSxcbiAgQ29sbGlkYWJsZVBoeXNpY3NKb2IsXG4gIGRldGVybWluZUpvYnNBdFJlc3QsXG4gIGhhbmRsZUNvbGxpc2lvbnNGb3JKb2IsXG4gIHJlY29yZE9sZENvbGxpc2lvbnNGb3JEZXZNb2RlRm9yQWxsQ29sbGlkYWJsZXMsXG59IGZyb20gJy4uL2NvbGxpc2lvbnMnO1xuaW1wb3J0IHtQaHlzaWNzU3RhdGV9IGZyb20gJy4vcGh5c2ljcy1zdGF0ZSc7XG5pbXBvcnQge3JrNEludGVncmF0b3J9IGZyb20gJy4uL2ludGVncmF0b3InO1xuXG5jb25zdCBfRlJBTUVfTEFURU5DWV9MT0dfUEVSSU9EID0gNTAwMDtcbmNvbnN0IF9MQVRFTkNZX0xPR19MQUJFTCA9ICdQaHlzaWNzIGZyYW1lIGR1cmF0aW9uJztcblxuLyoqXG4gKiBUaGlzIHBoeXNpY3MgZW5naW5lIHNpbXVsYXRlcyBoaWdoLXBlcmZvcm1hbmNlLCB0aHJlZS1kaW1lbnNpb25hbCByaWdpZC1ib2R5IGR5bmFtaWNzLlxuICpcbiAqIE5vdGFibGUgZmVhdHVyZXM6XG4gKiAtIEluY2x1ZGVzIGNvbGxpc2lvbiBkZXRlY3Rpb24gd2l0aCBpbXB1bHNlLWJhc2VkIHJlc29sdXRpb24uXG4gKiAtIERlY291cGxlcyB0aGUgcGh5c2ljcyBzaW11bGF0aW9uIGFuZCBhbmltYXRpb24gcmVuZGVyaW5nIHRpbWUgc3RlcHMsIGFuZCB1c2VzIGEgZml4ZWQgdGltZXN0ZXBcbiAqIGZvciB0aGUgcGh5c2ljcyBsb29wLiBUaGlzIGdpdmVzIHVzIG51bWVyaWNhbCBzdGFiaWxpdHkgYW5kIHByZWNpc2UgcmVwcm9kdWNpYmlsaXR5LlxuICogLSBTdXBwcmVzc2VzIGxpbmVhciBhbmQgYW5ndWxhciBtb21lbnRhIGJlbG93IGEgY2VydGFpbiB0aHJlc2hvbGQuXG4gKlxuICogVGhlIGVuZ2luZSBjb25zaXN0cyBwcmltYXJpbHkgb2YgYSBjb2xsZWN0aW9uIG9mIGluZGl2aWR1YWwgcGh5c2ljcyBqb2JzIGFuZCBhbiB1cGRhdGUgbG9vcC4gVGhpc1xuICogdXBkYXRlIGxvb3AgaXMgaW4gdHVybiBjb250cm9sbGVkIGJ5IHRoZSBhbmltYXRpb24gbG9vcC4gSG93ZXZlciwgd2hlcmVhcyB0aGUgYW5pbWF0aW9uIGxvb3BcbiAqIHJlbmRlcnMgZWFjaCBqb2Igb25jZSBwZXIgZnJhbWUgbG9vcC0tcmVnYXJkbGVzcyBvZiBob3cgbXVjaCB0aW1lIGFjdHVhbGx5IGVsYXBzZWQgc2luY2UgdGhlXG4gKiBwcmV2aW91cyBmcmFtZS0tdGhlIHBoeXNpY3MgbG9vcCB1cGRhdGVzIGl0cyBqb2JzIGF0IGEgY29uc3RhbnQgcmF0ZS4gVG8gcmVjb25jaWxlIHRoZXNlIGZyYW1lXG4gKiByYXRlcywgdGhlIHBoeXNpY3MgbG9vcCBydW5zIGFzIG1hbnkgdGltZXMgYXMgaXMgbmVlZGVkIGluIG9yZGVyIHRvIGNhdGNoIHVwIHRvIHRoZSB0aW1lIG9mIHRoZVxuICogY3VycmVudCBhbmltYXRpb24gZnJhbWUuIFRoZSBwaHlzaWNzIGZyYW1lIHJhdGUgc2hvdWxkIGJlIG11Y2ggaGlnaGVyIHRoYW4gdGhlIGFuaW1hdGlvbiBmcmFtZVxuICogcmF0ZS5cbiAqXG4gKiBJdCBpcyBWRVJZIElNUE9SVEFOVCBmb3IgYSBQaHlzaWNzSm9iIHRvIG1pbmltaXplIHRoZSBydW50aW1lIG9mIGl0cyB1cGRhdGUgc3RlcC5cbiAqXG4gKiAjIyBBIG5vdGUgb24gam9iIG9yZGVyXG4gKlxuICogVGhlIGludGVncmF0aW9uK2NvbGxpc2lvbiBwaXBlbGluZSBoYW5kbGUgb25lIGpvYiBhdCBhIHRpbWUuIEEgY29uc2VxdWVuY2Ugb2YgdGhpcyBkZXNpZ25cbiAqIGlzIHRoYXQgaGFsZiBvZiB0aGUgY29sbGlzaW9ucyB0ZWNobmljYWxseSByZXByZXNlbnQgYSBmYWxzZSBpbnRlcmFjdGlvbiBiZXR3ZWVuIHRoZSBzdGF0ZSBvZiB0aGVcbiAqIGZpcnN0IG9iamVjdCBhdCB0aW1lIHQgYW5kIHRoZSBzdGF0ZSBvZiB0aGUgc2Vjb25kIG9iamVjdCBhdCB0aW1lIHQgLSAxLlxuICpcbiAqIFRoaXMgaW1wbGVtZW50YXRpb24gcHJldmVudHMgYSBtb3JlIHByb2JsZW1hdGljIGlzc3VlLiBJZiBhbGwgb2JqZWN0cyB3ZXJlIGZpcnN0IGludGVncmF0ZWQsIHRoZW5cbiAqIGFsbCBvYmplY3RzIHdlcmUgY2hlY2tlZCBmb3IgY29sbGlzaW9ucywgdGhlbiBhbGwgY29sbGlzaW9ucyB3ZXJlIHJlc29sdmVkLCB0aGVuIHRoZSBmb2xsb3dpbmdcbiAqIHNjZW5hcmlvIGNvdWxkIGFyaXNlOlxuICogLSBUaGUgbmV4dCBwb3NpdGlvbiBvZiBvYmplY3QgQSBjb2xsaWRlcyB3aXRoIHRoZSBwcmV2aW91cyBwb3NpdGlvbiBvZiBvYmplY3QgQiwgYnV0IG5vdCB3aXRoIHRoZVxuICogICBuZXh0IHBvc2l0aW9uIG9mIG9iamVjdCBCLCBzbyBvYmplY3QgQSBtb3ZlcyBzdWNjZXNzZnVsbHkgdG8gaXRzIG5ldyBwb3NpdGlvbi5cbiAqIC0gVGhlIG5leHQgcG9zaXRpb24gb2Ygb2JqZWN0IEIgY29sbGlkZXMgd2l0aCB0aGUgbmV4dCBwb3NpdGlvbiBvZiBvYmplY3QgQywgc28gb2JqZWN0cyBCIGFuZCBDXG4gKiAgIGFyZSByZXNldCB0byB0aGVpciBwcmV2aW91cyBwb3NpdGlvbnMuXG4gKiAtIE9iamVjdCBCIGFuZCBDIG5vdyBpbnRlcnNlY3QuXG4gKi9cbmNsYXNzIFBoeXNpY3NFbmdpbmUgZXh0ZW5kcyBQZXJzaXN0ZW50QW5pbWF0aW9uSm9iIHtcbiAgLyoqXG4gICAqIENsaWVudHMgc2hvdWxkIGNhbGwgUGh5c2ljc0VuZ2luZS5jcmVhdGUgaW5zdGVhZCBvZiBpbnN0YW50aWF0aW5nIGEgUGh5c2ljc0VuZ2luZSBkaXJlY3RseS5cbiAgICpcbiAgICogQHBhcmFtIHtQaHlzaWNzQ29uZmlnfSBwaHlzaWNzUGFyYW1zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwaHlzaWNzUGFyYW1zKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGlmIChfcGh5c2ljc0VuZ2luZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5cXCd0IGluc3RhbnRpYXRlIG11bHRpcGxlIGluc3RhbmNlcyBvZiBQaHlzaWNzRW5naW5lLicpO1xuICAgIH1cblxuICAgIF9waHlzaWNzRW5naW5lID0gdGhpcztcblxuICAgIHRoaXMuX3BoeXNpY3NQYXJhbXMgPSBwaHlzaWNzUGFyYW1zO1xuICAgIHRoaXMuaW50ZWdyYXRvciA9IHJrNEludGVncmF0b3I7XG4gICAgdGhpcy5fZWxhcHNlZFRpbWUgPSAwLjA7XG4gICAgdGhpcy5fcmVtYWluaW5nVGltZSA9IDAuMDtcbiAgICB0aGlzLl9ub25Db2xsaWRhYmxlSm9icyA9IFtdO1xuICAgIHRoaXMuX2NvbGxpZGFibGVKb2JzID0gW107XG5cbiAgICBpZiAoX3V0aWwuaXNJbkRldk1vZGUpIHtcbiAgICAgIHRoaXMuX3NldFVwRm9ySW5EZXZNb2RlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UGh5c2ljc0NvbmZpZ30gcGh5c2ljc1BhcmFtc1xuICAgKi9cbiAgc3RhdGljIGNyZWF0ZShwaHlzaWNzUGFyYW1zKSB7XG4gICAgbmV3IFBoeXNpY3NFbmdpbmUocGh5c2ljc1BhcmFtcyk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLl9lbGFwc2VkVGltZSA9IDAuMDtcbiAgICB0aGlzLl9yZW1haW5pbmdUaW1lID0gMC4wO1xuICAgIHRoaXMuX25vbkNvbGxpZGFibGVKb2JzID0gW107XG4gICAgdGhpcy5fY29sbGlkYWJsZUpvYnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBnaXZlbiBQaHlzaWNzSm9iLlxuICAgKlxuICAgKiBAcGFyYW0ge1BoeXNpY3NKb2J9IGpvYlxuICAgKi9cbiAgYWRkSm9iKGpvYikge1xuICAgIC8vIGNvbnNvbGUuZGVidWcoYFN0YXJ0aW5nIFBoeXNpY3NKb2JgKTtcblxuICAgIGlmIChqb2IgaW5zdGFuY2VvZiBDb2xsaWRhYmxlUGh5c2ljc0pvYikge1xuICAgICAgdGhpcy5fY29sbGlkYWJsZUpvYnMucHVzaChqb2IpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ub25Db2xsaWRhYmxlSm9icy5wdXNoKGpvYik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIGdpdmVuIFBoeXNpY3NKb2IuXG4gICAqXG4gICAqIFRocm93cyBubyBlcnJvciBpZiB0aGUgam9iIGlzIG5vdCByZWdpc3RlcmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge1BoeXNpY3NKb2J9IGpvYlxuICAgKi9cbiAgcmVtb3ZlSm9iKGpvYikge1xuICAgIC8vIGNvbnNvbGUuZGVidWcoYENhbmNlbGxpbmcgUGh5c2ljc0pvYmApO1xuICAgIHRoaXMuX3JlbW92ZUpvYihqb2IpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyYXBzIHRoZSBkcmF3IGFuZCB1cGRhdGUgbWV0aG9kcyBpbiBhIHByb2ZpbGVyIGZ1bmN0aW9uIHRoYXQgd2lsbCB0cmFjayB0aGUgZnJhbWUgbGF0ZW5jaWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldFVwRm9ySW5EZXZNb2RlKCkge1xuICAgIGNvbnN0IHVud3JhcHBlZFVwZGF0ZSA9IHRoaXMudXBkYXRlLmJpbmQodGhpcyk7XG4gICAgY29uc3QgbGF0ZW5jeVByb2ZpbGVyID0gbmV3IEZyYW1lTGF0ZW5jeVByb2ZpbGVyKF9GUkFNRV9MQVRFTkNZX0xPR19QRVJJT0QsIFxuICAgICAgICB0aGlzLl9waHlzaWNzUGFyYW1zLnRpbWVTdGVwRHVyYXRpb24sIF9MQVRFTkNZX0xPR19MQUJFTCk7XG4gICAgbGF0ZW5jeVByb2ZpbGVyLnN0YXJ0KCk7XG5cbiAgICB0aGlzLnVwZGF0ZSA9ICguLi5hcmdzKSA9PiB7XG4gICAgICBjb25zdCBiZWZvcmVUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICB1bndyYXBwZWRVcGRhdGUoLi4uYXJncyk7XG4gICAgICBjb25zdCBkZWx0YVRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIGJlZm9yZVRpbWU7XG4gICAgICBsYXRlbmN5UHJvZmlsZXIucmVjb3JkRnJhbWVMYXRlbmN5KGRlbHRhVGltZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIHBoeXNpY3Mgc3RhdGUgZm9yIHRoZSBjdXJyZW50IGFuaW1hdGlvbiB1cGRhdGUgZnJhbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gY3VycmVudFRpbWVcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBkZWx0YVRpbWVcbiAgICovXG4gIHVwZGF0ZShjdXJyZW50VGltZSwgZGVsdGFUaW1lKSB7XG4gICAgdGhpcy5fcmVtYWluaW5nVGltZSArPSBkZWx0YVRpbWU7XG5cbiAgICAvLyBSdW4gYXMgbWFueSBjb25zdGFudC1pbnRlcnZhbCBwaHlzaWNzIHVwZGF0ZXMgYXMgYXJlIG5lZWRlZCBmb3IgdGhlIGdpdmVuIGFuaW1hdGlvbiBmcmFtZVxuICAgIC8vIGludGVydmFsLlxuICAgIHdoaWxlICh0aGlzLl9yZW1haW5pbmdUaW1lID49IHRoaXMuX3BoeXNpY3NQYXJhbXMudGltZVN0ZXBEdXJhdGlvbikge1xuICAgICAgdGhpcy5fdXBkYXRlVG9OZXh0UGh5c2ljc0ZyYW1lKCk7XG4gICAgICB0aGlzLl9lbGFwc2VkVGltZSArPSB0aGlzLl9waHlzaWNzUGFyYW1zLnRpbWVTdGVwRHVyYXRpb247XG4gICAgICB0aGlzLl9yZW1haW5pbmdUaW1lIC09IHRoaXMuX3BoeXNpY3NQYXJhbXMudGltZVN0ZXBEdXJhdGlvbjtcbiAgICB9XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIGludGVybWVkaWF0ZSBwaHlzaWNzIHN0YXRlIHRvIHVzZSBmb3IgcmVuZGVyaW5nIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBmcmFtZS5cbiAgICBjb25zdCBwYXJ0aWFsUmF0aW8gPSB0aGlzLl9yZW1haW5pbmdUaW1lIC8gdGhpcy5fcGh5c2ljc1BhcmFtcy50aW1lU3RlcER1cmF0aW9uO1xuICAgIHRoaXMuX3NldFBhcnRpYWxTdGF0ZUZvclJlbmRlclRpbWVTdGVwRm9yQWxsSm9icyhwYXJ0aWFsUmF0aW8pO1xuICB9XG5cbiAgX3VwZGF0ZVRvTmV4dFBoeXNpY3NGcmFtZSgpIHtcbiAgICBpZiAoX3V0aWwuaXNJbkRldk1vZGUpIHtcbiAgICAgIHRoaXMuX3JlY29yZE9sZFN0YXRlc0ZvckFsbEpvYnNGb3JEZXZNb2RlKCk7XG4gICAgICByZWNvcmRPbGRDb2xsaXNpb25zRm9yRGV2TW9kZUZvckFsbENvbGxpZGFibGVzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbm9uQ29sbGlkYWJsZUpvYnMuZm9yRWFjaCh0aGlzLl9pbnRlZ3JhdGVQaHlzaWNzU3RhdGVGb3JKb2IuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5fY29sbGlkYWJsZUpvYnMuZm9yRWFjaChqb2IgPT4ge1xuICAgICAgaWYgKCFqb2IuaXNBdFJlc3QpIHtcbiAgICAgICAgdGhpcy5faW50ZWdyYXRlUGh5c2ljc1N0YXRlRm9yQ29sbGlkYWJsZUpvYihqb2IpO1xuICAgICAgICBoYW5kbGVDb2xsaXNpb25zRm9ySm9iKGpvYiwgdGhpcy5fZWxhcHNlZFRpbWUsIHRoaXMuX3BoeXNpY3NQYXJhbXMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKF91dGlsLmlzSW5EZXZNb2RlKSB7XG4gICAgICBjaGVja1RoYXROb09iamVjdHNDb2xsaWRlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3VwcHJlc3NMb3dNb21lbnRhRm9yQWxsSm9icygpO1xuXG4gICAgZGV0ZXJtaW5lSm9ic0F0UmVzdCh0aGlzLl9jb2xsaWRhYmxlSm9icyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gam9iIGZyb20gdGhlIGNvbGxlY3Rpb24gb2YgYWN0aXZlIGpvYnMgaWYgaXQgZXhpc3RzLlxuICAgKlxuICAgKiBAcGFyYW0ge1BoeXNpY3NKb2J9IGpvYlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2luZGV4PS0xXVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbW92ZUpvYihqb2IsIGluZGV4ID0gLTEpIHtcbiAgICBpZiAoam9iIGluc3RhbmNlb2YgQ29sbGlkYWJsZVBoeXNpY3NKb2IpIHtcbiAgICAgIF9yZW1vdmVKb2JGcm9tQ29sbGVjdGlvbihqb2IsIGluZGV4LCB0aGlzLl9jb2xsaWRhYmxlSm9icyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9yZW1vdmVKb2JGcm9tQ29sbGVjdGlvbihqb2IsIGluZGV4LCB0aGlzLl9ub25Db2xsaWRhYmxlSm9icyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgY3VycmVudCBwaHlzaWNzIHN0YXRlIGZvciBhIGpvYiBmb3IgdGhlIGN1cnJlbnQgcGh5c2ljcyB1cGRhdGUgZnJhbWUuXG4gICAqXG4gICAqIFRoaXMgaW5jbHVkZXMgYXBwbHlpbmcgYWxsIGZvcmNlcyB0aGF0IGhhdmUgYmVlbiByZWdpc3RlcmVkIHdpdGggdGhlIHBoeXNpY3Mgam9iLlxuICAgKlxuICAgKiBAcGFyYW0ge0NvbGxpZGFibGVQaHlzaWNzSm9ifSBqb2JcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbnRlZ3JhdGVQaHlzaWNzU3RhdGVGb3JDb2xsaWRhYmxlSm9iKGpvYikge1xuICAgIHRoaXMuX2ludGVncmF0ZVBoeXNpY3NTdGF0ZUZvckpvYihqb2IpO1xuXG4gICAgLy8gVXBkYXRlIHRoZSBjb2xsaWRhYmxlJ3MgcG9zaXRpb24gYW5kIG9yaWVudGF0aW9uLlxuICAgIGpvYi5jb2xsaWRhYmxlLnBvc2l0aW9uID0gam9iLmN1cnJlbnRTdGF0ZS5wb3NpdGlvbjtcbiAgICBqb2IuY29sbGlkYWJsZS5vcmllbnRhdGlvbiA9IGpvYi5jdXJyZW50U3RhdGUub3JpZW50YXRpb247XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBjdXJyZW50IHBoeXNpY3Mgc3RhdGUgZm9yIGEgam9iIGZvciB0aGUgY3VycmVudCBwaHlzaWNzIHVwZGF0ZSBmcmFtZS5cbiAgICpcbiAgICogVGhpcyBpbmNsdWRlcyBhcHBseWluZyBhbGwgZm9yY2VzIHRoYXQgaGF2ZSBiZWVuIHJlZ2lzdGVyZWQgd2l0aCB0aGUgcGh5c2ljcyBqb2IuXG4gICAqXG4gICAqIEBwYXJhbSB7UGh5c2ljc0pvYn0gam9iXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW50ZWdyYXRlUGh5c2ljc1N0YXRlRm9ySm9iKGpvYikge1xuICAgIGpvYi5wcmV2aW91c1N0YXRlLmNvcHkoam9iLmN1cnJlbnRTdGF0ZSk7XG4gICAgdGhpcy5pbnRlZ3JhdG9yLmludGVncmF0ZShqb2IsIHRoaXMuX2VsYXBzZWRUaW1lLCB0aGlzLl9waHlzaWNzUGFyYW1zLnRpbWVTdGVwRHVyYXRpb24pO1xuICB9XG5cbiAgX3N1cHByZXNzTG93TW9tZW50YUZvckFsbEpvYnMoKSB7XG4gICAgdGhpcy5fY29sbGlkYWJsZUpvYnMuZm9yRWFjaChqb2IgPT4gX3N1cHByZXNzTG93TW9tZW50YUZvckpvYihqb2IsXG4gICAgICAgIHRoaXMuX3BoeXNpY3NQYXJhbXMubG93TW9tZW50dW1TdXBwcmVzc2lvblRocmVzaG9sZCxcbiAgICAgICAgdGhpcy5fcGh5c2ljc1BhcmFtcy5sb3dBbmd1bGFyTW9tZW50dW1TdXBwcmVzc2lvblRocmVzaG9sZCkpO1xuICAgIHRoaXMuX25vbkNvbGxpZGFibGVKb2JzLmZvckVhY2goam9iID0+IF9zdXBwcmVzc0xvd01vbWVudGFGb3JKb2Ioam9iLFxuICAgICAgICB0aGlzLl9waHlzaWNzUGFyYW1zLmxvd01vbWVudHVtU3VwcHJlc3Npb25UaHJlc2hvbGQsXG4gICAgICAgIHRoaXMuX3BoeXNpY3NQYXJhbXMubG93QW5ndWxhck1vbWVudHVtU3VwcHJlc3Npb25UaHJlc2hvbGQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGludGVybWVkaWF0ZSBwaHlzaWNzIHN0YXRlIHRvIHVzZSBmb3IgcmVuZGVyaW5nIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBmcmFtZS4gVGhlXG4gICAqIGdpdmVuIHJhdGlvIHNwZWNpZmllcyBob3cgZmFyIHRoZSBjdXJyZW50IHJlbmRlciBmcmFtZSBpcyBiZXR3ZWVuIHRoZSBwcmV2aW91cyBhbmQgY3VycmVudFxuICAgKiBwaHlzaWNzIHVwZGF0ZSBmcmFtZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwYXJ0aWFsUmF0aW9cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRQYXJ0aWFsU3RhdGVGb3JSZW5kZXJUaW1lU3RlcEZvckFsbEpvYnMocGFydGlhbFJhdGlvKSB7XG4gICAgdGhpcy5fY29sbGlkYWJsZUpvYnMuZm9yRWFjaChfc2V0UGFydGlhbFN0YXRlRm9yUmVuZGVyVGltZVN0ZXBGb3JKb2IuYmluZChudWxsLCBwYXJ0aWFsUmF0aW8pKTtcbiAgICB0aGlzLl9ub25Db2xsaWRhYmxlSm9icy5mb3JFYWNoKF9zZXRQYXJ0aWFsU3RhdGVGb3JSZW5kZXJUaW1lU3RlcEZvckpvYi5iaW5kKG51bGwsIHBhcnRpYWxSYXRpbykpO1xuICB9XG5cbiAgX3JlY29yZE9sZFN0YXRlc0ZvckFsbEpvYnNGb3JEZXZNb2RlKCkge1xuICAgIHRoaXMuX2NvbGxpZGFibGVKb2JzLmZvckVhY2goX3JlY29yZE9sZFN0YXRlc0ZvckpvYik7XG4gICAgdGhpcy5fbm9uQ29sbGlkYWJsZUpvYnMuZm9yRWFjaChfcmVjb3JkT2xkU3RhdGVzRm9ySm9iKTtcbiAgfVxuXG4gIGRyYXcoKSB7fVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7UGh5c2ljc0VuZ2luZX1cbiAgICovXG4gIHN0YXRpYyBnZXQgaW5zdGFuY2UoKSB7XG4gICAgaWYgKCFfcGh5c2ljc0VuZ2luZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5cXCd0IGFjY2VzcyBQaHlzaWNzRW5naW5lLmluc3RhbmNlIGJlZm9yZSBpdCBoYXMgYmVlbiBpbnN0YW50aWF0ZWQuJyk7XG4gICAgfVxuICAgIHJldHVybiBfcGh5c2ljc0VuZ2luZTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7UGh5c2ljc0pvYn0gam9iXG4gKiBAcGFyYW0ge251bWJlcn0gbG93TW9tZW50dW1TdXBwcmVzc2lvblRocmVzaG9sZFxuICogQHBhcmFtIHtudW1iZXJ9IGxvd0FuZ3VsYXJNb21lbnR1bVN1cHByZXNzaW9uVGhyZXNob2xkXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBfc3VwcHJlc3NMb3dNb21lbnRhRm9ySm9iKGpvYiwgbG93TW9tZW50dW1TdXBwcmVzc2lvblRocmVzaG9sZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG93QW5ndWxhck1vbWVudHVtU3VwcHJlc3Npb25UaHJlc2hvbGQpIHtcbiAgY29uc3QgY3VycmVudFN0YXRlID0gam9iLmN1cnJlbnRTdGF0ZTtcblxuICBpZiAodmVjMy5zcXVhcmVkTGVuZ3RoKGN1cnJlbnRTdGF0ZS5tb21lbnR1bSkgPCBsb3dNb21lbnR1bVN1cHByZXNzaW9uVGhyZXNob2xkKSB7XG4gICAgdmVjMy5zZXQoY3VycmVudFN0YXRlLm1vbWVudHVtLCAwLCAwLCAwKTtcbiAgfVxuXG4gIGlmICh2ZWMzLnNxdWFyZWRMZW5ndGgoY3VycmVudFN0YXRlLmFuZ3VsYXJNb21lbnR1bSkgPCBsb3dBbmd1bGFyTW9tZW50dW1TdXBwcmVzc2lvblRocmVzaG9sZCkge1xuICAgIHZlYzMuc2V0KGN1cnJlbnRTdGF0ZS5hbmd1bGFyTW9tZW50dW0sIDAsIDAsIDApO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtQaHlzaWNzSm9ifSBqb2JcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHBhcmFtIHtBcnJheS48UGh5c2ljc0pvYj59IGpvYnNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9yZW1vdmVKb2JGcm9tQ29sbGVjdGlvbihqb2IsIGluZGV4LCBqb2JzKSB7XG4gIGlmIChpbmRleCA+PSAwKSB7XG4gICAgam9icy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvdW50ID0gam9icy5sZW5ndGg7XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY291bnQ7IGluZGV4KyspIHtcbiAgICAgIGlmIChqb2JzW2luZGV4XSA9PT0gam9iKSB7XG4gICAgICAgIGpvYnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHBhcnRpYWxSYXRpb1xuICogQHBhcmFtIHtQaHlzaWNzSm9ifSBqb2JcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIF9zZXRQYXJ0aWFsU3RhdGVGb3JSZW5kZXJUaW1lU3RlcEZvckpvYihwYXJ0aWFsUmF0aW8sIGpvYikge1xuICBqb2IucmVuZGVyU3RhdGUubGVycChqb2IucHJldmlvdXNTdGF0ZSwgam9iLmN1cnJlbnRTdGF0ZSwgcGFydGlhbFJhdGlvKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1BoeXNpY3NKb2J9IGpvYlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gX3JlY29yZE9sZFN0YXRlc0ZvckpvYihqb2IpIHtcbiAgaWYgKCFqb2IuZXh0cmFQcmV2aW91c1N0YXRlcykge1xuICAgIGpvYi5leHRyYVByZXZpb3VzU3RhdGVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgIGpvYi5leHRyYVByZXZpb3VzU3RhdGVzW2ldID0gbmV3IFBoeXNpY3NTdGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAzOyBpID4gMDsgaS0tKSB7XG4gICAgam9iLmV4dHJhUHJldmlvdXNTdGF0ZXNbaV0uY29weShqb2IuZXh0cmFQcmV2aW91c1N0YXRlc1tpIC0gMV0pO1xuICB9XG4gIGpvYi5leHRyYVByZXZpb3VzU3RhdGVzWzBdLmNvcHkoam9iLnByZXZpb3VzU3RhdGUpO1xufVxuXG5sZXQgX3BoeXNpY3NFbmdpbmUgPSBudWxsO1xuXG5leHBvcnQge1BoeXNpY3NFbmdpbmV9O1xuIiwiaW1wb3J0IHthbmltYXRvcn0gZnJvbSAnbHNsLWFuaW1hdGV4JztcbmltcG9ydCB7UGh5c2ljc0VuZ2luZX0gZnJvbSAnLi9waHlzaWNzLWVuZ2luZSc7XG5pbXBvcnQge1BoeXNpY3NTdGF0ZX0gZnJvbSAnLi9waHlzaWNzLXN0YXRlJztcbmltcG9ydCB7X3V0aWx9IGZyb20gJy4uL3V0aWwnO1xuXG4vKipcbiAqIEEgUGh5c2ljc0pvYiBtYWludGFpbnMgYSBjdXJyZW50IGZvcmNlL21vbWVudHVtIHN0YXRlIGFuZCBkZWZpbmVzIGEgbWV0aG9kIGZvciBhcHBseWluZyBmb3JjZXMgYXRcbiAqIGEgZ2l2ZW4gcGh5c2ljcyB0aW1lIHN0ZXAuXG4gKi9cbmNsYXNzIFBoeXNpY3NKb2Ige1xuICAvKipcbiAgICogQHBhcmFtIHtBcnJheS48Rm9yY2VBcHBsaWVyPn0gW2ZvcmNlQXBwbGllcnNdXG4gICAqIEBwYXJhbSB7UGh5c2ljc1N0YXRlfSBbc3RhdGVdXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihmb3JjZUFwcGxpZXJzLCBzdGF0ZSkge1xuICAgIGZvcmNlQXBwbGllcnMgPSBmb3JjZUFwcGxpZXJzIHx8IFtdO1xuICAgIHN0YXRlID0gc3RhdGUgfHwgbmV3IFBoeXNpY3NTdGF0ZSgpO1xuXG4gICAgdGhpcy5zdGFydFRpbWUgPSBudWxsO1xuICAgIHRoaXMuY3VycmVudFN0YXRlID0gc3RhdGU7XG4gICAgdGhpcy5wcmV2aW91c1N0YXRlID0gbnVsbDtcbiAgICB0aGlzLnJlbmRlclN0YXRlID0gbnVsbDtcbiAgICB0aGlzLl9mb3JjZUFwcGxpZXJzID0gZm9yY2VBcHBsaWVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0ZvcmNlQXBwbGllck91dHB1dH0gb3V0cHV0UGFyYW1zXG4gICAqIEBwYXJhbSB7Rm9yY2VBcHBsaWVySW5wdXR9IGlucHV0UGFyYW1zXG4gICAqL1xuICBhcHBseUZvcmNlcyhvdXRwdXRQYXJhbXMsIGlucHV0UGFyYW1zKSB7XG4gICAgdGhpcy5fZm9yY2VBcHBsaWVycy5mb3JFYWNoKGZvcmNlQXBwbGllciA9PiBmb3JjZUFwcGxpZXIob3V0cHV0UGFyYW1zLCBpbnB1dFBhcmFtcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Rm9yY2VBcHBsaWVyfSBmb3JjZUFwcGxpZXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtpbmRleD0wXSBUaGUgaW5kZXggdG8gYWRkIHRoZSBnaXZlbiBmb3JjZSBhcHBsaWVyIGluIHRoZSBjdXJyZW50IGxpc3Qgb2ZcbiAgICogYXBwbGllcnMuXG4gICAqL1xuICBhZGRGb3JjZUFwcGxpZXIoZm9yY2VBcHBsaWVyLCBpbmRleCA9IDApIHtcbiAgICB0aGlzLl9mb3JjZUFwcGxpZXJzLnNwbGljZShpbmRleCwgMCwgZm9yY2VBcHBsaWVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0ZvcmNlQXBwbGllcn0gZm9yY2VBcHBsaWVyXG4gICAqL1xuICByZW1vdmVGb3JjZUFwcGxpZXIoZm9yY2VBcHBsaWVyKSB7XG4gICAgdGhpcy5fZm9yY2VBcHBsaWVycy5zcGxpY2UodGhpcy5fZm9yY2VBcHBsaWVycy5pbmRleE9mKGZvcmNlQXBwbGllciksIDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyB0aGlzIFBoeXNpY3NKb2IgYW5kIGFsbCBvZiBpdHMgZGVzY2VuZGFudCBjaGlsZCBqb2JzIHdpdGggdGhlIHBoeXNpY3MgZW5naW5lLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0VGltZV1cbiAgICovXG4gIHN0YXJ0KHN0YXJ0VGltZSkge1xuICAgIHRoaXMuc3RhcnRUaW1lID0gc3RhcnRUaW1lIHx8IGFuaW1hdG9yLmN1cnJlbnRUaW1lO1xuXG4gICAgY29uc3QgcHJldmlvdXNTdGF0ZSA9IG5ldyBQaHlzaWNzU3RhdGUoKTtcbiAgICBwcmV2aW91c1N0YXRlLmNvcHkodGhpcy5jdXJyZW50U3RhdGUpO1xuICAgIGNvbnN0IHJlbmRlclN0YXRlID0gbmV3IFBoeXNpY3NTdGF0ZSgpO1xuICAgIHJlbmRlclN0YXRlLmNvcHkodGhpcy5jdXJyZW50U3RhdGUpO1xuXG4gICAgdGhpcy5wcmV2aW91c1N0YXRlID0gcHJldmlvdXNTdGF0ZTtcbiAgICB0aGlzLnJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGU7XG5cbiAgICBpZiAoX3V0aWwuaXNJbkRldk1vZGUpIHtcbiAgICAgIC8vIEl0IGlzIHVzZWZ1bCBmb3IgZGVidWdnaW5nIHRvIGJlIGFibGUgdG8gdHJhY2UgdGhlIHN0YXRlcyBiYWNrIHRvIHRoZWlyIGpvYnMuXG4gICAgICB0aGlzLmN1cnJlbnRTdGF0ZS5qb2IgPSB0aGlzO1xuICAgICAgdGhpcy5wcmV2aW91c1N0YXRlLmpvYiA9IHRoaXM7XG4gICAgICB0aGlzLnJlbmRlclN0YXRlLmpvYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgUGh5c2ljc0VuZ2luZS5pbnN0YW5jZS5hZGRKb2IodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlcnMgdGhpcyBQaHlzaWNzSm9iIGFuZCBhbGwgb2YgaXRzIGRlc2NlbmRhbnQgY2hpbGQgam9icyB3aXRoIHRoZSBwaHlzaWNzIGVuZ2luZS5cbiAgICpcbiAgICogVGhyb3dzIG5vIGVycm9yIGlmIHRoZSBqb2IgaXMgbm90IHJlZ2lzdGVyZWQuXG4gICAqL1xuICBmaW5pc2goKSB7XG4gICAgUGh5c2ljc0VuZ2luZS5pbnN0YW5jZS5yZW1vdmVKb2IodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydFRpbWVdXG4gICAqL1xuICByZXN0YXJ0KHN0YXJ0VGltZSkge1xuICAgIHRoaXMuZmluaXNoKCk7XG4gICAgdGhpcy5zdGFydChzdGFydFRpbWUpO1xuICB9XG59XG5cbmV4cG9ydCB7UGh5c2ljc0pvYn07XG5cbi8qKlxuICogQHR5cGVkZWYge0Z1bmN0aW9ufSBGb3JjZUFwcGxpZXJcbiAqIEBwcm9wZXJ0eSB7dmVjM30gZm9yY2UgT3V0cHV0LlxuICogQHByb3BlcnR5IHt2ZWMzfSB0b3JxdWUgT3V0cHV0LlxuICogQHByb3BlcnR5IHtQaHlzaWNzU3RhdGV9IHN0YXRlIElucHV0LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHQgSW5wdXQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZHQgSW5wdXQuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQaHlzaWNzQ29uZmlnXG4gKiBAcHJvcGVydHkge251bWJlcn0gdGltZVN0ZXBEdXJhdGlvblxuICogQHByb3BlcnR5IHtudW1iZXJ9IGdyYXZpdHlcbiAqIEBwcm9wZXJ0eSB7dmVjM30gX2dyYXZpdHlWZWNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBsaW5lYXJEcmFnQ29lZmZpY2llbnRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBhbmd1bGFyRHJhZ0NvZWZmaWNpZW50XG4gKiBAcHJvcGVydHkge251bWJlcn0gY29lZmZpY2llbnRPZlJlc3RpdHV0aW9uXG4gKiBAcHJvcGVydHkge251bWJlcn0gY29lZmZpY2llbnRPZkZyaWN0aW9uXG4gKiBAcHJvcGVydHkge251bWJlcn0gbG93TW9tZW50dW1TdXBwcmVzc2lvblRocmVzaG9sZFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxvd0FuZ3VsYXJNb21lbnR1bVN1cHByZXNzaW9uVGhyZXNob2xkXG4gKi9cbiIsImltcG9ydCB7cm90YXRlVGVuc29yLCBjcmVhdGVCb3hJbmVydGlhVGVuc29yfSBmcm9tICcuLi91dGlsJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgdGhlIHN0YXRlIG9mIGFuIG9iamVjdCB0aGF0IGlzIG5lZWRlZCBmb3IgYSBwaHlzaWNzIHNpbXVsYXRpb24gKHN1Y2ggYXNcbiAqIHBvc2l0aW9uLCBtb21lbnR1bSwgYW5kIG1hc3MpLlxuICovXG5jbGFzcyBQaHlzaWNzU3RhdGUge1xuICAvKipcbiAgICogQHBhcmFtIHtEeW5hbWljc0NvbmZpZ30gW2R5bmFtaWNzUGFyYW1zPXt9XVxuICAgKi9cbiAgY29uc3RydWN0b3IoZHluYW1pY3NQYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gZHluYW1pY3NQYXJhbXMucG9zaXRpb24gfHwgdmVjMy5jcmVhdGUoKTtcbiAgICBjb25zdCBtb21lbnR1bSA9IGR5bmFtaWNzUGFyYW1zLm1vbWVudHVtIHx8IHZlYzMuY3JlYXRlKCk7XG4gICAgY29uc3Qgb3JpZW50YXRpb24gPSBkeW5hbWljc1BhcmFtcy5vcmllbnRhdGlvbiB8fCBxdWF0LmNyZWF0ZSgpO1xuICAgIGNvbnN0IGFuZ3VsYXJNb21lbnR1bSA9IGR5bmFtaWNzUGFyYW1zLmFuZ3VsYXJNb21lbnR1bSB8fCB2ZWMzLmNyZWF0ZSgpO1xuICAgIGNvbnN0IG1hc3MgPSBkeW5hbWljc1BhcmFtcy5tYXNzIHx8IDE7XG4gICAgY29uc3QgdW5yb3RhdGVkSW5lcnRpYVRlbnNvciA9IGR5bmFtaWNzUGFyYW1zLnVucm90YXRlZEluZXJ0aWFUZW5zb3IgfHwgY3JlYXRlQm94SW5lcnRpYVRlbnNvcigxLCAxLCAxLCBtYXNzKTtcblxuICAgIC8vIENvbnN0YW50IGZpZWxkcy5cblxuICAgIHRoaXMubWFzcyA9IG1hc3M7XG4gICAgdGhpcy5pbnZlcnNlTWFzcyA9IDEgLyBtYXNzO1xuICAgIHRoaXMudW5yb3RhdGVkSW5lcnRpYVRlbnNvciA9IHVucm90YXRlZEluZXJ0aWFUZW5zb3I7XG5cbiAgICAvLyBJbmRlcGVuZGVudCBmaWVsZHMuXG5cbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgdGhpcy5tb21lbnR1bSA9IG1vbWVudHVtO1xuICAgIHRoaXMub3JpZW50YXRpb24gPSBvcmllbnRhdGlvbjtcbiAgICB0aGlzLmFuZ3VsYXJNb21lbnR1bSA9IGFuZ3VsYXJNb21lbnR1bTtcblxuICAgIC8vIERlcGVuZGVudCBmaWVsZHMuXG5cbiAgICAvLyBMaW5lYXIgdmVsb2NpdHkuXG4gICAgdGhpcy52ZWxvY2l0eSA9IHZlYzMuY3JlYXRlKCk7XG4gICAgLy8gUXVhdGVybmlvbi1iYXNlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcmF0ZSBvZiBjaGFuZ2UgaW4gb3JpZW50YXRpb24uXG4gICAgdGhpcy5zcGluID0gcXVhdC5jcmVhdGUoKTtcbiAgICAvLyBWZWN0b3ItYmFzZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIGFuZ3VsYXIgdmVsb2NpdHkuXG4gICAgdGhpcy5hbmd1bGFyVmVsb2NpdHkgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIC8vIFRoZSBpbnZlcnNlIGluZXJ0aWEgdGVuc29yIHJvdGF0ZWQgdG8gdGhlIHdvcmxkIGNvb3JkaW5hdGUgZnJhbWUuXG4gICAgdGhpcy5pbnZlcnNlSW5lcnRpYVRlbnNvciA9IG1hdDMuY3JlYXRlKCk7XG5cbiAgICB0aGlzLnVwZGF0ZURlcGVuZGVudEZpZWxkcygpO1xuICB9XG5cbiAgdXBkYXRlRGVwZW5kZW50RmllbGRzKCkgey8vIFRPRE86IFRlc3QgdGhpcyBzb21laG93Li4uXG4gICAgLy8gVXBkYXRlIGxpbmVhciB2ZWxvY2l0eS5cbiAgICB2ZWMzLnNjYWxlKHRoaXMudmVsb2NpdHksIHRoaXMubW9tZW50dW0sIHRoaXMuaW52ZXJzZU1hc3MpO1xuXG4gICAgLy8gVXBkYXRlIGFuZ3VsYXIgdmVsb2NpdHkuXG4gICAgcXVhdC5ub3JtYWxpemUodGhpcy5vcmllbnRhdGlvbiwgdGhpcy5vcmllbnRhdGlvbik7XG4gICAgcm90YXRlVGVuc29yKHRoaXMuaW52ZXJzZUluZXJ0aWFUZW5zb3IsIHRoaXMudW5yb3RhdGVkSW5lcnRpYVRlbnNvciwgdGhpcy5vcmllbnRhdGlvbik7XG4gICAgbWF0My5pbnZlcnQodGhpcy5pbnZlcnNlSW5lcnRpYVRlbnNvciwgdGhpcy51bnJvdGF0ZWRJbmVydGlhVGVuc29yKTtcbiAgICB2ZWMzLnRyYW5zZm9ybU1hdDModGhpcy5hbmd1bGFyVmVsb2NpdHksIHRoaXMuYW5ndWxhck1vbWVudHVtLCB0aGlzLmludmVyc2VJbmVydGlhVGVuc29yKTtcbiAgICBxdWF0LnNldCh0aGlzLnNwaW4sIHRoaXMuYW5ndWxhclZlbG9jaXR5WzBdLCB0aGlzLmFuZ3VsYXJWZWxvY2l0eVsxXSxcbiAgICAgICAgdGhpcy5hbmd1bGFyVmVsb2NpdHlbMl0sIDApO1xuICAgIHF1YXQuc2NhbGUodGhpcy5zcGluLCB0aGlzLnNwaW4sIDAuNSk7XG4gICAgcXVhdC5tdWx0aXBseSh0aGlzLnNwaW4sIHRoaXMuc3BpbiwgdGhpcy5vcmllbnRhdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybSBhIGRlZXAgY29weS5cbiAgICpcbiAgICogQHBhcmFtIHtQaHlzaWNzU3RhdGV9IG90aGVyXG4gICAqL1xuICBjb3B5KG90aGVyKSB7XG4gICAgdGhpcy5tYXNzID0gb3RoZXIubWFzcztcbiAgICB0aGlzLmludmVyc2VNYXNzID0gb3RoZXIuaW52ZXJzZU1hc3M7XG4gICAgbWF0My5jb3B5KHRoaXMudW5yb3RhdGVkSW5lcnRpYVRlbnNvciwgb3RoZXIudW5yb3RhdGVkSW5lcnRpYVRlbnNvcik7XG4gICAgbWF0My5jb3B5KHRoaXMuaW52ZXJzZUluZXJ0aWFUZW5zb3IsIG90aGVyLmludmVyc2VJbmVydGlhVGVuc29yKTtcbiAgICB2ZWMzLmNvcHkodGhpcy5wb3NpdGlvbiwgb3RoZXIucG9zaXRpb24pO1xuICAgIHZlYzMuY29weSh0aGlzLm1vbWVudHVtLCBvdGhlci5tb21lbnR1bSk7XG4gICAgcXVhdC5jb3B5KHRoaXMub3JpZW50YXRpb24sIG90aGVyLm9yaWVudGF0aW9uKTtcbiAgICB2ZWMzLmNvcHkodGhpcy5hbmd1bGFyTW9tZW50dW0sIG90aGVyLmFuZ3VsYXJNb21lbnR1bSk7XG4gICAgdmVjMy5jb3B5KHRoaXMudmVsb2NpdHksIG90aGVyLnZlbG9jaXR5KTtcbiAgICBxdWF0LmNvcHkodGhpcy5zcGluLCBvdGhlci5zcGluKTtcbiAgICB2ZWMzLmNvcHkodGhpcy5hbmd1bGFyVmVsb2NpdHksIG90aGVyLmFuZ3VsYXJWZWxvY2l0eSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtQaHlzaWNzU3RhdGV9IGFcbiAgICogQHBhcmFtIHtQaHlzaWNzU3RhdGV9IGJcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhcnRpYWxSYXRpb1xuICAgKi9cbiAgbGVycChhLCBiLCBwYXJ0aWFsUmF0aW8pIHtcbiAgICB2ZWMzLmxlcnAodGhpcy5wb3NpdGlvbiwgYS5wb3NpdGlvbiwgYi5wb3NpdGlvbiwgcGFydGlhbFJhdGlvKTtcbiAgICB2ZWMzLmxlcnAodGhpcy5tb21lbnR1bSwgYS5tb21lbnR1bSwgYi5tb21lbnR1bSwgcGFydGlhbFJhdGlvKTtcbiAgICBxdWF0LnNsZXJwKHRoaXMub3JpZW50YXRpb24sIGEub3JpZW50YXRpb24sIGIub3JpZW50YXRpb24sIHBhcnRpYWxSYXRpbyk7XG4gICAgcXVhdC5ub3JtYWxpemUodGhpcy5vcmllbnRhdGlvbiwgdGhpcy5vcmllbnRhdGlvbik7XG4gICAgdmVjMy5sZXJwKHRoaXMuYW5ndWxhck1vbWVudHVtLCBhLmFuZ3VsYXJNb21lbnR1bSwgYi5hbmd1bGFyTW9tZW50dW0sIHBhcnRpYWxSYXRpbyk7XG4gICAgdGhpcy51cGRhdGVEZXBlbmRlbnRGaWVsZHMoKTtcbiAgfVxufVxuXG5leHBvcnQge1BoeXNpY3NTdGF0ZX07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRHluYW1pY3NDb25maWdcbiAqIEBwcm9wZXJ0eSB7dmVjM30gW3Bvc2l0aW9uXVxuICogQHByb3BlcnR5IHt2ZWMzfSBbbW9tZW50dW1dXG4gKiBAcHJvcGVydHkge3F1YXR9IFtvcmllbnRhdGlvbl1cbiAqIEBwcm9wZXJ0eSB7dmVjM30gW2FuZ3VsYXJNb21lbnR1bV1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWFzc11cbiAqIEBwcm9wZXJ0eSB7bWF0M30gW3Vucm90YXRlZEluZXJ0aWFUZW5zb3JdXG4gKi9cbiIsImV4cG9ydCAqIGZyb20gJy4vc3JjL2ZvcmNlLXV0aWxzJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2dlb21ldHJ5JztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2luZXJ0aWEtdGVuc29yLXV0aWxzJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL3V0aWwnO1xuIiwiLyoqXG4gKiBUaGlzIG1vZHVsZSBkZWZpbmVzIGEgY29sbGVjdGlvbiBvZiBzdGF0aWMgZ2VuZXJhbCB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgY2FsY3VsYXRpbmcgZm9yY2VzLlxuICovXG5cbi8qKlxuICogQHBhcmFtIHtHcmF2aXR5QXBwbGllckNvbmZpZ30gY29uZmlnXG4gKiBAcGFyYW0ge0ZvcmNlQXBwbGllck91dHB1dH0gb3V0cHV0XG4gKiBAcGFyYW0ge0ZvcmNlQXBwbGllcklucHV0fSBpbnB1dFxuICovXG5mdW5jdGlvbiBhcHBseUdyYXZpdHkoY29uZmlnLCBvdXRwdXQsIGlucHV0KSB7XG4gIHZlYzMuc2NhbGVBbmRBZGQob3V0cHV0LmZvcmNlLCBvdXRwdXQuZm9yY2UsIGNvbmZpZy5fZ3Jhdml0eVZlYywgaW5wdXQuc3RhdGUubWFzcyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtMaW5lYXJEcmFnQXBwbGllckNvbmZpZ30gY29uZmlnXG4gKiBAcGFyYW0ge0ZvcmNlQXBwbGllck91dHB1dH0gb3V0cHV0XG4gKiBAcGFyYW0ge0ZvcmNlQXBwbGllcklucHV0fSBpbnB1dFxuICovXG5mdW5jdGlvbiBhcHBseUxpbmVhckRyYWcoY29uZmlnLCBvdXRwdXQsIGlucHV0KSB7XG4gIGNvbnN0IGRyYWdNYWduaXR1ZGUgPSAtdmVjMy5zcXVhcmVkTGVuZ3RoKGlucHV0LnN0YXRlLnZlbG9jaXR5KSAqIGNvbmZpZy5saW5lYXJEcmFnQ29lZmZpY2llbnQ7XG4gIHZlYzMubm9ybWFsaXplKF92ZWMzLCBpbnB1dC5zdGF0ZS52ZWxvY2l0eSk7XG4gIHZlYzMuc2NhbGVBbmRBZGQob3V0cHV0LmZvcmNlLCBvdXRwdXQuZm9yY2UsIF92ZWMzLCBkcmFnTWFnbml0dWRlKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FuZ3VsYXJEcmFnQXBwbGllckNvbmZpZ30gY29uZmlnXG4gKiBAcGFyYW0ge0ZvcmNlQXBwbGllck91dHB1dH0gb3V0cHV0XG4gKiBAcGFyYW0ge0ZvcmNlQXBwbGllcklucHV0fSBpbnB1dFxuICovXG5mdW5jdGlvbiBhcHBseUFuZ3VsYXJEcmFnKGNvbmZpZywgb3V0cHV0LCBpbnB1dCkge1xuICB2ZWMzLnNjYWxlQW5kQWRkKG91dHB1dC50b3JxdWUsIG91dHB1dC50b3JxdWUsIGlucHV0LnN0YXRlLmFuZ3VsYXJWZWxvY2l0eSxcbiAgICAgIGNvbmZpZy5hbmd1bGFyRHJhZ0NvZWZmaWNpZW50KTtcbn1cblxuLyoqXG4gKiBBcHBsaWVzIGEgc2ltcGxlIGxpbmVhciBzcHJpbmcgZm9yY2UgKHVzaW5nIEhvb2tlJ3MgbGF3KS5cbiAqXG4gKiBmb3JjZSA9IGRpc3BsYWNlbWVudCAqIGNvZWZmaWNpZW50XG4gKlxuICogQHBhcmFtIHtMaW5lYXJTcHJpbmdGb3JjZUFwcGxpZXJDb25maWd9IGNvbmZpZ1xuICogQHBhcmFtIHtGb3JjZUFwcGxpZXJPdXRwdXR9IG91dHB1dFxuICogQHBhcmFtIHtGb3JjZUFwcGxpZXJJbnB1dH0gaW5wdXRcbiAqL1xuZnVuY3Rpb24gYXBwbHlMaW5lYXJTcHJpbmdGb3JjZShjb25maWcsIG91dHB1dCwgaW5wdXQpIHtcbiAgdmVjMy5zdWJ0cmFjdChfdmVjMywgY29uZmlnLmdldEludGVuZGVkUG9zaXRpb24oKSwgaW5wdXQuc3RhdGUucG9zaXRpb24pO1xuICB2ZWMzLnNjYWxlQW5kQWRkKG91dHB1dC5mb3JjZSwgb3V0cHV0LmZvcmNlLCBfdmVjMywgY29uZmlnLnNwcmluZ0NvZWZmaWNpZW50KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1NwcmluZ0RhbXBpbmdBcHBsaWVyQ29uZmlnfSBjb25maWdcbiAqIEBwYXJhbSB7Rm9yY2VBcHBsaWVyT3V0cHV0fSBvdXRwdXRcbiAqIEBwYXJhbSB7Rm9yY2VBcHBsaWVySW5wdXR9IGlucHV0XG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3ByaW5nRGFtcGluZyhjb25maWcsIG91dHB1dCwgaW5wdXQpIHtcbiAgdmVjMy5zY2FsZShfdmVjMywgaW5wdXQuc3RhdGUudmVsb2NpdHksIC1jb25maWcuZGFtcGluZ0NvZWZmaWNpZW50KTtcbiAgdmVjMy5hZGQob3V0cHV0LmZvcmNlLCBvdXRwdXQuZm9yY2UsIF92ZWMzKTtcbn1cblxuY29uc3QgX3ZlYzMgPSB2ZWMzLmNyZWF0ZSgpO1xuXG5leHBvcnQge1xuICBhcHBseUFuZ3VsYXJEcmFnLFxuICBhcHBseUdyYXZpdHksXG4gIGFwcGx5TGluZWFyRHJhZyxcbiAgYXBwbHlMaW5lYXJTcHJpbmdGb3JjZSxcbiAgYXBwbHlTcHJpbmdEYW1waW5nLFxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEdyYXZpdHlBcHBsaWVyQ29uZmlnXG4gKiBAcHJvcGVydHkge3ZlYzN9IF9ncmF2aXR5VmVjXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMaW5lYXJEcmFnQXBwbGllckNvbmZpZ1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGxpbmVhckRyYWdDb2VmZmljaWVudFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQW5ndWxhckRyYWdBcHBsaWVyQ29uZmlnXG4gKiBAcHJvcGVydHkge251bWJlcn0gYW5ndWxhckRyYWdDb2VmZmljaWVudFxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gTGluZWFyU3ByaW5nRm9yY2VBcHBsaWVyQ29uZmlnXG4gKiBAcHJvcGVydHkge251bWJlcn0gc3ByaW5nQ29lZmZpY2llbnRcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb24uPHZlYzM+fSBnZXRJbnRlbmRlZFBvc2l0aW9uXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBTcHJpbmdEYW1waW5nQXBwbGllckNvbmZpZ1xuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhbXBpbmdDb2VmZmljaWVudFxuICovXG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgYSBjb2xsZWN0aW9uIG9mIHN0YXRpYyBnZW9tZXRyeSB1dGlsaXR5IGZ1bmN0aW9ucy5cbiAqL1xuXG5jb25zdCBFUFNJTE9OID0gMC4wMDAwMDAxO1xuY29uc3QgSEFMRl9QSSA9IE1hdGguUEkgLyAyO1xuY29uc3QgVFdPX1BJID0gTWF0aC5QSSAqIDI7XG5cbi8qKlxuICogRmluZHMgdGhlIG1pbmltdW0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIHR3byBsaW5lIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSB7TGluZVNlZ21lbnR9IHNlZ21lbnRBXG4gKiBAcGFyYW0ge0xpbmVTZWdtZW50fSBzZWdtZW50QlxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gZmluZFNxdWFyZWREaXN0YW5jZUJldHdlZW5TZWdtZW50cyhzZWdtZW50QSwgc2VnbWVudEIpIHtcbiAgZmluZENsb3Nlc3RQb2ludHNGcm9tU2VnbWVudFRvU2VnbWVudChfc2VnbWVudERpc3RhbmNlX3RtcFZlY0EsIF9zZWdtZW50RGlzdGFuY2VfdG1wVmVjQixcbiAgICAgIHNlZ21lbnRBLCBzZWdtZW50Qik7XG4gIHJldHVybiB2ZWMzLnNxdWFyZWREaXN0YW5jZShfc2VnbWVudERpc3RhbmNlX3RtcFZlY0EsIF9zZWdtZW50RGlzdGFuY2VfdG1wVmVjQik7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG1pbmltdW0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgbGluZSBzZWdtZW50IGFuZCBhIHBvaW50LlxuICpcbiAqIEBwYXJhbSB7TGluZVNlZ21lbnR9IHNlZ21lbnRcbiAqIEBwYXJhbSB7dmVjM30gcG9pbnRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGZpbmRTcXVhcmVkRGlzdGFuY2VGcm9tU2VnbWVudFRvUG9pbnQoc2VnbWVudCwgcG9pbnQpIHtcbiAgZmluZENsb3Nlc3RQb2ludE9uU2VnbWVudFRvUG9pbnQoX3NlZ21lbnREaXN0YW5jZV90bXBWZWNBLCBzZWdtZW50LCBwb2ludCk7XG4gIHJldHVybiB2ZWMzLnNxdWFyZWREaXN0YW5jZShfc2VnbWVudERpc3RhbmNlX3RtcFZlY0EsIHBvaW50KTtcbn1cblxuY29uc3QgX3NlZ21lbnREaXN0YW5jZV90bXBWZWNBID0gdmVjMy5jcmVhdGUoKTtcbmNvbnN0IF9zZWdtZW50RGlzdGFuY2VfdG1wVmVjQiA9IHZlYzMuY3JlYXRlKCk7XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBvdXRwdXRQb2ludCBPdXRwdXQgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtBYWJifSBhYWJiXG4gKiBAcGFyYW0ge3ZlYzN9IHRhcmdldFBvaW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDbG9zZXN0UG9pbnRGcm9tQWFiYlRvUG9pbnQob3V0cHV0UG9pbnQsIGFhYmIsIHRhcmdldFBvaW50KSB7XG4gIG91dHB1dFBvaW50WzBdID0gYWFiYi5taW5YID4gdGFyZ2V0UG9pbnRbMF1cbiAgICAgID8gYWFiYi5taW5YXG4gICAgICA6IGFhYmIubWF4WCA8IHRhcmdldFBvaW50WzBdXG4gICAgICAgICAgPyBhYWJiLm1heFhcbiAgICAgICAgICA6IHRhcmdldFBvaW50WzBdO1xuICBvdXRwdXRQb2ludFsxXSA9IGFhYmIubWluWSA+IHRhcmdldFBvaW50WzFdXG4gICAgICA/IGFhYmIubWluWVxuICAgICAgOiBhYWJiLm1heFkgPCB0YXJnZXRQb2ludFsxXVxuICAgICAgICAgID8gYWFiYi5tYXhZXG4gICAgICAgICAgOiB0YXJnZXRQb2ludFsxXTtcbiAgb3V0cHV0UG9pbnRbMl0gPSBhYWJiLm1pblogPiB0YXJnZXRQb2ludFsyXVxuICAgICAgPyBhYWJiLm1pblpcbiAgICAgIDogYWFiYi5tYXhaIDwgdGFyZ2V0UG9pbnRbMl1cbiAgICAgICAgICA/IGFhYmIubWF4WlxuICAgICAgICAgIDogdGFyZ2V0UG9pbnRbMl07XG59XG5cbi8qKlxuICogQHBhcmFtIHt2ZWMzfSBvdXRwdXRQb2ludCBPdXRwdXQgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtBYWJifSBhYWJiXG4gKiBAcGFyYW0ge3ZlYzN9IHRhcmdldFBvaW50XG4gKi9cbmZ1bmN0aW9uIGZpbmRDbG9zZXN0UG9pbnRGcm9tQWFiYlN1cmZhY2VUb1BvaW50KG91dHB1dFBvaW50LCBhYWJiLCB0YXJnZXRQb2ludCkge1xuICBmaW5kQ2xvc2VzdFBvaW50RnJvbUFhYmJUb1BvaW50KG91dHB1dFBvaW50LCBhYWJiLCB0YXJnZXRQb2ludCk7XG5cbiAgLy8gSWYgdGhlIGNhbGN1bGF0ZWQgcG9pbnQgbGllcyB3aXRoaW4gdGhlIEFBQkIsIHRoZW4gd2UgbmVlZCB0byBhZGp1c3Qgb25lIGNvb3JkaW5hdGUgdG8gbGllXG4gIC8vIGFsb25nIHRoZSBlZGdlIG9mIHRoZSBBQUJCLlxuICBpZiAoYWFiYlZzUG9pbnQoYWFiYiwgb3V0cHV0UG9pbnQpKSB7XG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBjbG9zZXN0IHZlcnRleC5cbiAgICBfdG1wVmVjMVswXSA9IHRhcmdldFBvaW50WzBdIC0gYWFiYi5taW5YIDwgYWFiYi5tYXhYIC0gdGFyZ2V0UG9pbnRbMF1cbiAgICAgICAgPyBhYWJiLm1pblhcbiAgICAgICAgOiBhYWJiLm1heFg7XG4gICAgX3RtcFZlYzFbMV0gPSB0YXJnZXRQb2ludFsxXSAtIGFhYmIubWluWSA8IGFhYmIubWF4WSAtIHRhcmdldFBvaW50WzFdXG4gICAgICAgID8gYWFiYi5taW5ZXG4gICAgICAgIDogYWFiYi5tYXhZO1xuICAgIF90bXBWZWMxWzJdID0gdGFyZ2V0UG9pbnRbMl0gLSBhYWJiLm1pblogPCBhYWJiLm1heFogLSB0YXJnZXRQb2ludFsyXVxuICAgICAgICA/IGFhYmIubWluWlxuICAgICAgICA6IGFhYmIubWF4WjtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgdG8gdGhlIHZlcnRleCBhbG9uZyBlYWNoIGRpbWVuc2lvbi5cbiAgICBfdG1wVmVjMlswXSA9IF90bXBWZWMxWzBdIC0gb3V0cHV0UG9pbnRbMF07XG4gICAgX3RtcFZlYzJbMF0gPSBfdG1wVmVjMlswXSA8IDAgPyAtX3RtcFZlYzJbMF0gOiBfdG1wVmVjMlswXTtcbiAgICBfdG1wVmVjMlsxXSA9IF90bXBWZWMxWzFdIC0gb3V0cHV0UG9pbnRbMV07XG4gICAgX3RtcFZlYzJbMV0gPSBfdG1wVmVjMlsxXSA8IDEgPyAtX3RtcFZlYzJbMV0gOiBfdG1wVmVjMlsxXTtcbiAgICBfdG1wVmVjMlsyXSA9IF90bXBWZWMxWzJdIC0gb3V0cHV0UG9pbnRbMl07XG4gICAgX3RtcFZlYzJbMl0gPSBfdG1wVmVjMlsyXSA8IDIgPyAtX3RtcFZlYzJbMl0gOiBfdG1wVmVjMlsyXTtcblxuICAgIC8vIERldGVybWluZSBhbG9uZyB3aGljaCBkaW1lbnNpb24gdGhlIHBvaW50IGlzIGNsb3Nlc3QgdG8gdGhlIEFBQkIuXG4gICAgY29uc3QgaW5kZXggPSBfdG1wVmVjMlswXSA8IF90bXBWZWMyWzFdXG4gICAgICAgID8gKF90bXBWZWMyWzBdIDwgX3RtcFZlYzJbMl1cbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiAyKVxuICAgICAgICA6IChfdG1wVmVjMlsxXSA8IF90bXBWZWMyWzJdXG4gICAgICAgICAgICA/IDFcbiAgICAgICAgICAgIDogMik7XG5cbiAgICBvdXRwdXRQb2ludFtpbmRleF0gPSBfdG1wVmVjMVtpbmRleF07XG4gIH1cbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgcG9pbnQgb2YgaW50ZXJzZWN0aW9uIGJldHdlZW4gYSBsaW5lIHNlZ21lbnQgYW5kIGEgY29wbGFuYXIgcXVhZHJpbGF0ZXJhbC5cbiAqXG4gKiBUaGlzIGFzc3VtZXMgdGhlIHJlZ2lvbiBpcyBub3QgZGVnZW5lcmF0ZSAoaGFzIG5vbi16ZXJvIHNpZGUgbGVuZ3RocykuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBwb2kgT3V0cHV0IHBhcmFtLiBOdWxsIGlmIHRoZXJlIGlzIG5vIGludGVyc2VjdGlvbi5cbiAqIEBwYXJhbSB7TGluZVNlZ21lbnR9IHNlZ21lbnRcbiAqIEBwYXJhbSB7dmVjM30gcGxhbmVWZXJ0ZXgxXG4gKiBAcGFyYW0ge3ZlYzN9IHBsYW5lVmVydGV4MlxuICogQHBhcmFtIHt2ZWMzfSBwbGFuZVZlcnRleDNcbiAqIEBwYXJhbSB7dmVjM30gcGxhbmVWZXJ0ZXg0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGVyZSBpcyBhbiBpbnRlcnNlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGZpbmRQb2lCZXR3ZWVuU2VnbWVudEFuZFBsYW5lUmVnaW9uKHBvaSwgc2VnbWVudCwgcGxhbmVWZXJ0ZXgxLCBwbGFuZVZlcnRleDIsIHBsYW5lVmVydGV4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYW5lVmVydGV4NCkge1xuICByZXR1cm4gZmluZFBvaUJldHdlZW5TZWdtZW50QW5kVHJpYW5nbGUocG9pLCBzZWdtZW50LCBwbGFuZVZlcnRleDEsIHBsYW5lVmVydGV4MiwgcGxhbmVWZXJ0ZXgzKSB8fFxuICAgICAgZmluZFBvaUJldHdlZW5TZWdtZW50QW5kVHJpYW5nbGUocG9pLCBzZWdtZW50LCBwbGFuZVZlcnRleDEsIHBsYW5lVmVydGV4MywgcGxhbmVWZXJ0ZXg0KTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgcG9pbnQgb2YgaW50ZXJzZWN0aW9uIGJldHdlZW4gYSBsaW5lIHNlZ21lbnQgYW5kIGEgdHJpYW5nbGUuXG4gKlxuICogVGhpcyBhc3N1bWVzIHRoZSB0cmlhbmdsZSBpcyBub3QgZGVnZW5lcmF0ZSAoaGFzIG5vbi16ZXJvIHNpZGUgbGVuZ3RocykuXG4gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogT3JpZ2luYWxseSBiYXNlZCBvbiBEYW4gU3VuZGF5J3MgYWxnb3JpdGhtcyBhdCBodHRwOi8vZ2VvbWFsZ29yaXRobXMuY29tL2EwNi1faW50ZXJzZWN0LTIuaHRtbC5cbiAqXG4gKiBDb3B5cmlnaHQgMjAwMSBzb2Z0U3VyZmVyLCAyMDEyIERhbiBTdW5kYXlcbiAqIFRoaXMgY29kZSBtYXkgYmUgZnJlZWx5IHVzZWQgYW5kIG1vZGlmaWVkIGZvciBhbnkgcHVycG9zZVxuICogcHJvdmlkaW5nIHRoYXQgdGhpcyBjb3B5cmlnaHQgbm90aWNlIGlzIGluY2x1ZGVkIHdpdGggaXQuXG4gKiBTb2Z0U3VyZmVyIG1ha2VzIG5vIHdhcnJhbnR5IGZvciB0aGlzIGNvZGUsIGFuZCBjYW5ub3QgYmUgaGVsZFxuICogbGlhYmxlIGZvciBhbnkgcmVhbCBvciBpbWFnaW5lZCBkYW1hZ2UgcmVzdWx0aW5nIGZyb20gaXRzIHVzZS5cbiAqIFVzZXJzIG9mIHRoaXMgY29kZSBtdXN0IHZlcmlmeSBjb3JyZWN0bmVzcyBmb3IgdGhlaXIgYXBwbGljYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBwb2kgT3V0cHV0IHBhcmFtLiBOdWxsIGlmIHRoZXJlIGlzIG5vIGludGVyc2VjdGlvbi5cbiAqIEBwYXJhbSB7TGluZVNlZ21lbnR9IHNlZ21lbnRcbiAqIEBwYXJhbSB7dmVjM30gdHJpYW5nbGVWZXJ0ZXgxXG4gKiBAcGFyYW0ge3ZlYzN9IHRyaWFuZ2xlVmVydGV4MlxuICogQHBhcmFtIHt2ZWMzfSB0cmlhbmdsZVZlcnRleDNcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZXJlIGlzIGFuIGludGVyc2VjdGlvbi5cbiAqL1xuZnVuY3Rpb24gZmluZFBvaUJldHdlZW5TZWdtZW50QW5kVHJpYW5nbGUocG9pLCBzZWdtZW50LCB0cmlhbmdsZVZlcnRleDEsIHRyaWFuZ2xlVmVydGV4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlVmVydGV4Mykge1xuICAvL1xuICAvLyBGaW5kIHRoZSBwb2ludCBvZiBpbnRlcnNlY3Rpb24gYmV0d2VlbiB0aGUgc2VnbWVudCBhbmQgdGhlIHRyaWFuZ2xlJ3MgcGxhbmUuXG4gIC8vXG5cbiAgLy8gRmlyc3QgdHJpYW5nbGUgZWRnZS5cbiAgdmVjMy5zdWJ0cmFjdChfdG1wVmVjMSwgdHJpYW5nbGVWZXJ0ZXgyLCB0cmlhbmdsZVZlcnRleDEpO1xuICAvLyBTZWNvbmQgdHJpYW5nbGUgZWRnZS5cbiAgdmVjMy5zdWJ0cmFjdChfdG1wVmVjMiwgdHJpYW5nbGVWZXJ0ZXgzLCB0cmlhbmdsZVZlcnRleDEpO1xuICAvLyBUcmlhbmdsZSBub3JtYWwuXG4gIHZlYzMuY3Jvc3MoX3RtcFZlYzMsIF90bXBWZWMxLCBfdG1wVmVjMik7XG4gIC8vIFRyaWFuZ2xlIHRvIHNlZ21lbnQuXG4gIHZlYzMuc3VidHJhY3QoX3RtcFZlYzQsIHNlZ21lbnQuc3RhcnQsIHRyaWFuZ2xlVmVydGV4MSk7XG5cbiAgY29uc3Qgbm9ybWFsVG9TZWdtZW50UHJvaiA9IHZlYzMuZG90KF90bXBWZWMzLCBzZWdtZW50LmRpcik7XG5cbiAgaWYgKG5vcm1hbFRvU2VnbWVudFByb2ogPCBFUFNJTE9OICYmIG5vcm1hbFRvU2VnbWVudFByb2ogPiAtRVBTSUxPTikge1xuICAgIC8vIFRoZSBsaW5lIHNlZ21lbnQgaXMgcGFyYWxsZWwgdG8gdGhlIHRyaWFuZ2xlLlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IG5vcm1hbFRvRGlmZlByb2ogPSAtdmVjMy5kb3QoX3RtcFZlYzMsIF90bXBWZWM0KTtcbiAgY29uc3Qgc2VnbWVudE5vcm1hbGl6ZWREaXN0YW5jZSA9IG5vcm1hbFRvRGlmZlByb2ogLyBub3JtYWxUb1NlZ21lbnRQcm9qO1xuXG4gIGlmIChzZWdtZW50Tm9ybWFsaXplZERpc3RhbmNlIDwgMCB8fCBzZWdtZW50Tm9ybWFsaXplZERpc3RhbmNlID4gMSkge1xuICAgIC8vIFRoZSBsaW5lIHNlZ21lbnQgZW5kcyBiZWZvcmUgaW50ZXJzZWN0aW5nIHRoZSBwbGFuZS5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2ZWMzLnNjYWxlQW5kQWRkKHBvaSwgc2VnbWVudC5zdGFydCwgc2VnbWVudC5kaXIsIHNlZ21lbnROb3JtYWxpemVkRGlzdGFuY2UpO1xuXG4gIC8vXG4gIC8vIERldGVybWluZSB3aGV0aGVyIHRoZSBwb2ludCBvZiBpbnRlcnNlY3Rpb24gbGllcyB3aXRoaW4gdGhlIHRyaWFuZ2xlLlxuICAvL1xuXG4gIGNvbnN0IGVkZ2UxRG90RWRnZTEgPSB2ZWMzLmRvdChfdG1wVmVjMSwgX3RtcFZlYzEpO1xuICBjb25zdCBlZGdlMURvdEVkZ2UyID0gdmVjMy5kb3QoX3RtcFZlYzEsIF90bXBWZWMyKTtcbiAgY29uc3QgZWRnZTJEb3RFZGdlMiA9IHZlYzMuZG90KF90bXBWZWMyLCBfdG1wVmVjMik7XG4gIC8vIFRyaWFuZ2xlIHRvIHBvaW50IG9mIGludGVyc2VjdGlvbi5cbiAgdmVjMy5zdWJ0cmFjdChfdG1wVmVjMywgcG9pLCB0cmlhbmdsZVZlcnRleDEpO1xuICBjb25zdCBkaWZmRG90RWRnZTEgPSB2ZWMzLmRvdChfdG1wVmVjMywgX3RtcFZlYzEpO1xuICBjb25zdCBkaWZmRG90RWRnZTIgPSB2ZWMzLmRvdChfdG1wVmVjMywgX3RtcFZlYzIpO1xuICBjb25zdCBkZW5vbWluYXRvciA9IGVkZ2UxRG90RWRnZTIgKiBlZGdlMURvdEVkZ2UyIC0gZWRnZTFEb3RFZGdlMSAqIGVkZ2UyRG90RWRnZTI7XG5cbiAgLy8gQ2hlY2sgdGhlIHRyaWFuZ2xlJ3MgcGFyYW1ldHJpYyBjb29yZGluYXRlcy5cbiAgY29uc3QgcyA9IChlZGdlMURvdEVkZ2UyICogZGlmZkRvdEVkZ2UyIC0gZWRnZTJEb3RFZGdlMiAqIGRpZmZEb3RFZGdlMSkgLyBkZW5vbWluYXRvcjtcbiAgaWYgKHMgPCAwIHx8IHMgPiAxKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHQgPSAoZWRnZTFEb3RFZGdlMiAqIGRpZmZEb3RFZGdlMSAtIGVkZ2UxRG90RWRnZTEgKiBkaWZmRG90RWRnZTIpIC8gZGVub21pbmF0b3I7XG4gIGlmICh0IDwgMCB8fCBzICsgdCA+IDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBPcmlnaW5hbGx5IGJhc2VkIG9uIEp1a2thIEp5bMOkbmtpJ3MgYWxnb3JpdGhtIGF0XG4gKiBodHRwczovL2dpdGh1Yi5jb20vanVqL01hdGhHZW9MaWIvYmxvYi8xMDkzZTM5ZDkxZGVmN2ZmNjkwNWZiNzQ4OTg5MzE5MGQ3ZDgxMzUzL3NyYy9HZW9tZXRyeS9PQkIuY3BwLlxuICpcbiAqIENvcHlyaWdodCAyMDExIEp1a2thIEp5bMOkbmtpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXRwdXRQb2ludCBPdXRwdXQgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtPYmJ9IG9iYlxuICogQHBhcmFtIHt2ZWMzfSB0YXJnZXRQb2ludFxuICovXG5mdW5jdGlvbiBmaW5kQ2xvc2VzdFBvaW50RnJvbU9iYlRvUG9pbnQob3V0cHV0UG9pbnQsIG9iYiwgdGFyZ2V0UG9pbnQpIHtcbiAgdmVjMy5zdWJ0cmFjdChfdG1wVmVjMSwgdGFyZ2V0UG9pbnQsIG9iYi5jZW50ZXJPZlZvbHVtZSk7XG4gIHZlYzMuY29weShvdXRwdXRQb2ludCwgb2JiLmNlbnRlck9mVm9sdW1lKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAvLyBDb21wdXRlIHRoZSBkaXNwbGFjZW1lbnQgYWxvbmcgdGhpcyBheGlzLlxuICAgIGxldCBwcm9qZWN0aW9uID0gdmVjMy5kb3Qob2JiLmF4ZXNbaV0sIF90bXBWZWMxKTtcbiAgICBwcm9qZWN0aW9uID0gcHJvamVjdGlvbiA+IG9iYi5oYWxmU2lkZUxlbmd0aHNbaV0gPyBvYmIuaGFsZlNpZGVMZW5ndGhzW2ldIDpcbiAgICAgICAgKHByb2plY3Rpb24gPCAtb2JiLmhhbGZTaWRlTGVuZ3Roc1tpXSA/IC1vYmIuaGFsZlNpZGVMZW5ndGhzW2ldIDogcHJvamVjdGlvbik7XG4gICAgdmVjMy5zY2FsZUFuZEFkZChvdXRwdXRQb2ludCwgb3V0cHV0UG9pbnQsIG9iYi5heGVzW2ldLCBwcm9qZWN0aW9uKTtcbiAgfVxufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBjbG9zZXN0IHBvc2l0aW9uIG9uIG9uZSBsaW5lIHNlZ21lbnQgdG8gdGhlIG90aGVyIGxpbmUgc2VnbWVudCwgYW5kIHZpY2UgdmVyc2EuXG4gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogT3JpZ2luYWxseSBiYXNlZCBvbiBKdWtrYSBKeWzDpG5raSdzIGFsZ29yaXRobSBhdFxuICogaHR0cHM6Ly9naXRodWIuY29tL2p1ai9NYXRoR2VvTGliL2Jsb2IvZmYyZDM0OGExNjcwMDhjODMxYWUzMDQ0ODNiODI0NjQ3ZjcxZmJmNi9zcmMvR2VvbWV0cnkvTGluZVNlZ21lbnQuY3BwLlxuICpcbiAqIENvcHlyaWdodCAyMDExIEp1a2thIEp5bMOkbmtpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBjbG9zZXN0QSBPdXRwdXQgcGFyYW0uXG4gKiBAcGFyYW0ge3ZlYzN9IGNsb3Nlc3RCIE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7TGluZVNlZ21lbnR9IHNlZ21lbnRBXG4gKiBAcGFyYW0ge0xpbmVTZWdtZW50fSBzZWdtZW50QlxuICovXG5mdW5jdGlvbiBmaW5kQ2xvc2VzdFBvaW50c0Zyb21TZWdtZW50VG9TZWdtZW50KGNsb3Nlc3RBLCBjbG9zZXN0Qiwgc2VnbWVudEEsIHNlZ21lbnRCKSB7XG4gIGNvbnN0IHtkaXN0QSwgZGlzdEJ9ID0gZmluZENsb3Nlc3RQb2ludHNGcm9tTGluZVRvTGluZShcbiAgICAgIHNlZ21lbnRBLnN0YXJ0LCBzZWdtZW50QS5kaXIsIHNlZ21lbnRCLnN0YXJ0LCBzZWdtZW50Qi5kaXIpO1xuXG4gIGNvbnN0IGlzRGlzdEFJbkJvdW5kcyA9IGRpc3RBID49IDAgJiYgZGlzdEEgPD0gMTtcbiAgY29uc3QgaXNEaXN0QkluQm91bmRzID0gZGlzdEIgPj0gMCAmJiBkaXN0QiA8PSAxO1xuXG4gIGlmIChpc0Rpc3RBSW5Cb3VuZHMpIHtcbiAgICBpZiAoaXNEaXN0QkluQm91bmRzKSB7XG4gICAgICAvLyBUaGUgZGlzdGFuY2VzIGFsb25nIGJvdGggbGluZSBzZWdtZW50cyBhcmUgd2l0aGluIGJvdW5kcy5cbiAgICAgIHZlYzMuc2NhbGVBbmRBZGQoY2xvc2VzdEEsIHNlZ21lbnRBLnN0YXJ0LCBzZWdtZW50QS5kaXIsIGRpc3RBKTtcbiAgICAgIHZlYzMuc2NhbGVBbmRBZGQoY2xvc2VzdEIsIHNlZ21lbnRCLnN0YXJ0LCBzZWdtZW50Qi5kaXIsIGRpc3RCKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT25seSB0aGUgZGlzdGFuY2UgYWxvbmcgdGhlIGZpcnN0IGxpbmUgc2VnbWVudCBpcyB3aXRoaW4gYm91bmRzLlxuICAgICAgaWYgKGRpc3RCIDwgMCkge1xuICAgICAgICB2ZWMzLmNvcHkoY2xvc2VzdEIsIHNlZ21lbnRCLnN0YXJ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZlYzMuY29weShjbG9zZXN0Qiwgc2VnbWVudEIuZW5kKTtcbiAgICAgIH1cbiAgICAgIGZpbmRDbG9zZXN0UG9pbnRPblNlZ21lbnRUb1BvaW50KGNsb3Nlc3RBLCBzZWdtZW50QSwgY2xvc2VzdEIpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNEaXN0QkluQm91bmRzKSB7XG4gICAgICAvLyBPbmx5IHRoZSBkaXN0YW5jZSBhbG9uZyB0aGUgc2Vjb25kIGxpbmUgc2VnbWVudCBpcyB3aXRoaW4gYm91bmRzLlxuICAgICAgaWYgKGRpc3RBIDwgMCkge1xuICAgICAgICB2ZWMzLmNvcHkoY2xvc2VzdEEsIHNlZ21lbnRBLnN0YXJ0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZlYzMuY29weShjbG9zZXN0QSwgc2VnbWVudEEuZW5kKTtcbiAgICAgIH1cbiAgICAgIGZpbmRDbG9zZXN0UG9pbnRPblNlZ21lbnRUb1BvaW50KGNsb3Nlc3RCLCBzZWdtZW50QiwgY2xvc2VzdEEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOZWl0aGVyIG9mIHRoZSBkaXN0YW5jZXMgYWxvbmcgZWl0aGVyIGxpbmUgc2VnbWVudCBhcmUgd2l0aGluIGJvdW5kcy5cbiAgICAgIGlmIChkaXN0QSA8IDApIHtcbiAgICAgICAgdmVjMy5jb3B5KGNsb3Nlc3RBLCBzZWdtZW50QS5zdGFydCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2ZWMzLmNvcHkoY2xvc2VzdEEsIHNlZ21lbnRBLmVuZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXN0QiA8IDApIHtcbiAgICAgICAgdmVjMy5jb3B5KGNsb3Nlc3RCLCBzZWdtZW50Qi5zdGFydCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2ZWMzLmNvcHkoY2xvc2VzdEIsIHNlZ21lbnRCLmVuZCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFsdENsb3Nlc3RBID0gdmVjMy5jcmVhdGUoKTtcbiAgICAgIGNvbnN0IGFsdENsb3Nlc3RCID0gdmVjMy5jcmVhdGUoKTtcblxuICAgICAgZmluZENsb3Nlc3RQb2ludE9uU2VnbWVudFRvUG9pbnQoYWx0Q2xvc2VzdEEsIHNlZ21lbnRBLCBjbG9zZXN0Qik7XG4gICAgICBmaW5kQ2xvc2VzdFBvaW50T25TZWdtZW50VG9Qb2ludChhbHRDbG9zZXN0Qiwgc2VnbWVudEIsIGNsb3Nlc3RBKTtcblxuICAgICAgaWYgKHZlYzMuc3F1YXJlZERpc3RhbmNlKGFsdENsb3Nlc3RBLCBjbG9zZXN0QikgPFxuICAgICAgICAgIHZlYzMuc3F1YXJlZERpc3RhbmNlKGFsdENsb3Nlc3RCLCBjbG9zZXN0QSkpIHtcbiAgICAgICAgdmVjMy5jb3B5KGNsb3Nlc3RBLCBhbHRDbG9zZXN0QSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2ZWMzLmNvcHkoY2xvc2VzdEIsIGFsdENsb3Nlc3RCKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgY2xvc2VzdCBwb3NpdGlvbiBvbiBhIGxpbmUgc2VnbWVudCB0byBhIHBvaW50LlxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIE9yaWdpbmFsbHkgYmFzZWQgb24gSnVra2EgSnlsw6Rua2kncyBhbGdvcml0aG0gYXRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qdWovTWF0aEdlb0xpYi9ibG9iL2ZmMmQzNDhhMTY3MDA4YzgzMWFlMzA0NDgzYjgyNDY0N2Y3MWZiZjYvc3JjL0dlb21ldHJ5L0xpbmVTZWdtZW50LmNwcC5cbiAqXG4gKiBDb3B5cmlnaHQgMjAxMSBKdWtrYSBKeWzDpG5raVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIEBwYXJhbSB7dmVjM30gY2xvc2VzdFBvaW50IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7TGluZVNlZ21lbnR9IHNlZ21lbnRcbiAqIEBwYXJhbSB7dmVjM30gcG9pbnRcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGZpbmRDbG9zZXN0UG9pbnRPblNlZ21lbnRUb1BvaW50KGNsb3Nlc3RQb2ludCwgc2VnbWVudCwgcG9pbnQpIHtcbiAgY29uc3QgZGlyU3F1YXJlZExlbmd0aCA9IHZlYzMuc3F1YXJlZExlbmd0aChzZWdtZW50LmRpcik7XG5cbiAgaWYgKCFkaXJTcXVhcmVkTGVuZ3RoKSB7XG4gICAgLy8gVGhlIHBvaW50IGlzIGF0IHRoZSBzZWdtZW50IHN0YXJ0LlxuICAgIHZlYzMuY29weShjbG9zZXN0UG9pbnQsIHNlZ21lbnQuc3RhcnQpO1xuICB9IGVsc2Uge1xuICAgIC8vIENhbGN1bGF0ZSB0aGUgcHJvamVjdGlvbiBvZiB0aGUgcG9pbnQgb250byB0aGUgbGluZSBleHRlbmRpbmcgdGhyb3VnaCB0aGUgc2VnbWVudC5cbiAgICB2ZWMzLnN1YnRyYWN0KF90bXBWZWMxLCBwb2ludCwgc2VnbWVudC5zdGFydCk7XG4gICAgY29uc3QgdCA9IHZlYzMuZG90KF90bXBWZWMxLCBzZWdtZW50LmRpcikgLyBkaXJTcXVhcmVkTGVuZ3RoO1xuXG4gICAgaWYgKHQgPCAwKSB7XG4gICAgICAvLyBUaGUgcG9pbnQgcHJvamVjdHMgYmV5b25kIHRoZSBzZWdtZW50IHN0YXJ0LlxuICAgICAgdmVjMy5jb3B5KGNsb3Nlc3RQb2ludCwgc2VnbWVudC5zdGFydCk7XG4gICAgfSBlbHNlIGlmICh0ID4gMSkge1xuICAgICAgLy8gVGhlIHBvaW50IHByb2plY3RzIGJleW9uZCB0aGUgc2VnbWVudCBlbmQuXG4gICAgICB2ZWMzLmNvcHkoY2xvc2VzdFBvaW50LCBzZWdtZW50LmVuZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSBwb2ludCBwcm9qZWN0cyBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIG9mIHRoZSBzZWdtZW50LlxuICAgICAgdmVjMy5zY2FsZUFuZEFkZChjbG9zZXN0UG9pbnQsIHNlZ21lbnQuc3RhcnQsIHNlZ21lbnQuZGlyLCB0KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgY2xvc2VzdCBwb3NpdGlvbiBvbiBvbmUgbGluZSB0byB0aGUgb3RoZXIgbGluZSwgYW5kIHZpY2UgdmVyc2EuXG4gKlxuICogVGhlIHBvc2l0aW9ucyBhcmUgcmVwcmVzZW50ZWQgYXMgc2NhbGFyLXZhbHVlIGRpc3RhbmNlcyBmcm9tIHRoZSBcInN0YXJ0XCIgcG9zaXRpb25zIG9mIGVhY2ggbGluZS5cbiAqIFRoZXNlIGFyZSBzY2FsZWQgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBkaXJlY3Rpb24gdmVjdG9ycy5cbiAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBPcmlnaW5hbGx5IGJhc2VkIG9uIEp1a2thIEp5bMOkbmtpJ3MgYWxnb3JpdGhtIGF0XG4gKiBodHRwczovL2dpdGh1Yi5jb20vanVqL01hdGhHZW9MaWIvYmxvYi9mZjJkMzQ4YTE2NzAwOGM4MzFhZTMwNDQ4M2I4MjQ2NDdmNzFmYmY2L3NyYy9HZW9tZXRyeS9MaW5lLmNwcC5cbiAqXG4gKiBDb3B5cmlnaHQgMjAxMSBKdWtrYSBKeWzDpG5raVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIEBwYXJhbSB7dmVjM30gc3RhcnRBIFRoZSBzdGFydCBwb3NpdGlvbiBvZiBsaW5lIEEuXG4gKiBAcGFyYW0ge3ZlYzN9IGRpckEgVGhlICh1bm5vcm1hbGl6ZWQpIGRpcmVjdGlvbiBvZiBsaW5lIEEuIENhbm5vdCBiZSB6ZXJvLlxuICogQHBhcmFtIHt2ZWMzfSBzdGFydEIgVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIGxpbmUgQi5cbiAqIEBwYXJhbSB7dmVjM30gZGlyQiBUaGUgKHVubm9ybWFsaXplZCkgZGlyZWN0aW9uIG9mIGxpbmUgQi4gQ2Fubm90IGJlIHplcm8uXG4gKiBAcmV0dXJucyB7e2Rpc3RBOiBOdW1iZXIsIGRpc3RCOiBOdW1iZXJ9fVxuICovXG5mdW5jdGlvbiBmaW5kQ2xvc2VzdFBvaW50c0Zyb21MaW5lVG9MaW5lKHN0YXJ0QSwgZGlyQSwgc3RhcnRCLCBkaXJCKSB7XG4gIHZlYzMuc3VidHJhY3QoX3RtcFZlYzEsIHN0YXJ0QSwgc3RhcnRCKTtcbiAgY29uc3QgZGlyQkRvdERpckFUb0IgPSB2ZWMzLmRvdChkaXJCLCBfdG1wVmVjMSk7XG4gIGNvbnN0IGRpckFEb3REaXJBVG9CID0gdmVjMy5kb3QoZGlyQSwgX3RtcFZlYzEpO1xuXG4gIGNvbnN0IHNxckxlbkRpckIgPSB2ZWMzLnNxdWFyZWRMZW5ndGgoZGlyQik7XG4gIGNvbnN0IHNxckxlbkRpckEgPSB2ZWMzLnNxdWFyZWRMZW5ndGgoZGlyQSk7XG5cbiAgY29uc3QgZGlyQURvdERpckIgPSB2ZWMzLmRvdChkaXJBLCBkaXJCKTtcblxuICBjb25zdCBkZW5vbWluYXRvciA9IHNxckxlbkRpckEgKiBzcXJMZW5EaXJCIC0gZGlyQURvdERpckIgKiBkaXJBRG90RGlyQjtcblxuICBjb25zdCBkaXN0QSA9IGRlbm9taW5hdG9yIDwgRVBTSUxPTlxuICAgICAgPyAwXG4gICAgICA6IChkaXJBRG90RGlyQiAqIGRpckJEb3REaXJBVG9CIC0gc3FyTGVuRGlyQiAqIGRpckFEb3REaXJBVG9CKSAvIGRlbm9taW5hdG9yO1xuICBjb25zdCBkaXN0QiA9IChkaXJCRG90RGlyQVRvQiArIGRpckFEb3REaXJCICogZGlzdEEpIC8gc3FyTGVuRGlyQjtcblxuICByZXR1cm4ge1xuICAgIGRpc3RBOiBkaXN0QSxcbiAgICBkaXN0QjogZGlzdEJcbiAgfTtcbn1cblxuLyoqXG4gKiBBIGdvb2QgZGVzY3JpcHRpb24gb2Ygd2h5IHdlIG5lZWQgdGhlc2Ugc3BlY2lhbCBvcGVyYXRpb25zIGZvciByb3RhdGluZyB0ZW5zb3JzIGNhbiBiZSBmb3VuZFxuICogaGVyZTogaHR0cDovL3d3dy5yYW5keWdhdWwubmV0LzIwMTQvMDQvMDkvdHJhbnNmb3JtYXRpb25zLWNoYW5nZS1vZi1iYXNpcy1tYXRyaXgvLlxuICpcbiAqIEBwYXJhbSB7bWF0M30gb3V0cHV0IE91dHB1dCBwYXJhbS5cbiAqIEBwYXJhbSB7bWF0M30gdGVuc29yXG4gKiBAcGFyYW0ge3F1YXR9IHJvdGF0aW9uXG4gKi9cbmZ1bmN0aW9uIHJvdGF0ZVRlbnNvcihvdXRwdXQsIHRlbnNvciwgcm90YXRpb24pIHsvLyBUT0RPOiBUZXN0IHRoaXMgc29tZWhvdy4uLlxuICBtYXQzLmZyb21RdWF0KF90bXBNYXQsIHJvdGF0aW9uKTtcbiAgbWF0My5tdWx0aXBseShvdXRwdXQsIF90bXBNYXQsIHRlbnNvcik7XG4gIG1hdDMuaW52ZXJ0KF90bXBNYXQsIF90bXBNYXQpO1xuICBtYXQzLm11bHRpcGx5KG91dHB1dCwgb3V0cHV0LCBfdG1wTWF0KTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0FhYmJ9IGFhYmJcbiAqIEBwYXJhbSB7dmVjM30gcG9pbnRcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBhYWJiVnNQb2ludChhYWJiLCBwb2ludCkge1xuICByZXR1cm4gcG9pbnRbMF0gPj0gYWFiYi5taW5YICYmIHBvaW50WzBdIDw9IGFhYmIubWF4WCAmJlxuICAgICAgcG9pbnRbMV0gPj0gYWFiYi5taW5ZICYmIHBvaW50WzFdIDw9IGFhYmIubWF4WSAmJlxuICAgICAgcG9pbnRbMl0gPj0gYWFiYi5taW5aICYmIHBvaW50WzJdIDw9IGFhYmIubWF4WlxufVxuXG4vKipcbiAqIEBwYXJhbSB7cXVhdH0gb3V0XG4gKiBAcGFyYW0ge3F1YXR9IGFcbiAqIEBwYXJhbSB7cXVhdH0gYlxuICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlXG4gKiBAcmV0dXJucyB7cXVhdH1cbiAqL1xuZnVuY3Rpb24gc2NhbGVBbmRBZGRRdWF0KG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgcmV0dXJuIHF1YXQuc2V0KG91dCxcbiAgICAgIGFbMF0gKyBiWzBdICogc2NhbGUsXG4gICAgICBhWzFdICsgYlsxXSAqIHNjYWxlLFxuICAgICAgYVsyXSArIGJbMl0gKiBzY2FsZSxcbiAgICAgIGFbM10gKyBiWzNdICogc2NhbGUpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7dmVjM30gYVxuICogQHBhcmFtIHt2ZWMzfSBiXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gYXJlVmVjM3NDbG9zZShhLCBiKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgaWYgKGFbaV0gLSBiW2ldID4gRVBTSUxPTiB8fCBiW2ldIC0gYVtpXSA+IEVQU0lMT04pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIFJlLXVzZWQgYWNyb3NzIHRoZSBnZW9tZXRyeSB1dGlsaXR5IGZ1bmN0aW9ucywgc28gd2UgZG9uJ3QgaW5zdGFudGlhdGUgYXMgbWFueSB2ZWMzIG9iamVjdHMuXG5jb25zdCBfdG1wVmVjMSA9IHZlYzMuY3JlYXRlKCk7XG5jb25zdCBfdG1wVmVjMiA9IHZlYzMuY3JlYXRlKCk7XG5jb25zdCBfdG1wVmVjMyA9IHZlYzMuY3JlYXRlKCk7XG5jb25zdCBfdG1wVmVjNCA9IHZlYzMuY3JlYXRlKCk7XG5jb25zdCBfdG1wTWF0ID0gbWF0My5jcmVhdGUoKTtcblxuLy8gRXhwb3NlZCB0byBjb25zdW1lcnMsIHNvIHRoZXkgZG9uJ3QgaGF2ZSB0byBpbnN0YW50aWF0ZSBhcyBtYW55IHZlYzMgb2JqZWN0cy5cbmNvbnN0IHRtcFZlYzEgPSB2ZWMzLmNyZWF0ZSgpO1xuY29uc3QgdG1wVmVjMiA9IHZlYzMuY3JlYXRlKCk7XG5jb25zdCB0bXBWZWMzID0gdmVjMy5jcmVhdGUoKTtcbmNvbnN0IHRtcFZlYzQgPSB2ZWMzLmNyZWF0ZSgpO1xuXG5jb25zdCBfZ2VvbWV0cnkgPSB7XG4gIEVQU0lMT04sXG4gIEhBTEZfUEksXG4gIFRXT19QSSxcbiAgc2NhbGVBbmRBZGRRdWF0LFxufTtcblxuZXhwb3J0IHtcbiAgX2dlb21ldHJ5LFxuICB0bXBWZWMxLFxuICB0bXBWZWMyLFxuICB0bXBWZWMzLFxuICB0bXBWZWM0LFxuICBmaW5kU3F1YXJlZERpc3RhbmNlQmV0d2VlblNlZ21lbnRzLFxuICBmaW5kU3F1YXJlZERpc3RhbmNlRnJvbVNlZ21lbnRUb1BvaW50LFxuICBmaW5kQ2xvc2VzdFBvaW50RnJvbUFhYmJUb1BvaW50LFxuICBmaW5kQ2xvc2VzdFBvaW50RnJvbUFhYmJTdXJmYWNlVG9Qb2ludCxcbiAgZmluZFBvaUJldHdlZW5TZWdtZW50QW5kVHJpYW5nbGUsXG4gIGZpbmRQb2lCZXR3ZWVuU2VnbWVudEFuZFBsYW5lUmVnaW9uLFxuICBmaW5kQ2xvc2VzdFBvaW50RnJvbU9iYlRvUG9pbnQsXG4gIGZpbmRDbG9zZXN0UG9pbnRzRnJvbVNlZ21lbnRUb1NlZ21lbnQsXG4gIGZpbmRDbG9zZXN0UG9pbnRPblNlZ21lbnRUb1BvaW50LFxuICBmaW5kQ2xvc2VzdFBvaW50c0Zyb21MaW5lVG9MaW5lLFxuICByb3RhdGVUZW5zb3IsXG4gIGFhYmJWc1BvaW50LFxuICBhcmVWZWMzc0Nsb3NlLFxufTtcbiIsIi8qKlxuICogVGhpcyBtb2R1bGUgZGVmaW5lcyBhIGNvbGxlY3Rpb24gb2Ygc3RhdGljIHV0aWxpdHkgZnVuY3Rpb25zIGZvciBjYWxjdWxhdGluZyBpbmVydGlhIHRlbnNvcnMuXG4gKi9cblxuaW1wb3J0IHtfZ2VvbWV0cnksIHJvdGF0ZVRlbnNvcn0gZnJvbSAnLi9nZW9tZXRyeSc7XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICogQHBhcmFtIHtudW1iZXJ9IG1hc3NcbiAqIEByZXR1cm5zIHttYXQzfVxuICovXG5mdW5jdGlvbiBjcmVhdGVTcGhlcmVJbmVydGlhVGVuc29yKHJhZGl1cywgbWFzcykgey8vIFRPRE86IFRlc3QgdGhpcyBzb21laG93Li4uXG4gIGNvbnN0IHRlbnNvciA9IG1hdDMuY3JlYXRlKCk7XG4gIGNvbnN0IG1vbWVudCA9IDIgLyA1ICogbWFzcyAqIHJhZGl1cyAqIHJhZGl1cztcbiAgdGVuc29yWzBdID0gbW9tZW50O1xuICB0ZW5zb3JbNF0gPSBtb21lbnQ7XG4gIHRlbnNvcls4XSA9IG1vbWVudDtcbiAgcmV0dXJuIHRlbnNvcjtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gcmFuZ2VYXG4gKiBAcGFyYW0ge251bWJlcn0gcmFuZ2VZXG4gKiBAcGFyYW0ge251bWJlcn0gcmFuZ2VaXG4gKiBAcGFyYW0ge251bWJlcn0gbWFzc1xuICogQHJldHVybnMge21hdDN9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJveEluZXJ0aWFUZW5zb3IocmFuZ2VYLCByYW5nZVksIHJhbmdlWiwgbWFzcykgey8vIFRPRE86IFRlc3QgdGhpcyBzb21laG93Li4uXG4gIGNvbnN0IHRlbnNvciA9IG1hdDMuY3JlYXRlKCk7XG4gIGNvbnN0IHRtcCA9IG1hc3MgLyAxMjtcbiAgY29uc3QgeFJhbmdlU3F1YXJlZCA9IHJhbmdlWCAqIHJhbmdlWDtcbiAgY29uc3QgeVJhbmdlU3F1YXJlZCA9IHJhbmdlWSAqIHJhbmdlWTtcbiAgY29uc3QgelJhbmdlU3F1YXJlZCA9IHJhbmdlWiAqIHJhbmdlWjtcbiAgdGVuc29yWzBdID0gdG1wICogKHlSYW5nZVNxdWFyZWQgKyB6UmFuZ2VTcXVhcmVkKTtcbiAgdGVuc29yWzRdID0gdG1wICogKHhSYW5nZVNxdWFyZWQgKyB5UmFuZ2VTcXVhcmVkKTtcbiAgdGVuc29yWzhdID0gdG1wICogKHhSYW5nZVNxdWFyZWQgKyB6UmFuZ2VTcXVhcmVkKTtcbiAgcmV0dXJuIHRlbnNvcjtcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBPcmlnaW5hbGx5IGJhc2VkIG9uIEJvamFuIExvdnJvdmljJ3MgYWxnb3JpdGhtIGF0XG4gKiBodHRwOi8vd3d3LmdhbWVkZXYubmV0L3BhZ2UvcmVzb3VyY2VzL18vdGVjaG5pY2FsL21hdGgtYW5kLXBoeXNpY3MvY2Fwc3VsZS1pbmVydGlhLXRlbnNvci1yMzg1Ni5cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNCBCb2phbiBMb3Zyb3ZpY1xuICpcbiAqIEdhbWVEZXYubmV0IE9wZW4gTGljZW5zZVxuICogKGh0dHA6Ly93d3cuZ2FtZWRldi5uZXQvcGFnZS9yZXNvdXJjZXMvXy9nZG5ldGhlbHAvZ2FtZWRldm5ldC1vcGVuLWxpY2Vuc2UtcjI5NTYpXG4gKlxuICogVEVSTVMgQU5EIENPTkRJVElPTlMgRk9SIFVTRSwgUkVQUk9EVUNUSU9OLCBBTkQgRElTVFJJQlVUSU9OXG4gKlxuICogMS4gRGVmaW5pdGlvbnMuXG4gKlxuICogXCJBcnRpY2xlXCIgc2hhbGwgcmVmZXIgdG8gYW55IGJvZHkgb2YgdGV4dCB3cml0dGVuIGJ5IEF1dGhvciB3aGljaCBkZXNjcmliZXMgYW5kIGRvY3VtZW50cyB0aGUgdXNlXG4gKiBhbmQvb3Igb3BlcmF0aW9uIG9mIFNvdXJjZS4gSXQgc3BlY2lmaWNhbGx5IGRvZXMgbm90IHJlZmVyIHRvIGFueSBhY2NvbXBhbnlpbmcgU291cmNlIGVpdGhlclxuICogZW1iZWRkZWQgd2l0aGluIHRoZSBib2R5IG9mIHRleHQgb3IgYXR0YWNoZWQgdG8gdGhlIGFydGljbGUgYXMgYSBmaWxlLlxuICpcbiAqIFwiQXV0aG9yXCIgbWVhbnMgdGhlIGluZGl2aWR1YWwgb3IgZW50aXR5IHRoYXQgb2ZmZXJzIHRoZSBXb3JrIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGlzIExpY2Vuc2UuXG4gKlxuICogXCJMaWNlbnNlXCIgc2hhbGwgbWVhbiB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgZm9yIHVzZSwgcmVwcm9kdWN0aW9uLCBhbmQgZGlzdHJpYnV0aW9uIGFzIGRlZmluZWRcbiAqIGJ5IFNlY3Rpb25zIDEgdGhyb3VnaCA5IG9mIHRoaXMgZG9jdW1lbnQuXG4gKlxuICogXCJMaWNlbnNvclwiIHNoYWxsIG1lYW4gdGhlIGNvcHlyaWdodCBvd25lciBvciBlbnRpdHkgYXV0aG9yaXplZCBieSB0aGUgY29weXJpZ2h0IG93bmVyIHRoYXQgaXNcbiAqIGdyYW50aW5nIHRoZSBMaWNlbnNlLlxuICpcbiAqIFwiWW91XCIgKG9yIFwiWW91clwiKSBzaGFsbCBtZWFuIGFuIGluZGl2aWR1YWwgb3IgZW50aXR5IGV4ZXJjaXNpbmcgcGVybWlzc2lvbnMgZ3JhbnRlZCBieSB0aGlzXG4gKiBMaWNlbnNlLlxuICpcbiAqIFwiU291cmNlXCIgc2hhbGwgaW5jbHVkZSBhbGwgc29mdHdhcmUgdGV4dCBzb3VyY2UgY29kZSBhbmQgY29uZmlndXJhdGlvbiBmaWxlcyB1c2VkIHRvIGNyZWF0ZVxuICogZXhlY3V0YWJsZSBzb2Z0d2FyZVxuICpcbiAqIFwiT2JqZWN0XCIgc2hhbGwgbWVhbiBhbnkgU291cmNlIHdoaWNoIGhhcyBiZWVuIGNvbnZlcnRlZCBpbnRvIGEgbWFjaGluZSBleGVjdXRhYmxlIHNvZnR3YXJlXG4gKlxuICogXCJXb3JrXCIgY29uc2lzdHMgb2YgYm90aCB0aGUgQXJ0aWNsZSBhbmQgU291cmNlXG4gKlxuICogXCJQdWJsaXNoZXJcIiByZWZlcnMgdG8gR2FtZURldi5uZXQgTExDXG4gKlxuICogVGhpcyBhZ3JlZW1lbnQgaXMgYmV0d2VlbiBZb3UgYW5kIEF1dGhvciwgdGhlIG93bmVyIGFuZCBjcmVhdG9yIG9mIHRoZSBXb3JrIGxvY2F0ZWQgYXRcbiAqIEdhbWVkZXYubmV0LlxuICpcbiAqIDIuIEZhaXIgRGVhbGluZyBSaWdodHMuXG4gKlxuICogTm90aGluZyBpbiB0aGlzIExpY2Vuc2UgaXMgaW50ZW5kZWQgdG8gcmVkdWNlLCBsaW1pdCwgb3IgcmVzdHJpY3QgYW55IHVzZXMgZnJlZSBmcm9tIGNvcHlyaWdodCBvclxuICogcmlnaHRzIGFyaXNpbmcgZnJvbSBsaW1pdGF0aW9ucyBvciBleGNlcHRpb25zIHRoYXQgYXJlIHByb3ZpZGVkIGZvciBpbiBjb25uZWN0aW9uIHdpdGggdGhlXG4gKiBjb3B5cmlnaHQgcHJvdGVjdGlvbiB1bmRlciBjb3B5cmlnaHQgbGF3IG9yIG90aGVyIGFwcGxpY2FibGUgbGF3cy5cbiAqXG4gKiAzLiBHcmFudCBvZiBDb3B5cmlnaHQgTGljZW5zZS5cbiAqXG4gKiBTdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBvZiB0aGlzIExpY2Vuc2UsIHRoZSBBdXRob3IgaGVyZWJ5IGdyYW50cyB0byBZb3UgYSBwZXJwZXR1YWwsXG4gKiB3b3JsZHdpZGUsIG5vbi1leGNsdXNpdmUsIG5vLWNoYXJnZSwgcm95YWx0eS1mcmVlLCBpcnJldm9jYWJsZSBjb3B5cmlnaHQgbGljZW5zZSB0byB0aGUgV29ya1xuICogdW5kZXIgdGhlIGZvbGxvd2luZyBzdGF0ZWQgdGVybXM6XG4gKiBZb3UgbWF5IG5vdCByZXByb2R1Y2UgdGhlIEFydGljbGUgb24gYW55IG90aGVyIHdlYnNpdGUgb3V0c2lkZSBvZiBHYW1lZGV2Lm5ldCB3aXRob3V0IGV4cHJlc3NcbiAqIHdyaXR0ZW4gcGVybWlzc2lvbiBmcm9tIHRoZSBBdXRob3JcbiAqIFlvdSBtYXkgdXNlLCBjb3B5LCBsaW5rLCBtb2RpZnkgYW5kIGRpc3RyaWJ1dGUgdW5kZXIgWW91ciBvd24gdGVybXMsIGJpbmFyeSBPYmplY3QgY29kZSB2ZXJzaW9uc1xuICogYmFzZWQgb24gdGhlIFdvcmsgaW4geW91ciBvd24gc29mdHdhcmVcbiAqIFlvdSBtYXkgcmVwcm9kdWNlLCBwcmVwYXJlIGRlcml2YXRpdmUgV29ya3Mgb2YsIHB1YmxpY2x5IGRpc3BsYXksIHB1YmxpY2x5IHBlcmZvcm0sIHN1YmxpY2Vuc2UsXG4gKiBhbmQgZGlzdHJpYnV0ZSB0aGUgU291cmNlIGFuZCBzdWNoIGRlcml2YXRpdmUgU291cmNlIGluIFNvdXJjZSBmb3JtIG9ubHkgYXMgcGFydCBvZiBhIGxhcmdlclxuICogc29mdHdhcmUgZGlzdHJpYnV0aW9uIGFuZCBwcm92aWRlZCB0aGF0IGF0dHJpYnV0aW9uIHRvIHRoZSBvcmlnaW5hbCBBdXRob3IgaXMgZ3JhbnRlZC5cbiAqIFRoZSBvcmlnaW4gb2YgdGhpcyBXb3JrIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3QgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlXG4gKiBvcmlnaW5hbCBTb3VyY2UuIElmIHlvdSB1c2UgdGhpcyBTb3VyY2UgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBvZiB0aGUgQXV0aG9yIG5hbWUgd291bGRcbiAqIGJlIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4gKlxuICogNC4gUmVzdHJpY3Rpb25zLlxuICpcbiAqIFRoZSBsaWNlbnNlIGdyYW50ZWQgaW4gU2VjdGlvbiAzIGFib3ZlIGlzIGV4cHJlc3NseSBtYWRlIHN1YmplY3QgdG8gYW5kIGxpbWl0ZWQgYnkgdGhlIGZvbGxvd2luZ1xuICogcmVzdHJpY3Rpb25zOlxuICogQWx0ZXJlZCBTb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmdcbiAqIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbiAqIFRoaXMgTGljZW5zZSBtdXN0IGJlIHZpc2libHkgbGlua2VkIHRvIGZyb20gYW55IG9ubGluZSBkaXN0cmlidXRpb24gb2YgdGhlIEFydGljbGUgYnkgVVJJIGFuZFxuICogdXNpbmcgdGhlIGRlc2NyaXB0aXZlIHRleHQgXCJMaWNlbnNlZCB1bmRlciB0aGUgR2FtZURldi5uZXQgT3BlbiBMaWNlbnNlXCJcbiAqIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIEF1dGhvciBvZiB0aGlzIFdvcmssIG5vciBhbnkgb2YgdGhlaXIgdHJhZGVtYXJrcyBvciBzZXJ2aWNlIG1hcmtzLCBtYXkgYmVcbiAqIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIFdvcmsgd2l0aG91dCBleHByZXNzIHByaW9yIHBlcm1pc3Npb24gb2ZcbiAqIHRoZSBBdXRob3JcbiAqIEV4Y2VwdCBhcyBleHByZXNzbHkgc3RhdGVkIGhlcmVpbiwgbm90aGluZyBpbiB0aGlzIExpY2Vuc2UgZ3JhbnRzIGFueSBsaWNlbnNlIHRvIEF1dGhvcidzXG4gKiB0cmFkZW1hcmtzLCBjb3B5cmlnaHRzLCBwYXRlbnRzLCB0cmFkZSBzZWNyZXRzIG9yIGFueSBvdGhlciBpbnRlbGxlY3R1YWwgcHJvcGVydHkuIE5vIGxpY2Vuc2UgaXNcbiAqIGdyYW50ZWQgdG8gdGhlIHRyYWRlbWFya3Mgb2YgQXV0aG9yIGV2ZW4gaWYgc3VjaCBtYXJrcyBhcmUgaW5jbHVkZWQgaW4gdGhlIFdvcmsuIE5vdGhpbmcgaW4gdGhpc1xuICogTGljZW5zZSBzaGFsbCBiZSBpbnRlcnByZXRlZCB0byBwcm9oaWJpdCBBdXRob3IgZnJvbSBsaWNlbnNpbmcgdW5kZXIgdGVybXMgZGlmZmVyZW50IGZyb20gdGhpc1xuICogTGljZW5zZSBhbnkgV29yayB0aGF0IEF1dGhvciBvdGhlcndpc2Ugd291bGQgaGF2ZSBhIHJpZ2h0IHRvIGxpY2Vuc2UuXG4gKlxuICogNS4gR3JhbnQgb2YgUGF0ZW50IExpY2Vuc2UuXG4gKlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdGhpcyBMaWNlbnNlLCBlYWNoIENvbnRyaWJ1dG9yIGhlcmVieSBncmFudHMgdG8gWW91IGFcbiAqIHBlcnBldHVhbCwgd29ybGR3aWRlLCBub24tZXhjbHVzaXZlLCBuby1jaGFyZ2UsIHJveWFsdHktZnJlZSwgaXJyZXZvY2FibGUgKGV4Y2VwdCBhcyBzdGF0ZWQgaW5cbiAqIHRoaXMgc2VjdGlvbikgcGF0ZW50IGxpY2Vuc2UgdG8gbWFrZSwgaGF2ZSBtYWRlLCB1c2UsIG9mZmVyIHRvIHNlbGwsIHNlbGwsIGltcG9ydCwgYW5kIG90aGVyd2lzZVxuICogdHJhbnNmZXIgdGhlIFdvcmssIHdoZXJlIHN1Y2ggbGljZW5zZSBhcHBsaWVzIG9ubHkgdG8gdGhvc2UgcGF0ZW50IGNsYWltcyBsaWNlbnNhYmxlIGJ5IHN1Y2hcbiAqIENvbnRyaWJ1dG9yIHRoYXQgYXJlIG5lY2Vzc2FyaWx5IGluZnJpbmdlZCBieSB0aGVpciBDb250cmlidXRpb24ocykgYWxvbmUgb3IgYnkgY29tYmluYXRpb24gb2ZcbiAqIHRoZWlyIENvbnRyaWJ1dGlvbihzKSB3aXRoIHRoZSBXb3JrIHRvIHdoaWNoIHN1Y2ggQ29udHJpYnV0aW9uKHMpIHdhcyBzdWJtaXR0ZWQuIElmIFlvdSBpbnN0aXR1dGVcbiAqIHBhdGVudCBsaXRpZ2F0aW9uIGFnYWluc3QgYW55IGVudGl0eSAoaW5jbHVkaW5nIGEgY3Jvc3MtY2xhaW0gb3IgY291bnRlcmNsYWltIGluIGEgbGF3c3VpdClcbiAqIGFsbGVnaW5nIHRoYXQgdGhlIFdvcmsgb3IgU291cmNlIGluY29ycG9yYXRlZCB3aXRoaW4gdGhlIFdvcmsgY29uc3RpdHV0ZXMgZGlyZWN0IG9yIGNvbnRyaWJ1dG9yeVxuICogcGF0ZW50IGluZnJpbmdlbWVudCwgdGhlbiBhbnkgcGF0ZW50IGxpY2Vuc2VzIGdyYW50ZWQgdG8gWW91IHVuZGVyIHRoaXMgTGljZW5zZSBmb3IgdGhhdCBXb3JrXG4gKiBzaGFsbCB0ZXJtaW5hdGUgYXMgb2YgdGhlIGRhdGUgc3VjaCBsaXRpZ2F0aW9uIGlzIGZpbGVkLlxuICpcbiAqIDYuIExpbWl0YXRpb24gb2YgTGlhYmlsaXR5LlxuICpcbiAqIEluIG5vIGV2ZW50IGFuZCB1bmRlciBubyBsZWdhbCB0aGVvcnksIHdoZXRoZXIgaW4gdG9ydCAoaW5jbHVkaW5nIG5lZ2xpZ2VuY2UpLCBjb250cmFjdCwgb3JcbiAqIG90aGVyd2lzZSwgdW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IChzdWNoIGFzIGRlbGliZXJhdGUgYW5kIGdyb3NzbHkgbmVnbGlnZW50IGFjdHMpIG9yXG4gKiBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc2hhbGwgYW55IEF1dGhvciBvciBQdWJsaXNoZXIgYmUgbGlhYmxlIHRvIFlvdSBmb3IgZGFtYWdlcywgaW5jbHVkaW5nIGFueVxuICogZGlyZWN0LCBpbmRpcmVjdCwgc3BlY2lhbCwgaW5jaWRlbnRhbCwgb3IgY29uc2VxdWVudGlhbCBkYW1hZ2VzIG9mIGFueSBjaGFyYWN0ZXIgYXJpc2luZyBhcyBhXG4gKiByZXN1bHQgb2YgdGhpcyBMaWNlbnNlIG9yIG91dCBvZiB0aGUgdXNlIG9yIGluYWJpbGl0eSB0byB1c2UgdGhlIFdvcmsgKGluY2x1ZGluZyBidXQgbm90IGxpbWl0ZWRcbiAqIHRvIGRhbWFnZXMgZm9yIGxvc3Mgb2YgZ29vZHdpbGwsIHdvcmsgc3RvcHBhZ2UsIGNvbXB1dGVyIGZhaWx1cmUgb3IgbWFsZnVuY3Rpb24sIG9yIGFueSBhbmQgYWxsXG4gKiBvdGhlciBjb21tZXJjaWFsIGRhbWFnZXMgb3IgbG9zc2VzKSwgZXZlbiBpZiBzdWNoIEF1dGhvciBoYXMgYmVlbiBhZHZpc2VkIG9mIHRoZSBwb3NzaWJpbGl0eSBvZlxuICogc3VjaCBkYW1hZ2VzLlxuICpcbiAqIDcuIERJU0NMQUlNRVIgT0YgV0FSUkFOVFlcbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVRcbiAqIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gKiBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuICogREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKlxuICogOC4gUHVibGlzaGVyLlxuICpcbiAqIFRoZSBwYXJ0aWVzIGhlcmVieSBjb25maXJtIHRoYXQgdGhlIFB1Ymxpc2hlciBzaGFsbCBub3QsIHVuZGVyIGFueSBjaXJjdW1zdGFuY2VzLCBiZSByZXNwb25zaWJsZVxuICogZm9yIGFuZCBzaGFsbCBub3QgaGF2ZSBhbnkgbGlhYmlsaXR5IGluIHJlc3BlY3Qgb2YgdGhlIHN1YmplY3QgbWF0dGVyIG9mIHRoaXMgTGljZW5zZS4gVGhlXG4gKiBQdWJsaXNoZXIgbWFrZXMgbm8gd2FycmFudHkgd2hhdHNvZXZlciBpbiBjb25uZWN0aW9uIHdpdGggdGhlIFdvcmsgYW5kIHNoYWxsIG5vdCBiZSBsaWFibGUgdG8gWW91XG4gKiBvciBhbnkgcGFydHkgb24gYW55IGxlZ2FsIHRoZW9yeSBmb3IgYW55IGRhbWFnZXMgd2hhdHNvZXZlciwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiBhbnlcbiAqIGdlbmVyYWwsIHNwZWNpYWwsIGluY2lkZW50YWwgb3IgY29uc2VxdWVudGlhbCBkYW1hZ2VzIGFyaXNpbmcgaW4gY29ubmVjdGlvbiB0byB0aGlzIGxpY2Vuc2UuIFRoZVxuICogUHVibGlzaGVyIHJlc2VydmVzIHRoZSByaWdodCB0byBjZWFzZSBtYWtpbmcgdGhlIFdvcmsgYXZhaWxhYmxlIHRvIFlvdSBhdCBhbnkgdGltZSB3aXRob3V0IG5vdGljZVxuICpcbiAqIDkuIFRlcm1pbmF0aW9uXG4gKlxuICogVGhpcyBMaWNlbnNlIGFuZCB0aGUgcmlnaHRzIGdyYW50ZWQgaGVyZXVuZGVyIHdpbGwgdGVybWluYXRlIGF1dG9tYXRpY2FsbHkgdXBvbiBhbnkgYnJlYWNoIGJ5IFlvdVxuICogb2YgdGhlIHRlcm1zIG9mIHRoaXMgTGljZW5zZS4gSW5kaXZpZHVhbHMgb3IgZW50aXRpZXMgd2hvIGhhdmUgcmVjZWl2ZWQgRGVyaXZpYXRpdmUgV29ya3MgZnJvbVxuICogWW91IHVuZGVyIHRoaXMgTGljZW5zZSwgaG93ZXZlciwgd2lsbCBub3QgaGF2ZSB0aGVpciBsaWNlbnNlcyB0ZXJtaW5hdGVkIHByb3ZpZGVkIHN1Y2hcbiAqIGluZGl2aWR1YWxzIG9yIGVudGl0aWVzIHJlbWFpbiBpbiBmdWxsIGNvbXBsaWFuY2Ugd2l0aCB0aG9zZSBsaWNlbnNlcy4gU2VjdGlvbnMgMSwgMiwgNiwgNywgOCBhbmRcbiAqIDkgd2lsbCBzdXJ2aXZlIGFueSB0ZXJtaW5hdGlvbiBvZiB0aGlzIExpY2Vuc2UuXG4gKiBTdWJqZWN0IHRvIHRoZSBhYm92ZSB0ZXJtcyBhbmQgY29uZGl0aW9ucywgdGhlIGxpY2Vuc2UgZ3JhbnRlZCBoZXJlIGlzIHBlcnBldHVhbCAoZm9yIHRoZVxuICogZHVyYXRpb24gb2YgdGhlIGFwcGxpY2FibGUgY29weXJpZ2h0IGluIHRoZSBXb3JrKS4gTm90d2l0aHN0YW5kaW5nIHRoZSBhYm92ZSwgTGljZW5zb3IgcmVzZXJ2ZXNcbiAqIHRoZSByaWdodCB0byByZWxlYXNlIHRoZSBXb3JrIHVuZGVyIGRpZmZlcmVudCBsaWNlbnNlIHRlcm1zIG9yIHRvIHN0b3AgZGlzdHJpYnV0aW5nIHRoZSBXb3JrIGF0XG4gKiBhbnkgdGltZTsgcHJvdmlkZWQsIGhvd2V2ZXIgdGhhdCBhbnkgc3VjaCBlbGVjdGlvbiB3aWxsIG5vdCBzZXJ2ZSB0byB3aXRoZHJhdyB0aGlzIExpY2Vuc2UgKG9yXG4gKiBhbnkgb3RoZXIgbGljZW5zZSB0aGF0IGhhcyBiZWVuLCBvciBpcyByZXF1aXJlZCB0byBiZSwgZ3JhbnRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhpcyBMaWNlbnNlKSxcbiAqIGFuZCB0aGlzIExpY2Vuc2Ugd2lsbCBjb250aW51ZSBpbiBmdWxsIGZvcmNlIGFuZCBlZmZlY3QgdW5sZXNzIHRlcm1pbmF0ZWQgYXMgc3RhdGVkIGFib3ZlLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBoYWxmRGlzdGFuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXNzXG4gKiBAcmV0dXJucyB7bWF0M31cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2Fwc3VsZUluZXJ0aWFUZW5zb3IoaGFsZkRpc3RhbmNlLCByYWRpdXMsIG1hc3MpIHsvLyBUT0RPOiBUZXN0IHRoaXMgc29tZWhvdy4uLlxuICBjb25zdCB0ZW5zb3IgPSBtYXQzLmNyZWF0ZSgpO1xuXG4gIGNvbnN0IGN5bGluZGVySGVpZ2h0ID0gaGFsZkRpc3RhbmNlICogMjtcbiAgY29uc3QgcmFkaXVzU3F1YXJlZCA9IHJhZGl1cyAqIHJhZGl1cztcbiAgY29uc3QgY3lsaW5kZXJWb2x1bWUgPSBNYXRoLlBJICogcmFkaXVzU3F1YXJlZCAqIGN5bGluZGVySGVpZ2h0O1xuICBjb25zdCBoZW1pc3BoZXJlQ29tYmluZWRWb2x1bWUgPSA0IC8gMyAqIE1hdGguUEkgKiByYWRpdXNTcXVhcmVkO1xuICBjb25zdCBjeWxpbmRlck1hc3MgPSBjeWxpbmRlclZvbHVtZSAvIChjeWxpbmRlclZvbHVtZSAqIGhlbWlzcGhlcmVDb21iaW5lZFZvbHVtZSkgKiBtYXNzO1xuICBjb25zdCBoZW1pc3BoZXJlTWFzcyA9IChtYXNzIC0gY3lsaW5kZXJNYXNzKSAvIDI7XG5cbiAgLy8gQ29udHJpYnV0aW9uIGZyb20gdGhlIGN5bGluZGVyLlxuICB0ZW5zb3JbNF0gPSByYWRpdXNTcXVhcmVkICogY3lsaW5kZXJNYXNzIC8gMjtcbiAgdGVuc29yWzBdID0gdGVuc29yWzRdIC8gMiArIGN5bGluZGVyTWFzcyAqIGN5bGluZGVySGVpZ2h0ICogY3lsaW5kZXJIZWlnaHQgLyAxMjtcbiAgdGVuc29yWzhdID0gdGVuc29yWzBdO1xuXG4gIC8vIENvbnRyaWJ1dGlvbnMgZnJvbSB0aGUgaGVtaXNwaGVyZXMuXG4gIGNvbnN0IHRtcDEgPSBoZW1pc3BoZXJlTWFzcyAqIDIgKiByYWRpdXNTcXVhcmVkIC8gNTtcbiAgdGVuc29yWzRdICs9IHRtcDEgKiAyO1xuICBjb25zdCB0bXAyID1cbiAgICAgICh0bXAxICsgaGVtaXNwaGVyZU1hc3MgKiAoaGFsZkRpc3RhbmNlICogaGFsZkRpc3RhbmNlICsgMyAvIDggKiBjeWxpbmRlckhlaWdodCAqIHJhZGl1cykpICogMjtcbiAgdGVuc29yWzBdICs9IHRtcDI7XG4gIHRlbnNvcls4XSArPSB0bXAyO1xuXG4gIC8vIFRoZSBhYm92ZSBjYWxjdWxhdGlvbnMgYXNzdW1lIHRoZSBjYXBzdWxlIGlzIGFsaWduZWQgYWxvbmcgdGhlIHktYXhpcy4gSG93ZXZlciwgb3VyIGRlZmF1bHRcbiAgLy8gY2Fwc3VsZSBvcmllbnRhdGlvbiBpcyBhbGlnbmVkIGFsb25nIHRoZSB6LWF4aXMuXG4gIGNvbnN0IHJvdGF0aW9uID0gcXVhdC5jcmVhdGUoKTtcbiAgcXVhdC5yb3RhdGVYKHJvdGF0aW9uLCByb3RhdGlvbiwgX2dlb21ldHJ5LkhBTEZfUEkpO1xuICByb3RhdGVUZW5zb3IodGVuc29yLCB0ZW5zb3IsIHJvdGF0aW9uKTtcblxuICByZXR1cm4gdGVuc29yO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Q29sbGlkYWJsZX0gY29sbGlkYWJsZVxuICogQHBhcmFtIHtudW1iZXJ9IG1hc3NcbiAqIEByZXR1cm5zIHttYXQzfVxuICovXG5mdW5jdGlvbiBjcmVhdGVGb3JDb2xsaWRhYmxlKGNvbGxpZGFibGUsIG1hc3MpIHtcbiAgc3dpdGNoIChjb2xsaWRhYmxlLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICBjYXNlICdTcGhlcmUnOlxuICAgICAgcmV0dXJuIGNyZWF0ZVNwaGVyZUluZXJ0aWFUZW5zb3IoY29sbGlkYWJsZS5yYWRpdXMsIG1hc3MpO1xuICAgIGNhc2UgJ0FhYmInOlxuICAgICAgcmV0dXJuIGNyZWF0ZUJveEluZXJ0aWFUZW5zb3IoY29sbGlkYWJsZS5yYW5nZVgsIGNvbGxpZGFibGUucmFuZ2VZLCBjb2xsaWRhYmxlLnJhbmdlWiwgbWFzcyk7XG4gICAgY2FzZSAnQ2Fwc3VsZSc6XG4gICAgICByZXR1cm4gY3JlYXRlQ2Fwc3VsZUluZXJ0aWFUZW5zb3IoY29sbGlkYWJsZS5oYWxmRGlzdGFuY2UsIGNvbGxpZGFibGUucmFkaXVzLCBtYXNzKTtcbiAgICBjYXNlICdPYmInOlxuICAgICAgcmV0dXJuIGNyZWF0ZUJveEluZXJ0aWFUZW5zb3IoY29sbGlkYWJsZS5oYWxmU2lkZUxlbmd0aHNbMF0gKiAyLFxuICAgICAgICAgIGNvbGxpZGFibGUuaGFsZlNpZGVMZW5ndGhzWzFdICogMiwgY29sbGlkYWJsZS5oYWxmU2lkZUxlbmd0aHNbMl0gKiAyLCBtYXNzKTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBjcmVhdGVTcGhlcmVJbmVydGlhVGVuc29yLFxuICBjcmVhdGVCb3hJbmVydGlhVGVuc29yLFxuICBjcmVhdGVDYXBzdWxlSW5lcnRpYVRlbnNvcixcbiAgY3JlYXRlRm9yQ29sbGlkYWJsZSxcbn07XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgYSBjb2xsZWN0aW9uIG9mIHN0YXRpYyBnZW5lcmFsIHV0aWxpdHkgZnVuY3Rpb25zLlxuICovXG5cbi8vIFRPRE86IFRoaXMgc2hvdWxkIGJlIHNldCBmcm9tIHNvbWV3aGVyZSBlbHNlIChwcm9iYWJseSBhcyBhIHBhcmFtIHRvIGNvbnRyb2xsZXIgbGlrZSBiZWZvcmU7IGJ1dCB0aGVuIEkgbmVlZCB0byBtYWtlIHRoaXMgdXBkYXRhYmxlKVxuY29uc3QgaXNJbkRldk1vZGUgPSB0cnVlO1xuXG5jb25zdCBfdXRpbCA9IHtcbiAgaXNJbkRldk1vZGU6IGlzSW5EZXZNb2RlXG59O1xuXG5leHBvcnQge1xuICBfdXRpbCxcbn07XG4iXX0="}