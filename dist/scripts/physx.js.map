{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/lsl-animatex/index.js","node_modules/lsl-animatex/src/animation-job.js","node_modules/lsl-animatex/src/animator.js","node_modules/lsl-animatex/src/frame-latency-profiler.js","node_modules/lsl-animatex/src/index.js","node_modules/lsl-animatex/src/persistent-animation-job.js","node_modules/lsl-animatex/src/transient-animation-job.js","node_modules/lsl-animatex/src/util.js","src/collisions/collidables/index.js","src/collisions/collidables/src/aabb-collidable.js","src/collisions/collidables/src/capsule-collidable.js","src/collisions/collidables/src/collidable.js","src/collisions/collidables/src/line-segment.js","src/collisions/collidables/src/obb-collidable.js","src/collisions/collidables/src/sphere-collidable.js","src/collisions/collision-detection/index.js","src/collisions/collision-detection/src/aabb-collision-detection.js","src/collisions/collision-detection/src/capsule-collision-detection.js","src/collisions/collision-detection/src/obb-collision-detection.js","src/collisions/collision-detection/src/sphere-collision-detection.js","src/collisions/contact-calculation/index.js","src/collisions/contact-calculation/src/aabb-contact-calculation.js","src/collisions/contact-calculation/src/capsule-contact-calculation.js","src/collisions/contact-calculation/src/obb-contact-calculation.js","src/collisions/contact-calculation/src/sphere-contact-calculation.js","src/collisions/index.js","src/collisions/src/collidable-factories.js","src/collisions/src/collidable-physics-job.js","src/collisions/src/collidable-store.js","src/collisions/src/collision-handler.js","src/collisions/src/collision-utils.js","src/index.js","src/integrator/index.js","src/integrator/src/integrator.js","src/integrator/src/rk4-integrator.js","src/src/physics-engine.js","src/src/physics-job.js","src/src/physics-state.js","src/util/index.js","src/util/src/force-utils.js","src/util/src/geometry.js","src/util/src/inertia-tensor-utils.js","src/util/src/util.js"],"names":[],"mappings":"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","file":"physx.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export * from './src';\n","/**\n * An AnimationJob is used with the animator controller to update and re-draw something each frame.\n *\n * @abstract\n */\nclass AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    // AnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === AnimationJob) {\n      throw new TypeError('Cannot construct AnimationJob instances directly');\n    }\n\n    this._startTime = 0;\n    this._isComplete = true;\n    this._onComplete = onComplete;\n  }\n\n  /**\n   * Indicates whether this AnimationJob is complete.\n   *\n   * @return {boolean}\n   */\n  get isComplete() {\n    return this._isComplete;\n  }\n\n  /**\n   * Sets this AnimationJob as started.\n   *\n   * @param {DOMHighResTimeStamp} startTime\n   */\n  start(startTime) {\n    this._startTime = startTime;\n    this._isComplete = false;\n  }\n\n  /**\n   * Updates the animation progress of this AnimationJob to match the given time.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Draws the current state of this AnimationJob.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Handles any necessary state for this AnimationJob being finished.\n   *\n   * @param {boolean} isCancelled\n   */\n  finish(isCancelled) {\n    console.log(`${this.constructor.name} ${isCancelled ? 'cancelled' : 'completed'}`);\n\n    this._isComplete = true;\n\n    if (this._onComplete) {\n      this._onComplete();\n    }\n  }\n}\n\nexport {AnimationJob};\n","import {FrameLatencyProfiler} from './frame-latency-profiler';\nimport {PersistentAnimationJob} from './persistent-animation-job';\nimport {TransientAnimationJob} from './transient-animation-job';\n\nconst _DELTA_TIME_UPPER_THRESHOLD = 200;\nconst _FRAME_DURATION_WARNING_THRESHOLD = 1000 / 30;\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Animation frame period';\n\n/**\n * This class handles the animation loop.\n *\n * This class's responsibilities include:\n * - updating modules for the current frame,\n * - drawing renderables for the current frame,\n * - starting and stopping transient animation jobs,\n * - capping time step durations at a max threshold.\n */\nclass Animator {\n  constructor() {\n    this._jobs = [];\n    this._previousTime = null;\n    this._isPaused = true;\n    this._requestAnimationFrameId = null;\n    this._totalUnpausedRunTime = 0;\n    this._lastUnpauseTime = null;\n    this._latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD,\n        _FRAME_DURATION_WARNING_THRESHOLD, _LATENCY_LOG_LABEL);\n  }\n\n  /**\n   * Starts the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  startJob(job) {\n    // Is this a restart?\n    if (!job.isComplete) {\n      console.debug(`Restarting AnimationJob: ${job.constructor.name}`);\n\n      if (job instanceof PersistentAnimationJob) {\n        job.reset();\n      } else {\n        job.finish(true);\n        job.start(window.performance.now());\n      }\n    } else {\n      console.debug(`Starting AnimationJob: ${job.constructor.name}`);\n\n      job.start(this._previousTime);\n      this._jobs.push(job);\n    }\n\n    this._startAnimationLoop();\n  }\n\n  /**\n   * Cancels the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  cancelJob(job) {\n    console.debug(`Cancelling AnimationJob: ${job.constructor.name}`);\n    job.finish(true);\n  }\n\n  /**\n   * Cancels all running AnimationJobs.\n   */\n  cancelAll() {\n    while (this._jobs.length) {\n      this.cancelJob(this._jobs[0]);\n    }\n  }\n\n  /** @returns {DOMHighResTimeStamp} */\n  get currentTime() {\n    return this._previousTime;\n  }\n\n  /** @returns {boolean} */\n  get isPaused() {\n    return this._isPaused;\n  }\n\n  pause() {\n    this._stopAnimationLoop();\n    console.debug('Animator paused');\n  }\n\n  unpause() {\n    this._startAnimationLoop();\n    console.debug('Animator unpaused');\n  }\n\n  /**\n   * This is the animation loop that drives all of the animation.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @private\n   */\n  _animationLoop(currentTime) {\n    // When pausing and restarting, it's possible for the previous time to be slightly inconsistent\n    // with the animationFrame time.\n    if (currentTime < this._previousTime) {\n      this._previousTime = currentTime - 1;\n    }\n\n    let deltaTime = currentTime - this._previousTime;\n    this._previousTime = currentTime;\n\n    this._latencyProfiler.recordFrameLatency(deltaTime);\n\n    // Large delays between frames can cause lead to instability in the system, so this caps them to\n    // a max threshold.\n    deltaTime = deltaTime > _DELTA_TIME_UPPER_THRESHOLD ?\n        _DELTA_TIME_UPPER_THRESHOLD : deltaTime;\n\n    if (!this._isPaused) {\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(currentTime => this._animationLoop(currentTime));\n      this._updateJobs(currentTime, deltaTime);\n      this._drawJobs();\n    }\n  }\n\n  /**\n   * Updates all of the active AnimationJobs.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateJobs(currentTime, deltaTime) {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      let job = this._jobs[i];\n\n      // Remove jobs from the list after they are complete.\n      if (job.isComplete) {\n        this._removeJob(job, i);\n        i--;\n        count--;\n        continue;\n      }\n\n      // Check whether the job is transient and has reached its end.\n      if (job instanceof TransientAnimationJob && job.endTime < currentTime) {\n        job.finish(false);\n      } else {\n        job.update(currentTime, deltaTime);\n      }\n    }\n  }\n\n  /**\n   * Removes the given job from the collection of active, animating jobs.\n   *\n   * @param {AnimationJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    console.debug(`Removing AnimationJob: ${job.constructor.name}`);\n\n    if (index >= 0) {\n      this._jobs.splice(index, 1);\n    } else {\n      const count = this._jobs.length;\n      for (index = 0; index < count; index++) {\n        if (this._jobs[index] === job) {\n          this._jobs.splice(index, 1);\n          break;\n        }\n      }\n    }\n\n    // Stop the animation loop when there are no more jobs to animate.\n    if (this._jobs.length === 0) {\n      this._stopAnimationLoop();\n    }\n  }\n\n  /**\n   * Draws all of the active AnimationJobs.\n   *\n   * @private\n   */\n  _drawJobs() {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      this._jobs[i].draw();\n    }\n  }\n\n  /**\n   * Starts the animation loop if it is not already running.\n   *\n   * This method is idempotent.\n   *\n   * @private\n   */\n  _startAnimationLoop() {\n    if (this._isPaused) {\n      this._lastUnpauseTime = window.performance.now();\n    }\n    this._isPaused = false;\n\n    // Only actually start the loop if it isn't already running and the page has focus.\n    if (!this._requestAnimationFrameId && !document.hidden) {\n      this._latencyProfiler.start();\n      this._previousTime = window.performance.now();\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(time => this._animationLoop(time));\n    }\n  }\n\n  /**\n   * Stops the animation loop.\n   *\n   * @private\n   */\n  _stopAnimationLoop() {\n    if (!this._isPaused) {\n      this._totalUnpausedRunTime += this._timeSinceLastPaused;\n    }\n    this._isPaused = true;\n    window.cancelAnimationFrame(this._requestAnimationFrameId);\n    this._requestAnimationFrameId = null;\n    this._latencyProfiler.stop();\n  }\n\n  /**\n   * Creates a promise that will resolve on the next animation loop.\n   *\n   * @returns {Promise}\n   */\n  resolveOnNextFrame() {\n    return new Promise(window.requestAnimationFrame);\n  }\n\n  /**\n   * Gets the total amount of time the animator has been running while not paused.\n   *\n   * @returns {DOMHighResTimeStamp}\n   */\n  get totalRunTime() {\n    return this._isPaused\n        ? this._totalUnpausedRunTime\n        : this._totalUnpausedRunTime + this._timeSinceLastPaused;\n  }\n\n  /**\n   * @returns {DOMHighResTimeStamp}\n   */\n  get _timeSinceLastPaused() {\n    return window.performance.now() - this._lastUnpauseTime;\n  }\n}\n\nconst animator = new Animator();\n\nexport {animator};\n\n/**\n * @typedef {number} DOMHighResTimeStamp A number of milliseconds, accurate to one thousandth of a\n * millisecond.\n */\n\n","/**\n * This class keeps track of avg/min/max frame latencies over the last logging time period and\n * periodically logs these values.\n */\nclass FrameLatencyProfiler {\n  /**\n   * @param {number} logPeriod The period at which to print latency log messages. In milliseconds.\n   * @param {number} latencyWarningThreshold If the average latency exceeds this threshold, then the\n   * log message is shown as a warning. In milliseconds.\n   * @param {string} logLabel A label to show for each latency log message.\n   */\n  constructor(logPeriod, latencyWarningThreshold, logLabel) {\n    this._logPeriod = logPeriod;\n    this._latencyWarningThreshold = latencyWarningThreshold;\n    this._logLabel = logLabel;\n\n    this._frameCount = null;\n    this._maxFrameLatency = null;\n    this._minFrameLatency = null;\n    this._avgFrameLatency = null;\n\n    this._intervalId = null;\n  }\n\n  start() {\n    this.stop();\n    this.reset();\n\n    this._intervalId = setInterval(() => {\n      this.logFrameLatency();\n      this.reset();\n    }, this._logPeriod);\n  }\n\n  stop() {\n    clearInterval(this._intervalId);\n  }\n\n  reset() {\n    this._frameCount = 0;\n    this._maxFrameLatency = Number.MIN_VALUE;\n    this._minFrameLatency = Number.MAX_VALUE;\n    this._avgFrameLatency = 0;\n  }\n\n  /**\n   * Keeps track of a running average, min value, and max value for the frame latencies.\n   *\n   * @param {DOMHighResTimeStamp} frameLatency\n   */\n  recordFrameLatency(frameLatency) {\n    this._frameCount++;\n    this._maxFrameLatency =\n        this._maxFrameLatency < frameLatency ? frameLatency : this._maxFrameLatency;\n    this._minFrameLatency =\n        this._minFrameLatency > frameLatency ? frameLatency : this._minFrameLatency;\n    this._avgFrameLatency =\n        this._avgFrameLatency + (frameLatency - this._avgFrameLatency) / this._frameCount;\n  }\n\n  logFrameLatency() {\n    if (this._frameCount > 0) {\n      const message = `${this._logLabel}:  AVG=${this._avgFrameLatency.toFixed(3)}  ` +\n          `(MAX=${this._maxFrameLatency.toFixed(3)}; MIN=${this._minFrameLatency.toFixed(3)})`;\n      if (this._maxFrameLatency >= this._latencyWarningThreshold) {\n        console.warn(message);\n      } else {\n        console.debug(message);\n      }\n    }\n  }\n}\n\nexport {FrameLatencyProfiler};\n","export * from './animation-job';\nexport * from './animator';\nexport * from './frame-latency-profiler';\nexport * from './persistent-animation-job';\nexport * from './transient-animation-job';\n","import {AnimationJob} from './animation-job';\n\n/**\n * A PersistentAnimationJob recurs or has an indefinite duration.\n *\n * @abstract\n */\nclass PersistentAnimationJob extends AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    super(onComplete);\n\n    // PersistentAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === PersistentAnimationJob) {\n      throw new TypeError('Cannot construct PersistentAnimationJob instances directly');\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  reset() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {PersistentAnimationJob};\n","import {_util} from './util';\n\nimport {AnimationJob} from './animation-job';\n\n/**\n * A TransientAnimationJob is temporary and has a definite beginning and end.\n *\n * @abstract\n */\nclass TransientAnimationJob extends AnimationJob {\n  /**\n   * @param {number} duration\n   * @param {number} delay\n   * @param {Function|String} easingFunction\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(duration, delay, easingFunction, onComplete) {\n    super(onComplete);\n\n    // TransientAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === TransientAnimationJob) {\n      throw new TypeError('Cannot construct TransientAnimationJob instances directly');\n    }\n\n    this._duration = duration;\n    this._delay = delay;\n    this._easingFunction = typeof easingFunction === 'function'\n        ? easingFunction\n        : _util.easingFunctions[easingFunction];\n  }\n\n  /**\n   * @returns {number}\n   */\n  get endTime() {\n    return this._startTime + this._duration + this._delay;\n  }\n}\n\nexport {TransientAnimationJob};\n","/**\n * This module defines a collection of static utility functions.\n */\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\nconst _util = {\n  easingFunctions,\n};\n\nexport {\n  _util,\n};\n","export * from './src/aabb-collidable';\r\nexport * from './src/capsule-collidable';\r\nexport * from './src/collidable';\r\nexport * from './src/line-segment';\r\nexport * from './src/obb-collidable';\r\nexport * from './src/sphere-collidable';\r\n","import {Collidable} from './collidable';\r\nimport {LineSegment} from './line-segment';\r\nimport {tmpVec1, tmpVec2} from '../../../util';\r\n\r\n/**\r\n * This class represents an axially-aligned bounding box (AABB).\r\n *\r\n * This is primarily useful for collision detection. An AABB is only appropriate for some\r\n * geometries. For other geometries, an oriented bounding box (OBB) or a bounding sphere may be more\r\n * appropriate.\r\n */\r\nclass Aabb extends Collidable {\r\n  /**\r\n   * @param {number} minX\r\n   * @param {number} minY\r\n   * @param {number} minZ\r\n   * @param {number} maxX\r\n   * @param {number} maxY\r\n   * @param {number} maxZ\r\n   * @param {boolean} [isStationary=false]\r\n   * @param {CollidablePhysicsJob} [physicsJob]\r\n   */\r\n  constructor(minX, minY, minZ, maxX, maxY, maxZ, isStationary = false, physicsJob) {\r\n    super(isStationary, physicsJob);\r\n    this.minX = minX;\r\n    this.minY = minY;\r\n    this.minZ = minZ;\r\n    this.maxX = maxX;\r\n    this.maxY = maxY;\r\n    this.maxZ = maxZ;\r\n  }\r\n\r\n  /**\r\n   * Creates a new bounding box with the dimensions of an axially-aligned cube centered around the \r\n   * given center and with the given half-side length.\r\n   *\r\n   * @param {vec3} center\r\n   * @param {number} halfSideLength\r\n   */\r\n  static createAsUniformAroundCenter(center, halfSideLength) {\r\n    const bounds = new Aabb(0, 0, 0, 0, 0, 0);\r\n    bounds.setAsUniformAroundCenter(center, halfSideLength);\r\n    return bounds;\r\n  }\r\n\r\n  /**\r\n   * Updates the dimensions of this bounding box to represent an axially-aligned cube centered\r\n   * around the given center and with the given half-side length.\r\n   *\r\n   * @param {vec3} center\r\n   * @param {number} halfSideLength\r\n   */\r\n  setAsUniformAroundCenter(center, halfSideLength) {\r\n    this.minX = center[0] - halfSideLength;\r\n    this.minY = center[1] - halfSideLength;\r\n    this.minZ = center[2] - halfSideLength;\r\n    this.maxX = center[0] + halfSideLength;\r\n    this.maxY = center[1] + halfSideLength;\r\n    this.maxZ = center[2] + halfSideLength;\r\n  }\r\n\r\n  /** @returns {number} */\r\n  get rangeX() {\r\n    return this.maxX - this.minX;\r\n  }\r\n  /** @returns {number} */\r\n  get rangeY() {\r\n    return this.maxY - this.minY;\r\n  }\r\n  /** @returns {number} */\r\n  get rangeZ() {\r\n    return this.maxZ - this.minZ;\r\n  }\r\n\r\n  /** @returns {number} */\r\n  get centerX() {\r\n    return this.minX + this.rangeX / 2;\r\n  }\r\n  /** @returns {number} */\r\n  get centerY() {\r\n    return this.minY + this.rangeY / 2;\r\n  }\r\n  /** @returns {number} */\r\n  get centerZ() {\r\n    return this.minZ + this.rangeZ / 2;\r\n  }\r\n\r\n  /** @returns {number} */\r\n  get surfaceArea() {\r\n    const rangeX = this.rangeX;\r\n    const rangeY = this.rangeY;\r\n    const rangeZ = this.rangeZ;\r\n    return 2 * (rangeX * rangeY + rangeX * rangeZ + rangeY * rangeZ);\r\n  }\r\n\r\n  /**\r\n   * @returns {vec3}\r\n   * @override\r\n   */\r\n  get centerOfVolume() {\r\n    // Reuse the same object when this is called multiple times.\r\n    this._centerOfVolume = this._centerOfVolume || vec3.create();\r\n    vec3.set(this._centerOfVolume, this.centerX, this.centerY, this.centerZ);\r\n    return this._centerOfVolume;\r\n  }\r\n\r\n  /**\r\n   * @returns {Collidable}\r\n   * @override\r\n   */\r\n  get boundingVolume() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {vec3} value\r\n   * @override\r\n   */\r\n  set position(value) {\r\n    const rangeX = this.rangeX;\r\n    const rangeY = this.rangeY;\r\n    const rangeZ = this.rangeZ;\r\n    this.minX = value[0] - rangeX / 2;\r\n    this.minY = value[1] - rangeY / 2;\r\n    this.minZ = value[2] - rangeZ / 2;\r\n    this.maxX = value[0] + rangeX / 2;\r\n    this.maxY = value[1] + rangeY / 2;\r\n    this.maxZ = value[2] + rangeZ / 2;\r\n  }\r\n\r\n  /**\r\n   * @param {quat} value\r\n   * @override\r\n   */\r\n  set orientation(value) {\r\n    // Do nothing.\r\n  }\r\n\r\n  /**\r\n   * Calls the given callback once for each vertex.\r\n   *\r\n   * Stops as soon as the callback returns true for a vertex.\r\n   *\r\n   * @param {VertexCallback} callback\r\n   * @param {vec3} [vertex] Output param.\r\n   * @returns {boolean} True if one of the callbacks returned true.\r\n   */\r\n  someVertex(callback, vertex) {\r\n    vertex = vertex || tmpVec1;\r\n\r\n    vec3.set(vertex, this.minX, this.minY, this.minZ);\r\n    if (callback(vertex)) return true;\r\n\r\n    vec3.set(vertex, this.maxX, this.minY, this.minZ);\r\n    if (callback(vertex)) return true;\r\n\r\n    vec3.set(vertex, this.minX, this.maxY, this.minZ);\r\n    if (callback(vertex)) return true;\r\n\r\n    vec3.set(vertex, this.maxX, this.maxY, this.minZ);\r\n    if (callback(vertex)) return true;\r\n\r\n    vec3.set(vertex, this.minX, this.minY, this.maxZ);\r\n    if (callback(vertex)) return true;\r\n\r\n    vec3.set(vertex, this.maxX, this.minY, this.maxZ);\r\n    if (callback(vertex)) return true;\r\n\r\n    vec3.set(vertex, this.minX, this.maxY, this.maxZ);\r\n    if (callback(vertex)) return true;\r\n\r\n    vec3.set(vertex, this.maxX, this.maxY, this.maxZ);\r\n    if (callback(vertex)) return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Calls the given callback once for each edge.\r\n   *\r\n   * @param {EdgeCallback} callback\r\n   * @param {LineSegment} [edge] Output param.\r\n   * @returns {boolean} True if one of the callbacks returned true.\r\n   */\r\n  someEdge(callback, edge) {\r\n    edge = edge || _segment;\r\n\r\n    //\r\n    // Edges along front face.\r\n    //\r\n\r\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\r\n    vec3.set(tmpVec2, this.maxX, this.minY, this.minZ);\r\n    edge.reset(tmpVec1, tmpVec2);\r\n    if (callback(edge)) return true;\r\n\r\n    vec3.set(tmpVec1, this.minX, this.maxY, this.minZ);\r\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.minZ);\r\n    edge.reset(tmpVec1, tmpVec2);\r\n    if (callback(edge)) return true;\r\n\r\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\r\n    vec3.set(tmpVec2, this.minX, this.maxY, this.minZ);\r\n    edge.reset(tmpVec1, tmpVec2);\r\n    if (callback(edge)) return true;\r\n\r\n    vec3.set(tmpVec1, this.maxX, this.minY, this.minZ);\r\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.minZ);\r\n    edge.reset(tmpVec1, tmpVec2);\r\n    if (callback(edge)) return true;\r\n\r\n    //\r\n    // Edges along back face.\r\n    //\r\n\r\n    vec3.set(tmpVec1, this.minX, this.minY, this.maxZ);\r\n    vec3.set(tmpVec2, this.maxX, this.minY, this.maxZ);\r\n    edge.reset(tmpVec1, tmpVec2);\r\n    if (callback(edge)) return true;\r\n\r\n    vec3.set(tmpVec1, this.minX, this.maxY, this.maxZ);\r\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\r\n    edge.reset(tmpVec1, tmpVec2);\r\n    if (callback(edge)) return true;\r\n\r\n    vec3.set(tmpVec1, this.minX, this.minY, this.maxZ);\r\n    vec3.set(tmpVec2, this.minX, this.maxY, this.maxZ);\r\n    edge.reset(tmpVec1, tmpVec2);\r\n    if (callback(edge)) return true;\r\n\r\n    vec3.set(tmpVec1, this.maxX, this.minY, this.maxZ);\r\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\r\n    edge.reset(tmpVec1, tmpVec2);\r\n    if (callback(edge)) return true;\r\n\r\n    //\r\n    // Edges between front and back faces.\r\n    //\r\n\r\n    vec3.set(tmpVec1, this.minX, this.minY, this.minZ);\r\n    vec3.set(tmpVec2, this.minX, this.minY, this.maxZ);\r\n    edge.reset(tmpVec1, tmpVec2);\r\n    if (callback(edge)) return true;\r\n\r\n    vec3.set(tmpVec1, this.maxX, this.minY, this.minZ);\r\n    vec3.set(tmpVec2, this.maxX, this.minY, this.maxZ);\r\n    edge.reset(tmpVec1, tmpVec2);\r\n    if (callback(edge)) return true;\r\n\r\n    vec3.set(tmpVec1, this.minX, this.maxY, this.minZ);\r\n    vec3.set(tmpVec2, this.minX, this.maxY, this.maxZ);\r\n    edge.reset(tmpVec1, tmpVec2);\r\n    if (callback(edge)) return true;\r\n\r\n    vec3.set(tmpVec1, this.maxX, this.maxY, this.minZ);\r\n    vec3.set(tmpVec2, this.maxX, this.maxY, this.maxZ);\r\n    edge.reset(tmpVec1, tmpVec2);\r\n    if (callback(edge)) return true;\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nconst _segment = new LineSegment(vec3.create(), vec3.create());\r\n\r\nexport {Aabb};\r\n","import {Collidable} from './collidable';\r\nimport {LineSegment} from './line-segment';\r\n\r\n/**\r\n * This class represents a capsule.\r\n *\r\n * - A capsule is a cylinder with semi-spheres on either end.\r\n * - A capsule can represent a rough approximation of many useful shapes.\r\n * - A capsule can be used for relatively efficient collision detection.\r\n */\r\nclass Capsule extends Collidable {\r\n  /**\r\n   * The default orientation of the capsule is along the z-axis.\r\n   *\r\n   * @param {number} halfDistance Half the distance from the centers of the capsule end spheres.\r\n   * @param {number} radius\r\n   * @param {boolean} [isStationary=false]\r\n   * @param {CollidablePhysicsJob} [physicsJob]\r\n   */\r\n  constructor(halfDistance, radius, isStationary = false, physicsJob) {\r\n    super(isStationary, physicsJob);\r\n    this.halfDistance = halfDistance;\r\n    this.segment = new LineSegment(vec3.fromValues(0, 0, -halfDistance),\r\n        vec3.fromValues(0, 0, halfDistance));\r\n    this.radius = radius;\r\n  }\r\n\r\n  /**\r\n   * @returns {vec3}\r\n   * @override\r\n   */\r\n  get centerOfVolume() {\r\n    return this.segment.center;\r\n  }\r\n\r\n  /**\r\n   * @returns {Collidable}\r\n   * @override\r\n   */\r\n  get boundingVolume() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {vec3} value\r\n   * @override\r\n   */\r\n  set position(value) {\r\n    this.segment.center = value;\r\n  }\r\n\r\n  /**\r\n   * @param {quat} value\r\n   * @override\r\n   */\r\n  set orientation(value) {\r\n    this.segment.orientation = value;\r\n  }\r\n}\r\n\r\nexport {Capsule};\r\n","/**\r\n * This class represents a 3D collidable rigid object.\r\n *\r\n * This is useful for collision detection and response.\r\n *\r\n * @abstract\r\n */\r\nclass Collidable {\r\n  /**\r\n   * @param {boolean} isStationary\r\n   * @param {CollidablePhysicsJob} [physicsJob]\r\n   */\r\n  constructor(isStationary, physicsJob) {\r\n    // Collidable is an abstract class. It should not be instantiated directly.\r\n    if (new.target === Collidable) {\r\n      throw new TypeError('Cannot construct Collidable instances directly');\r\n    }\r\n\r\n    this.isStationary = isStationary;\r\n    this.physicsJob = physicsJob;\r\n    this.collisions = [];\r\n    this.previousCollisions = [];\r\n  }\r\n\r\n  /**\r\n   * Implementing classes can override this to provide a center of mass that is different than the\r\n   * center of volume.\r\n   *\r\n   * @returns {vec3}\r\n   */\r\n  get centerOfMass() {\r\n    return this.centerOfVolume;\r\n  }\r\n\r\n  /**\r\n   * @returns {vec3}\r\n   * @abstract\r\n   */\r\n  get centerOfVolume() {\r\n    // Extending classes should implement this method.\r\n    throw new TypeError('Method not implemented');\r\n  }\r\n\r\n  /**\r\n   * @returns {Collidable}\r\n   * @abstract\r\n   */\r\n  get boundingVolume() {\r\n    // Extending classes should implement this method.\r\n    throw new TypeError('Method not implemented');\r\n  }\r\n\r\n  /**\r\n   * @param {vec3} value\r\n   * @abstract\r\n   */\r\n  set position(value) {\r\n    // Extending classes should implement this method.\r\n    throw new TypeError('Method not implemented');\r\n  }\r\n\r\n  /**\r\n   * @param {quat} value\r\n   * @abstract\r\n   */\r\n  set orientation(value) {\r\n    // Extending classes should implement this method.\r\n    throw new TypeError('Method not implemented');\r\n  }\r\n}\r\n\r\nexport {Collidable};\r\n","import {tmpVec1, tmpVec2} from '../../../util';\r\n\r\n/**\r\n * This class represents a line segment.\r\n */\r\nclass LineSegment {\r\n  /**\r\n   * @param {vec3} start\r\n   * @param {vec3} end\r\n   */\r\n  constructor(start, end) {\r\n    this.start = vec3.create();\r\n    this.end = vec3.create();\r\n    this._center = vec3.create();\r\n    this._originalOrientationStart = vec3.create();\r\n    this._originalOrientationEnd = vec3.create();\r\n    this.reset(start, end);\r\n  }\r\n\r\n  /**\r\n   * @param {vec3} start\r\n   * @param {vec3} end\r\n   */\r\n  reset(start, end) {\r\n    vec3.copy(this.start, start);\r\n    vec3.copy(this.end, end);\r\n    vec3.subtract(this._originalOrientationStart, this.start, this.center);\r\n    vec3.subtract(this._originalOrientationEnd, this.end, this.center);\r\n  }\r\n\r\n  /** @returns {LineSegment} */\r\n  clone() {\r\n    const segment = new LineSegment(this.start, this.end);\r\n    segment._originalOrientationStart = this._originalOrientationStart;\r\n    segment._originalOrientationEnd = this._originalOrientationEnd;\r\n    return segment;\r\n  }\r\n\r\n  /**\r\n   * The UN-NORMALIZED direction of this segment.\r\n   *\r\n   * @returns {vec3}\r\n   */\r\n  get dir() {\r\n    // Reuse the same object when this is called multiple times.\r\n    this._dir = this._dir || vec3.create();\r\n    return vec3.subtract(this._dir, this.end, this.start);\r\n  }\r\n\r\n  /** @returns {vec3} */\r\n  get center() {\r\n    vec3.lerp(this._center, this.start, this.end, 0.5);\r\n    return this._center;\r\n  }\r\n\r\n  /** @param {vec3} value */\r\n  set center(value) {\r\n    // Reuse the same object when this is called multiple times.\r\n    this._displacement = this._displacement || vec3.create();\r\n    vec3.subtract(this._displacement, value, this.center);\r\n\r\n    vec3.add(this.start, this.start, this._displacement);\r\n    vec3.add(this.end, this.end, this._displacement);\r\n  }\r\n\r\n  /** @param {quat} value */\r\n  set orientation(value) {\r\n    vec3.transformQuat(tmpVec1, this._originalOrientationStart, value);\r\n    vec3.transformQuat(tmpVec2, this._originalOrientationEnd, value);\r\n\r\n    // We don't want this to be re-calculated between start/end updates.\r\n    const center = this.center;\r\n\r\n    vec3.add(this.start, center, tmpVec1);\r\n    vec3.add(this.end, center, tmpVec2);\r\n  }\r\n}\r\n\r\nexport {LineSegment};\r\n","import {Collidable} from './collidable';\r\nimport {Sphere} from './sphere-collidable';\r\nimport {LineSegment} from './line-segment';\r\n\r\n/**\r\n * This class represents an oriented bounding box (OBB).\r\n *\r\n * This is useful both for collision detection and for representing any rotated rectangular cuboid.\r\n * An OBB is only appropriate for some geometries. For other geometries, an axially-aligned bounding\r\n * box (AABB) or a bounding sphere may be more appropriate.\r\n */\r\nclass Obb extends Collidable {\r\n  /**\r\n   * Defaults to being centered at the origin with its local axes aligned with the world axes.\r\n   *\r\n   * @param {number} halfSideLengthX\r\n   * @param {number} halfSideLengthY\r\n   * @param {number} halfSideLengthZ\r\n   * @param {boolean} [isStationary=false]\r\n   * @param {CollidablePhysicsJob} [physicsJob]\r\n   */\r\n  constructor(halfSideLengthX, halfSideLengthY, halfSideLengthZ, isStationary = false, physicsJob) {\r\n    super(isStationary, physicsJob);\r\n    this.extents = [\r\n      vec3.fromValues(halfSideLengthX, 0, 0),\r\n      vec3.fromValues(0, halfSideLengthY, 0),\r\n      vec3.fromValues(0, 0, halfSideLengthZ)\r\n    ];\r\n    this.axes = [\r\n      vec3.fromValues(1, 0, 0),\r\n      vec3.fromValues(0, 1, 0),\r\n      vec3.fromValues(0, 0, 1)\r\n    ];\r\n    this.halfSideLengths = [\r\n      halfSideLengthX,\r\n      halfSideLengthY,\r\n      halfSideLengthZ\r\n    ];\r\n    this._center = vec3.create();\r\n    this._orientation = quat.create();\r\n  }\r\n\r\n  /**\r\n   * @returns {vec3}\r\n   * @override\r\n   */\r\n  get centerOfVolume() {\r\n    return this._center;\r\n  }\r\n\r\n  /**\r\n   * @returns {Collidable}\r\n   * @override\r\n   */\r\n  get boundingVolume() {\r\n    // Reuse the same value when this is called multiple times.\r\n    if (!this._boundingSphere) {\r\n      const radius = Math.sqrt(this.halfSideLengthX * this.halfSideLengthX +\r\n          this.halfSideLengthY * this.halfSideLengthY +\r\n          this.halfSideLengthZ * this.halfSideLengthZ);\r\n      this._boundingSphere = new Sphere(0, 0, 0, radius, this.isStationary);\r\n    }\r\n    this._boundingSphere.position = this._center;\r\n    return this._boundingSphere;\r\n  }\r\n\r\n  /**\r\n   * @param {vec3} value\r\n   * @override\r\n   */\r\n  set position(value) {\r\n    vec3.copy(this._center, value);\r\n  }\r\n\r\n  /**\r\n   * @param {quat} value\r\n   * @override\r\n   */\r\n  set orientation(value) {\r\n    quat.copy(this._orientation, value);\r\n    this._updateExtents();\r\n  }\r\n  /** @returns {quat} */\r\n  get orientation() {\r\n    return this._orientation;\r\n  }\r\n\r\n  /** @returns {number} */\r\n  get halfSideLengthX() {\r\n    return this.halfSideLengths[0];\r\n  }\r\n  /** @param {number} value */\r\n  set halfSideLengthX(value) {\r\n    this.halfSideLengths[0] = value;\r\n    this._updateExtents();\r\n  }\r\n\r\n  /** @returns {number} */\r\n  get halfSideLengthY() {\r\n    return this.halfSideLengths[1];\r\n  }\r\n  /** @param {number} value */\r\n  set halfSideLengthY(value) {\r\n    this.halfSideLengths[1] = value;\r\n    this._updateExtents();\r\n  }\r\n\r\n  /** @returns {number} */\r\n  get halfSideLengthZ() {\r\n    return this.halfSideLengths[2];\r\n  }\r\n  /** @param {number} value */\r\n  set halfSideLengthZ(value) {\r\n    this.halfSideLengths[2] = value;\r\n    this._updateExtents();\r\n  }\r\n\r\n  /**\r\n   * Calls the given callback once for each vertex.\r\n   *\r\n   * Stops as soon as the callback returns true for a vertex.\r\n   *\r\n   * @param {VertexCallback} callback\r\n   * @param {vec3} [vertex] Output param.\r\n   * @returns {boolean} True if one of the callbacks returned true.\r\n   */\r\n  someVertex(callback, vertex) {\r\n    vertex = vertex || _vertex1;\r\n\r\n    for (let xScale = -1; xScale <= 1; xScale += 2) {\r\n      for (let yScale = -1; yScale <= 1; yScale += 2) {\r\n        for (let zScale = -1; zScale <= 1; zScale += 2) {\r\n          vec3.copy(vertex, this._center);\r\n          vec3.scaleAndAdd(vertex, vertex, this.extents[0], xScale);\r\n          vec3.scaleAndAdd(vertex, vertex, this.extents[1], yScale);\r\n          vec3.scaleAndAdd(vertex, vertex, this.extents[2], zScale);\r\n          if (callback(vertex)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Calls the given callback once for each edge.\r\n   *\r\n   * @param {EdgeCallback} callback\r\n   * @param {LineSegment} [edge] Output param.\r\n   * @returns {boolean} True if one of the callbacks returned true.\r\n   */\r\n  someEdge(callback, edge) {\r\n    edge = edge || _segment;\r\n\r\n    return _edgeExtentScales.some(edgeExtentScalePair => {\r\n      const vertex1ExtentScales = edgeExtentScalePair[0];\r\n      const vertex2ExtentScales = edgeExtentScalePair[1];\r\n\r\n      // Calculate the edge's first and second vertex.\r\n      vec3.copy(_vertex1, this._center);\r\n      vec3.copy(_vertex2, this._center);\r\n      for (let i = 0; i < 3; i++) {\r\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\r\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\r\n      }\r\n\r\n      // Call back with the edge.\r\n      edge.reset(_vertex1, _vertex2);\r\n      return callback(edge);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calls the given callback once for each face.\r\n   *\r\n   * @param {FaceCallback} callback\r\n   * @param {Array.<vec3>} [face] Output param.\r\n   * @returns {boolean} True if one of the callbacks returned true.\r\n   */\r\n  someFace(callback, face) {\r\n    face = face || [];\r\n\r\n    return _faceExtentScales.some(faceExtentScales => {\r\n      const vertex1ExtentScales = faceExtentScales[0];\r\n      const vertex2ExtentScales = faceExtentScales[1];\r\n      const vertex3ExtentScales = faceExtentScales[2];\r\n      const vertex4ExtentScales = faceExtentScales[3];\r\n\r\n      // Calculate the face's vertices.\r\n      vec3.copy(_vertex1, this._center);\r\n      vec3.copy(_vertex2, this._center);\r\n      vec3.copy(_vertex3, this._center);\r\n      vec3.copy(_vertex4, this._center);\r\n      for (let i = 0; i < 3; i++) {\r\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\r\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\r\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i], vertex3ExtentScales[i]);\r\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i], vertex4ExtentScales[i]);\r\n      }\r\n\r\n      // Call back with the face.\r\n      face.splice(0, 4, _vertex1, _vertex2, _vertex3, _vertex4);\r\n      return callback(face);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calls the given callback once for each face with a given additional offset from the center\r\n   * applied to each face.\r\n   *\r\n   * @param {FaceCallback} callback\r\n   * @param {number} radiusOffset\r\n   * @param {Array.<vec3>} [face] Output param.\r\n   * @returns {boolean} True if one of the callbacks returned true.\r\n   */\r\n  somePushedOutFace(callback, radiusOffset, face) {\r\n    face = face || [];\r\n\r\n    return _faceExtentScales.some((faceExtentScales, index) => {\r\n      const vertex1ExtentScales = faceExtentScales[0];\r\n      const vertex2ExtentScales = faceExtentScales[1];\r\n      const vertex3ExtentScales = faceExtentScales[2];\r\n      const vertex4ExtentScales = faceExtentScales[3];\r\n      const directionOffsets = _pushedOutFaceOffsetDirections[index];\r\n\r\n      // Calculate the face's vertices.\r\n      vec3.copy(_vertex1, this._center);\r\n      vec3.copy(_vertex2, this._center);\r\n      vec3.copy(_vertex3, this._center);\r\n      vec3.copy(_vertex4, this._center);\r\n      for (let i = 0; i < 3; i++) {\r\n        // Add the offset for the normal vertex position.\r\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i], vertex1ExtentScales[i]);\r\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i], vertex2ExtentScales[i]);\r\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i], vertex3ExtentScales[i]);\r\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i], vertex4ExtentScales[i]);\r\n        // Add the pushed-out offset.\r\n        vec3.scaleAndAdd(_vertex1, _vertex1, this.extents[i],\r\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\r\n        vec3.scaleAndAdd(_vertex2, _vertex2, this.extents[i],\r\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\r\n        vec3.scaleAndAdd(_vertex3, _vertex3, this.extents[i],\r\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\r\n        vec3.scaleAndAdd(_vertex4, _vertex4, this.extents[i],\r\n            radiusOffset / this.halfSideLengths[i] * directionOffsets[i]);\r\n      }\r\n\r\n      // Call back with the face.\r\n      face.splice(0, 4, _vertex1, _vertex2, _vertex3, _vertex4);\r\n      return callback(face);\r\n    });\r\n  }\r\n\r\n  _updateExtents() {\r\n    vec3.set(_vertex1, this.halfSideLengths[0], 0, 0);\r\n    vec3.transformQuat(this.extents[0], _vertex1, this._orientation);\r\n    vec3.set(_vertex1, 0, this.halfSideLengths[1], 0);\r\n    vec3.transformQuat(this.extents[1], _vertex1, this._orientation);\r\n    vec3.set(_vertex1, 0, 0, this.halfSideLengths[2]);\r\n    vec3.transformQuat(this.extents[2], _vertex1, this._orientation);\r\n\r\n    vec3.set(_vertex1, 1, 0, 0);\r\n    vec3.transformQuat(this.axes[0], _vertex1, this._orientation);\r\n    vec3.set(_vertex1, 0, 1, 0);\r\n    vec3.transformQuat(this.axes[1], _vertex1, this._orientation);\r\n    vec3.set(_vertex1, 0, 0, 1);\r\n    vec3.transformQuat(this.axes[2], _vertex1, this._orientation);\r\n  }\r\n}\r\n\r\nconst _vertex1 = vec3.create();\r\nconst _vertex2 = vec3.create();\r\nconst _vertex3 = vec3.create();\r\nconst _vertex4 = vec3.create();\r\nconst _segment = new LineSegment(vec3.create(), vec3.create());\r\n\r\nconst _edgeExtentScales = [\r\n  // Front-face edges.\r\n  [[1, -1, -1], [1, -1, 1]],\r\n  [[1, -1, -1], [1, 1, -1]],\r\n  [[1, 1, 1], [1, -1, 1]],\r\n  [[1, 1, 1], [1, 1, -1]],\r\n  // Back-face edges.\r\n  [[-1, -1, -1], [-1, -1, 1]],\r\n  [[-1, -1, -1], [-1, 1, -1]],\r\n  [[-1, 1, 1], [-1, -1, 1]],\r\n  [[-1, 1, 1], [-1, 1, -1]],\r\n  // Front-to-back edges.\r\n  [[1, -1, 1], [-1, -1, 1]],\r\n  [[1, 1, -1], [-1, 1, -1]],\r\n  [[1, 1, 1], [-1, 1, 1]],\r\n  [[1, -1, -1], [-1, -1, -1]],\r\n];\r\n\r\nconst _faceExtentScales = [\r\n  [[1, -1, -1], [1, -1, 1], [1, 1, 1], [1, 1, -1]],\r\n  [[-1, -1, -1], [-1, -1, 1], [-1, 1, 1], [-1, 1, -1]],\r\n  [[-1, 1, -1], [1, 1, -1], [1, 1, 1], [-1, 1, 1]],\r\n  [[-1, -1, -1], [1, -1, -1], [1, -1, 1], [-1, -1, 1]],\r\n  [[-1, -1, 1], [1, -1, 1], [1, 1, 1], [-1, 1, 1]],\r\n  [[-1, -1, -1], [1, -1, -1], [1, 1, -1], [-1, 1, -1]],\r\n];\r\n\r\nconst _pushedOutFaceOffsetDirections = [\r\n  vec3.fromValues(1, 0, 0),\r\n  vec3.fromValues(-1, 0, 0),\r\n  vec3.fromValues(0, 1, 0),\r\n  vec3.fromValues(0, -1, 0),\r\n  vec3.fromValues(0, 0, 1),\r\n  vec3.fromValues(0, 0, -1),\r\n];\r\n\r\nexport {Obb};\r\n\r\n/**\r\n * @callback VertexCallback\r\n * @param {vec3}\r\n * @returns {boolean} If true, iteration will stop.\r\n */\r\n\r\n/**\r\n * @callback EdgeCallback\r\n * @param {LineSegment}\r\n * @returns {boolean} If true, iteration will stop.\r\n */\r\n\r\n/**\r\n * @callback FaceCallback\r\n * @param {Array.<vec3>}\r\n * @returns {boolean} If true, iteration will stop.\r\n */\r\n","import {Collidable} from './collidable';\r\n\r\n/**\r\n * This class represents a bounding sphere.\r\n *\r\n * This is primarily useful for collision detection. A bounding sphere is only appropriate for some\r\n * geometries. For other geometries, an axially-aligned bounding box may be more appropriate. For\r\n * others still, an oriented bounding box or a more complicated hierarchical model may be more\r\n * appropriate.\r\n */\r\nclass Sphere extends Collidable {\r\n  /**\r\n   * @param {number} centerX\r\n   * @param {number} centerY\r\n   * @param {number} centerZ\r\n   * @param {number} radius\r\n   * @param {boolean} [isStationary=false]\r\n   * @param {CollidablePhysicsJob} [physicsJob]\r\n   */\r\n  constructor(centerX, centerY, centerZ, radius, isStationary = false, physicsJob) {\r\n    super(isStationary, physicsJob);\r\n    this.centerX = centerX;\r\n    this.centerY = centerY;\r\n    this.centerZ = centerZ;\r\n    this.radius = radius;\r\n  }\r\n\r\n  /**\r\n   * @returns {vec3}\r\n   * @override\r\n   */\r\n  get centerOfVolume() {\r\n    // Reuse the same object when this is called multiple times.\r\n    this._center = this._center || vec3.create();\r\n    vec3.set(this._center, this.centerX, this.centerY, this.centerZ);\r\n    return this._center;\r\n  }\r\n\r\n  /**\r\n   * @returns {Collidable}\r\n   * @override\r\n   */\r\n  get boundingVolume() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {vec3} value\r\n   * @override\r\n   */\r\n  set position(value) {\r\n    this.centerX = value[0];\r\n    this.centerY = value[1];\r\n    this.centerZ = value[2];\r\n  }\r\n\r\n  /**\r\n   * @param {quat} value\r\n   * @override\r\n   */\r\n  set orientation(value) {\r\n    // Do nothing.\r\n  }\r\n}\r\n\r\nexport {Sphere};\r\n","import * as aabbCollisionDetection from './src/aabb-collision-detection';\r\nimport * as capsuleCollisionDetection from './src/capsule-collision-detection';\r\nimport * as obbCollisionDetection from './src/obb-collision-detection';\r\nimport * as sphereCollisionDetection from './src/sphere-collision-detection';\r\n\r\nexport {\r\n  aabbCollisionDetection,\r\n  capsuleCollisionDetection,\r\n  obbCollisionDetection,\r\n  sphereCollisionDetection,\r\n};\r\n","import * as sphereCollisionDetection from './sphere-collision-detection';\r\nimport * as obbCollisionDetection from './obb-collision-detection';\r\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\r\nimport {aabbVsPoint as geometryAabbVsPoint} from '../../../util';\r\n\r\n/**\r\n * This module defines utility methods for detecting whether intersection has occurred between\r\n * axially-aligned bounding boxes and other shapes.\r\n */\r\n\r\n/**\r\n * @param {Aabb} aabb\r\n * @param {vec3} point\r\n * @returns {boolean}\r\n */\r\nfunction aabbVsPoint(aabb, point) {\r\n  return geometryAabbVsPoint(aabb, point);\r\n}\r\n\r\n/**\r\n * @param {Aabb} aabb\r\n * @param {Sphere} sphere\r\n * @returns {boolean}\r\n */\r\nfunction aabbVsSphere(aabb, sphere) {\r\n  return sphereCollisionDetection.sphereVsAabb(sphere, aabb);\r\n}\r\n\r\n/**\r\n * @param {Aabb} aabbA\r\n * @param {Aabb} aabbB\r\n * @returns {boolean}\r\n */\r\nfunction aabbVsAabb(aabbA, aabbB) {\r\n  return aabbA.maxX >= aabbB.minX && aabbA.minX <= aabbB.maxX &&\r\n      aabbA.maxY >= aabbB.minY && aabbA.minY <= aabbB.maxY &&\r\n      aabbA.maxZ >= aabbB.minZ && aabbA.minZ <= aabbB.maxZ;\r\n}\r\n\r\n/**\r\n * @param {Aabb} aabb\r\n * @param {Obb} obb\r\n * @returns {boolean}\r\n */\r\nfunction aabbVsObb(aabb, obb) {\r\n  return obbCollisionDetection.obbVsAabb(obb, aabb);\r\n}\r\n\r\n/**\r\n * @param {Aabb} aabb\r\n * @param {Capsule} capsule\r\n * @returns {boolean}\r\n */\r\nfunction aabbVsCapsule(aabb, capsule) {\r\n  return capsuleCollisionDetection.capsuleVsAabb(capsule, aabb);\r\n}\r\n\r\nexport {\r\n  aabbVsPoint,\r\n  aabbVsSphere,\r\n  aabbVsAabb,\r\n  aabbVsObb,\r\n  aabbVsCapsule,\r\n};\r\n","/**\r\n * This module defines utility methods for detecting whether intersection has occurred between\r\n * capsules and other shapes.\r\n */\r\n\r\nimport {\r\n  findClosestPointFromAabbToPoint,\r\n  findSquaredDistanceBetweenSegments,\r\n  findSquaredDistanceFromSegmentToPoint,\r\n  tmpVec1\r\n} from '../../../util';\r\nimport * as obbCollisionDetection from './obb-collision-detection';\r\n\r\n/**\r\n * @param {Capsule} capsule\r\n * @param {vec3} point\r\n * @returns {boolean}\r\n */\r\nfunction capsuleVsPoint(capsule, point) {\r\n  return findSquaredDistanceFromSegmentToPoint(capsule.segment, point) <=\r\n      capsule.radius * capsule.radius;\r\n}\r\n\r\n/**\r\n * @param {Capsule} capsule\r\n * @param {Sphere} sphere\r\n * @returns {boolean}\r\n */\r\nfunction capsuleVsSphere(capsule, sphere) {\r\n  const sumOfRadii = capsule.radius + sphere.radius;\r\n  return findSquaredDistanceFromSegmentToPoint(capsule.segment, sphere.centerOfVolume) <=\r\n      sumOfRadii * sumOfRadii;\r\n}\r\n\r\n/**\r\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\r\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\r\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\r\n * tunnelling problem for the rest of this collision system anyway.\r\n *\r\n * @param {Capsule} capsule\r\n * @param {Aabb} aabb\r\n * @returns {boolean}\r\n */\r\nfunction capsuleVsAabb(capsule, aabb) {\r\n  const squaredRadius = capsule.radius * capsule.radius;\r\n\r\n  // Check whether the two capsule ends intersect the AABB (sphere vs AABB) (addresses the\r\n  // capsule-vs-AABB-face case).\r\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, capsule.segment.start);\r\n  if (vec3.squaredDistance(tmpVec1, capsule.segment.start) <= squaredRadius) {\r\n    return true;\r\n  }\r\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, capsule.segment.end);\r\n  if (vec3.squaredDistance(tmpVec1, capsule.segment.end) <= squaredRadius) {\r\n    return true;\r\n  }\r\n\r\n  // Check whether the capsule intersects with any AABB edge (addresses the capsule-vs-AABB-edge\r\n  // case).\r\n  return aabb.someEdge(edge =>\r\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) <= squaredRadius);\r\n\r\n  // (The capsule-vs-AABB-vertex case is covered by the capsule-vs-AABB-edge case).\r\n}\r\n\r\n/**\r\n * @param {Capsule} capsule\r\n * @param {Obb} obb\r\n * @returns {boolean}\r\n */\r\nfunction capsuleVsObb(capsule, obb) {\r\n  return obbCollisionDetection.obbVsCapsule(obb, capsule);\r\n}\r\n\r\n/**\r\n * @param {Capsule} capsuleA\r\n * @param {Capsule} capsuleB\r\n * @returns {boolean}\r\n */\r\nfunction capsuleVsCapsule(capsuleA, capsuleB) {\r\n  const sumOfRadii = capsuleA.radius + capsuleB.radius;\r\n  return findSquaredDistanceBetweenSegments(capsuleA.segment, capsuleB.segment) <=\r\n      sumOfRadii * sumOfRadii;\r\n}\r\n\r\nexport {\r\n  capsuleVsPoint,\r\n  capsuleVsSphere,\r\n  capsuleVsAabb,\r\n  capsuleVsObb,\r\n  capsuleVsCapsule,\r\n};\r\n","/**\r\n * This module defines utility methods for detecting whether intersection has occurred between\r\n * oriented bounding boxes and other shapes.\r\n */\r\n\r\nimport {\r\n  findClosestPointFromObbToPoint,\r\n  findPoiBetweenSegmentAndPlaneRegion,\r\n  findSquaredDistanceBetweenSegments,\r\n  tmpVec1,\r\n  tmpVec2,\r\n  tmpVec3,\r\n  tmpVec4\r\n} from '../../../util';\r\nimport * as aabbCollisionDetection from './aabb-collision-detection';\r\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\r\n\r\n// TODO: Refactor these to not actually calculate the point of intersection. These checks can\r\n// instead be done more efficiently using SAT.\r\n\r\n/**\r\n * @param {Obb} obb\r\n * @param {vec3} point\r\n * @returns {boolean}\r\n */\r\nfunction obbVsPoint(obb, point) {\r\n  vec3.subtract(tmpVec4, point, obb.centerOfVolume);\r\n\r\n  vec3.set(tmpVec1, 1, 0, 0);\r\n  vec3.transformQuat(tmpVec1, tmpVec1, obb.orientation);\r\n  const axis1Distance = vec3.dot(tmpVec4, tmpVec1);\r\n\r\n  if (axis1Distance >= -obb.halfSideLengthX && axis1Distance <= obb.halfSideLengthX) {\r\n    vec3.set(tmpVec2, 0, 1, 0);\r\n    vec3.transformQuat(tmpVec2, tmpVec2, obb.orientation);\r\n    const axis2Distance = vec3.dot(tmpVec4, tmpVec2);\r\n\r\n    if (axis2Distance >= -obb.halfSideLengthY && axis2Distance <= obb.halfSideLengthY) {\r\n      vec3.set(tmpVec3, 0, 0, 1);\r\n      vec3.transformQuat(tmpVec3, tmpVec3, obb.orientation);\r\n      const axis3Distance = vec3.dot(tmpVec4, tmpVec3);\r\n\r\n      return axis3Distance >= -obb.halfSideLengthZ && axis3Distance <= obb.halfSideLengthZ;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * @param {Obb} obb\r\n * @param {Sphere} sphere\r\n * @returns {boolean}\r\n */\r\nfunction obbVsSphere(obb, sphere) {\r\n  findClosestPointFromObbToPoint(tmpVec1, obb, sphere.centerOfVolume);\r\n  return vec3.squaredDistance(tmpVec1, sphere.centerOfVolume) <=\r\n      sphere.radius * sphere.radius;\r\n}\r\n\r\n/**\r\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\r\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\r\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\r\n * tunnelling problem for the rest of this collision system anyway.\r\n *\r\n * @param {Obb} obb\r\n * @param {Aabb} aabb\r\n * @returns {boolean}\r\n */\r\nfunction obbVsAabb(obb, aabb) {\r\n  return _obbVsBoxHelper(obb, aabb, aabbCollisionDetection.aabbVsPoint);\r\n}\r\n\r\n/**\r\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\r\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\r\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\r\n * tunnelling problem for the rest of this collision system anyway.\r\n *\r\n * @param {Obb} obbA\r\n * @param {Obb} obbB\r\n * @returns {boolean}\r\n */\r\nfunction obbVsObb(obbA, obbB) {\r\n  return _obbVsBoxHelper(obbA, obbB, obbVsPoint);\r\n}\r\n\r\n/**\r\n * @param {Obb} obb\r\n * @param {Obb|Aabb} other\r\n * @param {Function} otherVsPointCallback\r\n * @returns {boolean}\r\n * @private\r\n */\r\nfunction _obbVsBoxHelper(obb, other, otherVsPointCallback) {\r\n  // Check whether any vertices from A lie within B's bounds.\r\n  if (obb.someVertex(vertex => otherVsPointCallback(other, vertex))) return true;\r\n\r\n  // Check whether any vertices from B lie within A's bounds.\r\n  if (other.someVertex(vertex => obbVsPoint(obb, vertex))) return true;\r\n\r\n  // We assume that a vertex-to-face collision would have been detected by one of the two above\r\n  // checks. Any edge-to-edge collision must involve both an edge from A through a face of B and\r\n  // vice versa. So it is sufficient to only check the edges of one and the faces of the other.\r\n  if (other.someEdge(edge =>\r\n          obb.someFace(face =>\r\n              findPoiBetweenSegmentAndPlaneRegion(tmpVec1, edge, ...face))))\r\n    return true;\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * @param {Obb} obb\r\n * @param {Capsule} capsule\r\n * @returns {boolean}\r\n */\r\nfunction obbVsCapsule(obb, capsule) {\r\n  // Check the edges.\r\n  const squaredRadius = capsule.radius * capsule.radius;\r\n  let areIntersecting = obb.someEdge(edge =>\r\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) < squaredRadius);\r\n\r\n  if (areIntersecting) return true;\r\n\r\n  // Check the faces.\r\n  areIntersecting = obb.somePushedOutFace(face =>\r\n          findPoiBetweenSegmentAndPlaneRegion(tmpVec1, capsule.segment, ...face), capsule.radius);\r\n\r\n  // Check for inclusion of one shape inside the other.\r\n  areIntersecting = areIntersecting || obbVsPoint(obb, capsule.centerOfVolume);\r\n  areIntersecting = areIntersecting || capsuleCollisionDetection.capsuleVsPoint(capsule,\r\n      obb.centerOfVolume);\r\n\r\n  return areIntersecting;\r\n}\r\n\r\nexport {\r\n  obbVsPoint,\r\n  obbVsSphere,\r\n  obbVsAabb,\r\n  obbVsObb,\r\n  obbVsCapsule,\r\n};\r\n","import {findClosestPointFromAabbToPoint, tmpVec1} from '../../../util';\r\nimport * as obbCollisionDetection from './obb-collision-detection';\r\nimport * as capsuleCollisionDetection from './capsule-collision-detection';\r\n\r\n/**\r\n * This module defines utility methods for detecting whether intersection has occurred between\r\n * spheres and other shapes.\r\n */\r\n\r\n/**\r\n * @param {Sphere} sphere\r\n * @param {vec3} point\r\n * @returns {boolean}\r\n */\r\nfunction sphereVsPoint(sphere, point) {\r\n  return vec3.squaredDistance(point, sphere.centerOfVolume) <= sphere.radius * sphere.radius;\r\n}\r\n\r\n/**\r\n * @param {Sphere} sphereA\r\n * @param {Sphere} sphereB\r\n * @returns {boolean}\r\n */\r\nfunction sphereVsSphere(sphereA, sphereB) {\r\n  const sumOfRadii = sphereA.radius + sphereB.radius;\r\n  return vec3.squaredDistance(sphereA.centerOfVolume, sphereB.centerOfVolume) <=\r\n      sumOfRadii * sumOfRadii;\r\n}\r\n\r\n/**\r\n * @param {Sphere} sphere\r\n * @param {Aabb} aabb\r\n * @returns {boolean}\r\n */\r\nfunction sphereVsAabb(sphere, aabb) {\r\n  findClosestPointFromAabbToPoint(tmpVec1, aabb, sphere.centerOfVolume);\r\n  return vec3.squaredDistance(tmpVec1, sphere.centerOfVolume) <= sphere.radius * sphere.radius;\r\n}\r\n\r\n/**\r\n * @param {Sphere} sphere\r\n * @param {Obb} obb\r\n * @returns {boolean}\r\n */\r\nfunction sphereVsObb(sphere, obb) {\r\n  return obbCollisionDetection.obbVsSphere(obb, sphere);\r\n}\r\n\r\n/**\r\n * @param {Sphere} sphere\r\n * @param {Capsule} capsule\r\n * @returns {boolean}\r\n */\r\nfunction sphereVsCapsule(sphere, capsule) {\r\n  return capsuleCollisionDetection.capsuleVsSphere(capsule, sphere);\r\n}\r\n\r\nexport {\r\n  sphereVsPoint,\r\n  sphereVsSphere,\r\n  sphereVsAabb,\r\n  sphereVsObb,\r\n  sphereVsCapsule,\r\n};\r\n","import * as aabbContactCalculation from './src/aabb-contact-calculation';\r\nimport * as capsuleContactCalculation from './src/capsule-contact-calculation';\r\nimport * as obbContactCalculation from './src/obb-contact-calculation';\r\nimport * as sphereContactCalculation from './src/sphere-contact-calculation';\r\n\r\nexport {\r\n  aabbContactCalculation,\r\n  capsuleContactCalculation,\r\n  obbContactCalculation,\r\n  sphereContactCalculation,\r\n};\r\n","/**\r\n * This module defines utility methods for calculating a contact point between axially-aligned \r\n * bounding boxes and other shapes.\r\n *\r\n * - Each of these functions assumes that the objects are actually colliding.\r\n * - The resulting contact point may be anywhere within the intersection of the two objects.\r\n */\r\n\r\nimport * as sphereContactCalculation from './sphere-contact-calculation';\r\nimport * as obbContactCalculation from './obb-contact-calculation';\r\nimport * as capsuleContactCalculation from './capsule-contact-calculation';\r\nimport {tmpVec1} from '../../../util';\r\nimport {aabbCollisionDetection} from '../../collision-detection';\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Aabb} aabb\r\n * @param {vec3} point\r\n */\r\nfunction aabbVsPoint(contactPoint, contactNormal, aabb, point) {\r\n  vec3.copy(contactPoint, point);\r\n  findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb);\r\n}\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Aabb} aabb\r\n * @param {Sphere} sphere\r\n */\r\nfunction aabbVsSphere(contactPoint, contactNormal, aabb, sphere) {\r\n  sphereContactCalculation.sphereVsAabb(contactPoint, contactNormal, sphere, aabb);\r\n  vec3.negate(contactNormal, contactNormal);\r\n}\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Aabb} aabbA\r\n * @param {Aabb} aabbB\r\n */\r\nfunction aabbVsAabb(contactPoint, contactNormal, aabbA, aabbB) {\r\n  // Compute the contact normal.\r\n  vec3.set(contactNormal, 0, 0, 0);\r\n  const xIntersectionDepth = Math.min(aabbA.maxX - aabbB.minX, aabbB.maxX - aabbA.minX);\r\n  const yIntersectionDepth = Math.min(aabbA.maxY - aabbB.minY, aabbB.maxY - aabbA.minY);\r\n  const zIntersectionDepth = Math.min(aabbA.maxZ - aabbB.minZ, aabbB.maxZ - aabbA.minZ);\r\n  // Assume that the direction of intersection corresponds to whichever axis has the shallowest\r\n  // intersection.\r\n  if (xIntersectionDepth <= yIntersectionDepth) {\r\n    if (xIntersectionDepth <= zIntersectionDepth) {\r\n      contactNormal[0] = aabbA.maxX - aabbB.minX <= aabbB.maxX - aabbA.minX ? 1 : -1;\r\n    } else {\r\n      contactNormal[2] = aabbA.maxZ - aabbB.minZ <= aabbB.maxZ - aabbA.minZ ? 1 : -1;\r\n    }\r\n  } else {\r\n    if (yIntersectionDepth <= zIntersectionDepth) {\r\n      contactNormal[1] = aabbA.maxY - aabbB.minY <= aabbB.maxY - aabbA.minY ? 1 : -1;\r\n    } else {\r\n      contactNormal[2] = aabbA.maxZ - aabbB.minZ <= aabbB.maxZ - aabbA.minZ ? 1 : -1;\r\n    }\r\n  }\r\n\r\n  // TODO: The two AABBs form a square intersection cross-section region along the direction of the\r\n  // normal. Calculate the center of that square to use as the point of contact.\r\n  if (!aabbA.someVertex(vertex => aabbCollisionDetection.aabbVsPoint(aabbB, vertex),\r\n          contactPoint)) {\r\n    aabbB.someVertex(vertex => aabbCollisionDetection.aabbVsPoint(aabbA, vertex), contactPoint);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Aabb} aabb\r\n * @param {Obb} obb\r\n */\r\nfunction aabbVsObb(contactPoint, contactNormal, aabb, obb) {\r\n  obbContactCalculation.obbVsAabb(contactPoint, contactNormal, obb, aabb);\r\n  vec3.negate(contactNormal, contactNormal);\r\n}\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Aabb} aabb\r\n * @param {Capsule} capsule\r\n */\r\nfunction aabbVsCapsule(contactPoint, contactNormal, aabb, capsule) {\r\n  capsuleContactCalculation.capsuleVsAabb(contactPoint, contactNormal, capsule, aabb);\r\n  vec3.negate(contactNormal, contactNormal);\r\n}\r\n\r\n/**\r\n * @param {vec3} contactNormal Output param.\r\n * @param {vec3} contactPoint\r\n * @param {Aabb} aabb\r\n * @private\r\n */\r\nfunction findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb) {\r\n  vec3.set(contactNormal, 0, 0, 0);\r\n  vec3.subtract(tmpVec1, contactPoint, aabb.centerOfVolume);\r\n  const xDistanceFromFace = aabb.rangeX / 2 - Math.abs(tmpVec1[0]);\r\n  const yDistanceFromFace = aabb.rangeY / 2 - Math.abs(tmpVec1[1]);\r\n  const zDistanceFromFace = aabb.rangeZ / 2 - Math.abs(tmpVec1[2]);\r\n  // Assume that the point is contacting whichever face it's closest to.\r\n  if (xDistanceFromFace <= yDistanceFromFace) {\r\n    if (xDistanceFromFace <= zDistanceFromFace) {\r\n      contactNormal[0] = tmpVec1[0] > 0 ? 1 : -1;\r\n    } else {\r\n      contactNormal[2] = tmpVec1[2] > 0 ? 1 : -1;\r\n    }\r\n  } else {\r\n    if (yDistanceFromFace <= zDistanceFromFace) {\r\n      contactNormal[1] = tmpVec1[1] > 0 ? 1 : -1;\r\n    } else {\r\n      contactNormal[2] = tmpVec1[2] > 0 ? 1 : -1;\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  aabbVsPoint,\r\n  aabbVsSphere,\r\n  aabbVsAabb,\r\n  aabbVsObb,\r\n  aabbVsCapsule,\r\n  findAabbNormalFromContactPoint,\r\n};\r\n","/**\r\n * This module defines utility methods for calculating a contact point between capsules and other \r\n * shapes.\r\n *\r\n * - Each of these functions assumes that the objects are actually colliding.\r\n * - The resulting contact point may be anywhere within the intersection of the two objects.\r\n */\r\n\r\nimport {\r\n  findClosestPointFromAabbToPoint,\r\n  findClosestPointOnSegmentToPoint,\r\n  findClosestPointsFromSegmentToSegment,\r\n  tmpVec1,\r\n  tmpVec2\r\n} from '../../../util';\r\nimport * as obbContactCalculation from './obb-contact-calculation';\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Capsule} capsule\r\n * @param {vec3} point\r\n */\r\nfunction capsuleVsPoint(contactPoint, contactNormal, capsule, point) {\r\n  vec3.copy(contactPoint, point);\r\n  findClosestPointOnSegmentToPoint(contactNormal, capsule.segment, point);\r\n  vec3.subtract(contactNormal, contactPoint, contactNormal);\r\n  vec3.normalize(contactNormal, contactNormal);\r\n}\r\n\r\n/**\r\n * Finds the closest point on the surface of the capsule to the sphere center.\r\n *\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Capsule} capsule\r\n * @param {Sphere} sphere\r\n */\r\nfunction capsuleVsSphere(contactPoint, contactNormal, capsule, sphere) {\r\n  const sphereCenter = sphere.centerOfVolume;\r\n  findClosestPointOnSegmentToPoint(contactPoint, capsule.segment, sphereCenter);\r\n  vec3.subtract(contactNormal, sphereCenter, contactPoint);\r\n  vec3.normalize(contactNormal, contactNormal);\r\n  vec3.scaleAndAdd(contactPoint, contactPoint, contactNormal, capsule.radius);\r\n}\r\n\r\n/**\r\n * Finds the closest point on the surface of the capsule to the AABB.\r\n *\r\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\r\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\r\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\r\n * tunnelling problem for the rest of this collision system anyway.\r\n *\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Capsule} capsule\r\n * @param {Aabb} aabb\r\n */\r\nfunction capsuleVsAabb(contactPoint, contactNormal, capsule, aabb) {\r\n  // tmpVec1 represents the closest point on the capsule to the AABB. tmpVec2\r\n  // represents the closest point on the AABB to the capsule.\r\n\r\n  //\r\n  // Check whether the two capsule ends intersect the AABB (sphere vs AABB) (addresses the\r\n  // capsule-vs-AABB-face case).\r\n  //\r\n\r\n  const squaredRadius = capsule.radius * capsule.radius;\r\n  let doesAabbIntersectAnEndPoint = false;\r\n\r\n  let endPoint = capsule.segment.start;\r\n  findClosestPointFromAabbToPoint(tmpVec2, aabb, endPoint);\r\n  if (vec3.squaredDistance(tmpVec2, endPoint) <= squaredRadius) {\r\n    doesAabbIntersectAnEndPoint = true;\r\n  } else {\r\n    endPoint = capsule.segment.end;\r\n    findClosestPointFromAabbToPoint(tmpVec2, aabb, endPoint);\r\n    if (vec3.squaredDistance(tmpVec2, endPoint) <= squaredRadius) {\r\n      doesAabbIntersectAnEndPoint = true;\r\n    }\r\n  }\r\n\r\n  if (!doesAabbIntersectAnEndPoint) {\r\n    //\r\n    // Check whether the capsule intersects with any AABB edge (addresses the capsule-vs-AABB-edge\r\n    // case).\r\n    //\r\n    aabb.someEdge(edge => {\r\n      findClosestPointsFromSegmentToSegment(tmpVec1, tmpVec2,\r\n          capsule.segment, edge);\r\n      const distance = vec3.squaredDistance(tmpVec1, tmpVec2);\r\n      return distance <= squaredRadius;\r\n    });\r\n  }\r\n\r\n  // (The capsule-vs-AABB-vertex case is covered by the capsule-vs-AABB-edge case).\r\n\r\n  findClosestPointOnSegmentToPoint(tmpVec1, capsule.segment, tmpVec2);\r\n  vec3.subtract(contactNormal, tmpVec2, tmpVec1);\r\n  vec3.normalize(contactNormal, contactNormal);\r\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, capsule.radius);\r\n}\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Capsule} capsule\r\n * @param {Obb} obb\r\n */\r\nfunction capsuleVsObb(contactPoint, contactNormal, capsule, obb) {\r\n  obbContactCalculation.obbVsCapsule(contactPoint, contactNormal, obb, capsule);\r\n  vec3.negate(contactNormal, contactNormal);\r\n}\r\n\r\n/**\r\n * Finds the closest point on the surface of capsule A to capsule B.\r\n *\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Capsule} capsuleA\r\n * @param {Capsule} capsuleB\r\n */\r\nfunction capsuleVsCapsule(contactPoint, contactNormal, capsuleA, capsuleB) {\r\n  findClosestPointsFromSegmentToSegment(tmpVec1, tmpVec2,\r\n      capsuleA.segment, capsuleB.segment);\r\n  vec3.subtract(contactNormal, tmpVec2, tmpVec1);\r\n  vec3.normalize(contactNormal, contactNormal);\r\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, capsuleA.radius);\r\n}\r\n\r\nexport {\r\n  capsuleVsPoint,\r\n  capsuleVsSphere,\r\n  capsuleVsAabb,\r\n  capsuleVsObb,\r\n  capsuleVsCapsule,\r\n};\r\n","/**\r\n * This module defines utility methods for calculating a contact point between oriented bounding\r\n * boxes and other shapes.\r\n *\r\n * - Each of these functions assumes that the objects are actually colliding.\r\n * - The resulting contact point may be anywhere within the intersection of the two objects.\r\n */\r\n\r\nimport {\r\n  findPoiBetweenSegmentAndPlaneRegion,\r\n  findClosestPointFromObbToPoint,\r\n  findSquaredDistanceBetweenSegments,\r\n  findClosestPointsFromSegmentToSegment,\r\n  tmpVec1\r\n} from '../../../util';\r\nimport {aabbCollisionDetection, obbCollisionDetection} from '../../collision-detection';\r\nimport {LineSegment} from '../../collidables';\r\nimport * as aabbContactCalculation from './aabb-contact-calculation';\r\n\r\n// TODO: There are more efficient (but far more complicated) algorithms for finding the point of\r\n// intersection with OBBs. Port over some other pre-existing solutions for these.\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Obb} obb\r\n * @param {vec3} point\r\n */\r\nfunction obbVsPoint(contactPoint, contactNormal, obb, point) {\r\n  vec3.copy(contactPoint, point);\r\n  findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\r\n}\r\n\r\n/**\r\n * Finds the closest point anywhere inside the OBB to the center of the sphere.\r\n *\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Obb} obb\r\n * @param {Sphere} sphere\r\n */\r\nfunction obbVsSphere(contactPoint, contactNormal, obb, sphere) {\r\n  findClosestPointFromObbToPoint(contactPoint, obb, sphere.centerOfVolume);\r\n  vec3.subtract(contactNormal, sphere.centerOfVolume, contactPoint);\r\n  vec3.normalize(contactNormal, contactNormal);\r\n}\r\n\r\n/**\r\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\r\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\r\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\r\n * tunnelling problem for the rest of this collision system anyway.\r\n *\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Obb} obb\r\n * @param {Aabb} aabb\r\n */\r\nfunction obbVsAabb(contactPoint, contactNormal, obb, aabb) {\r\n  return _obbVsBoxHelper(contactPoint, contactNormal, obb, aabb, aabbCollisionDetection.aabbVsPoint,\r\n      aabbContactCalculation.findAabbNormalFromContactPoint);\r\n}\r\n\r\n/**\r\n * NOTE: This implementation cheats by checking whether vertices from one shape lie within the\r\n * other. Due to the tunnelling problem, it is possible that intersection occurs without any\r\n * vertices lying within the other shape. However, (A) this is unlikely, and (B) we are ignoring the\r\n * tunnelling problem for the rest of this collision system anyway.\r\n *\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Obb} obbA\r\n * @param {Obb} obbB\r\n */\r\nfunction obbVsObb(contactPoint, contactNormal, obbA, obbB) {\r\n  return _obbVsBoxHelper(contactPoint, contactNormal, obbA, obbB, obbCollisionDetection.obbVsPoint,\r\n      findObbNormalFromContactPoint);\r\n}\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Obb} obb\r\n * @param {Obb|Aabb} other\r\n * @param {Function} otherVsPointCollisionDetectionCallback\r\n * @param {Function} findOtherNormalFromContactPoint\r\n * @private\r\n */\r\nfunction _obbVsBoxHelper(contactPoint, contactNormal, obb, other,\r\n                         otherVsPointCollisionDetectionCallback,\r\n                         findOtherNormalFromContactPoint) {\r\n  // Check whether any vertices from A lie within B's bounds.\r\n  if (obb.someVertex(vertex => otherVsPointCollisionDetectionCallback(other, vertex),\r\n          contactPoint)) {\r\n    findOtherNormalFromContactPoint(contactNormal, contactPoint, other);\r\n    vec3.negate(contactNormal, contactNormal);\r\n    return;\r\n  }\r\n\r\n  // Check whether any vertices from B lie within A's bounds.\r\n  if (other.someVertex(vertex => obbCollisionDetection.obbVsPoint(obb, vertex), contactPoint)) {\r\n    findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\r\n    return;\r\n  }\r\n\r\n  // We assume that a vertex-to-face collision would have been detected by one of the two above\r\n  // checks. Any edge-to-edge collision must involve both an edge from A through a face of B and\r\n  // vice versa. So it is sufficient to only check the edges of one and the faces of the other.\r\n  other.someEdge(edge =>\r\n      obb.someFace(face => findPoiBetweenSegmentAndPlaneRegion(contactPoint, edge, ...face)));\r\n  findObbNormalFromContactPoint(contactNormal, contactPoint, obb);\r\n}\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Obb} obb\r\n * @param {Capsule} capsule\r\n */\r\nfunction obbVsCapsule(contactPoint, contactNormal, obb, capsule) {\r\n  // tmpVec1 is the point on the capsule segment that is closest to the OBB.\r\n\r\n  //\r\n  // Check the edges.\r\n  //\r\n\r\n  const segment = new LineSegment(vec3.create(), vec3.create());\r\n  const squaredRadius = capsule.radius * capsule.radius;\r\n  const areIntersecting = obb.someEdge(edge =>\r\n      findSquaredDistanceBetweenSegments(capsule.segment, edge) < squaredRadius, segment);\r\n\r\n  if (areIntersecting) {\r\n    findClosestPointsFromSegmentToSegment(tmpVec1, contactPoint, capsule.segment, segment);\r\n    vec3.subtract(contactNormal, tmpVec1, contactPoint);\r\n    vec3.normalize(contactNormal, contactNormal);\r\n    return;\r\n  }\r\n\r\n  //\r\n  // Check the faces.\r\n  //\r\n\r\n  obb.somePushedOutFace(face =>\r\n      findPoiBetweenSegmentAndPlaneRegion(tmpVec1, capsule.segment, ...face), capsule.radius);\r\n\r\n  findObbNormalFromContactPoint(contactNormal, tmpVec1, obb);\r\n\r\n  // NOTE: This assumes that the angle between the capsule segment and the face plane is not oblique\r\n  // and that the depth of penetration is shallow. When both of these conditions are not true, the\r\n  // contact point will be offset from the intersection point on the pushed-out face.\r\n  vec3.scaleAndAdd(contactPoint, tmpVec1, contactNormal, -capsule.radius);\r\n}\r\n\r\n/**\r\n * @param {vec3} contactNormal Output param.\r\n * @param {vec3} contactPoint\r\n * @param {Obb} obb\r\n * @private\r\n */\r\nfunction findObbNormalFromContactPoint(contactNormal, contactPoint, obb) {\r\n  // Calculate the displacement along each axis.\r\n  const projections = [];\r\n  vec3.subtract(tmpVec1, contactPoint, obb.centerOfVolume);\r\n  for (let i = 0; i < 3; i++) {\r\n    projections[i] = vec3.dot(obb.axes[i], tmpVec1);\r\n  }\r\n\r\n  // Determine which face the normal is pointing away from.\r\n  vec3.set(contactNormal, 0, 0, 0);\r\n  const xDistanceFromFace = obb.halfSideLengths[0] - Math.abs(projections[0]);\r\n  const yDistanceFromFace = obb.halfSideLengths[1] - Math.abs(projections[1]);\r\n  const zDistanceFromFace = obb.halfSideLengths[2] - Math.abs(projections[2]);\r\n  // Assume that the point is contacting whichever face it's closest to.\r\n  if (xDistanceFromFace <= yDistanceFromFace) {\r\n    if (xDistanceFromFace <= zDistanceFromFace) {\r\n      contactNormal[0] = projections[0] > 0 ? 1 : -1;\r\n    } else {\r\n      contactNormal[2] = projections[2] > 0 ? 1 : -1;\r\n    }\r\n  } else {\r\n    if (yDistanceFromFace <= zDistanceFromFace) {\r\n      contactNormal[1] = projections[1] > 0 ? 1 : -1;\r\n    } else {\r\n      contactNormal[2] = projections[2] > 0 ? 1 : -1;\r\n    }\r\n  }\r\n\r\n  // Apply the OBB's orientation to the normal.\r\n  vec3.transformQuat(contactNormal, contactNormal, obb.orientation);\r\n}\r\n\r\nexport {\r\n  obbVsPoint,\r\n  obbVsSphere,\r\n  obbVsAabb,\r\n  obbVsObb,\r\n  obbVsCapsule,\r\n  findObbNormalFromContactPoint,\r\n};\r\n","/**\r\n * This module defines utility methods for calculating a contact point between spheres and other\r\n * shapes.\r\n *\r\n * - Each of these functions assumes that the objects are actually colliding.\r\n * - The resulting contact point may be anywhere within the intersection of the two objects.\r\n */\r\n\r\nimport {findClosestPointFromAabbSurfaceToPoint} from '../../../util';\r\nimport {findAabbNormalFromContactPoint} from './aabb-contact-calculation';\r\nimport * as obbContactCalculation from './obb-contact-calculation';\r\nimport * as capsuleContactCalculation from './capsule-contact-calculation';\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Sphere} sphere\r\n * @param {vec3} point\r\n */\r\nfunction sphereVsPoint(contactPoint, contactNormal, sphere, point) {\r\n  vec3.copy(contactPoint, point);\r\n  // Assume that the point is contacting the closest point on the surface of the sphere.\r\n  vec3.subtract(contactNormal, point, sphere.centerOfVolume);\r\n  vec3.normalize(contactNormal, contactNormal);\r\n}\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Sphere} sphereA\r\n * @param {Sphere} sphereB\r\n */\r\nfunction sphereVsSphere(contactPoint, contactNormal, sphereA, sphereB) {\r\n  vec3.subtract(contactNormal, sphereB.centerOfVolume, sphereA.centerOfVolume);\r\n  vec3.normalize(contactNormal, contactNormal);\r\n  // The point on the surface of sphere A that is closest to the center of sphere B.\r\n  vec3.scaleAndAdd(contactPoint, sphereA.centerOfVolume, contactNormal, sphereA.radius);\r\n}\r\n\r\n/**\r\n * Finds the closest point on the surface of the AABB to the sphere center.\r\n *\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Sphere} sphere\r\n * @param {Aabb} aabb\r\n */\r\nfunction sphereVsAabb(contactPoint, contactNormal, sphere, aabb) {\r\n  findClosestPointFromAabbSurfaceToPoint(contactPoint, aabb, sphere.centerOfVolume);\r\n  findAabbNormalFromContactPoint(contactNormal, contactPoint, aabb);\r\n  vec3.negate(contactNormal, contactNormal);\r\n}\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Sphere} sphere\r\n * @param {Obb} obb\r\n */\r\nfunction sphereVsObb(contactPoint, contactNormal, sphere, obb) {\r\n  obbContactCalculation.obbVsSphere(contactPoint, contactNormal, obb, sphere);\r\n  vec3.negate(contactNormal, contactNormal);\r\n}\r\n\r\n/**\r\n * @param {vec3} contactPoint Output param.\r\n * @param {vec3} contactNormal Output param.\r\n * @param {Sphere} sphere\r\n * @param {Capsule} capsule\r\n */\r\nfunction sphereVsCapsule(contactPoint, contactNormal, sphere, capsule) {\r\n  capsuleContactCalculation.capsuleVsSphere(contactPoint, contactNormal, capsule, sphere);\r\n  vec3.negate(contactNormal, contactNormal);\r\n}\r\n\r\nexport {\r\n  sphereVsPoint,\r\n  sphereVsSphere,\r\n  sphereVsAabb,\r\n  sphereVsObb,\r\n  sphereVsCapsule,\r\n};\r\n","export * from './collidables';\r\nexport * from './collision-detection';\r\nexport * from './contact-calculation';\r\n\r\nexport * from './src/collidable-factories';\r\nexport * from './src/collidable-physics-job';\r\nexport * from './src/collidable-store';\r\nexport * from './src/collision-handler';\r\nexport * from './src/collision-utils';\r\n","/**\r\n * This module defines a set of factory functions for creating Collidable instances.\r\n */\r\n\r\nimport {\r\n  Capsule,\r\n  Obb,\r\n  Sphere\r\n} from '../collidables';\r\nimport {_geometry} from '../../util';\r\n\r\n/**\r\n * @param {CollidableShapeConfig} params\r\n * @param {CollidablePhysicsJob} [physicsJob]\r\n * @returns {Collidable}\r\n */\r\nfunction createCollidableFromRenderableShape(params, physicsJob) {\r\n  return _collidableCreators[params.collidableShapeId](params, physicsJob);\r\n}\r\n\r\n/**\r\n * This assumes the base RenderableShape has a side length of one unit.\r\n *\r\n * @param {CollidableShapeConfig} params\r\n * @param {CollidablePhysicsJob} [physicsJob]\r\n * @returns {Collidable}\r\n */\r\nfunction createObbFromRenderableShape(params, physicsJob) {\r\n  const halfRangeX = params.scale[0] / 2;\r\n  const halfRangeY = params.scale[1] / 2;\r\n  const halfRangeZ = params.scale[2] / 2;\r\n  return new Obb(halfRangeX, halfRangeY, halfRangeZ, params.isStationary, physicsJob);\r\n}\r\n\r\n/**\r\n * This assumes the base RenderableShape has a \"radius\" of one unit.\r\n *\r\n * @param {CollidableShapeConfig} params\r\n * @param {CollidablePhysicsJob} [physicsJob]\r\n * @returns {Collidable}\r\n */\r\nfunction createSphereFromRenderableShape(params, physicsJob) {\r\n  const radius = params.radius || vec3.length(params.scale) / Math.sqrt(3);\r\n  return new Sphere(0, 0, 0, radius, params.isStationary, physicsJob);\r\n}\r\n\r\n/**\r\n * The radius of the created capsule will be an average from the two shortest sides.\r\n *\r\n * There are two modes: either we use scale, or we use radius and capsuleEndPointsDistance.\r\n *\r\n * @param {CollidableShapeConfig} params\r\n * @param {CollidablePhysicsJob} [physicsJob]\r\n * @returns {Collidable}\r\n */\r\nfunction createCapsuleFromRenderableShape(params, physicsJob) {\r\n  const scale = params.scale;\r\n  const capsuleEndPointsDistance = params.capsuleEndPointsDistance;\r\n  const isStationary = params.isStationary;\r\n  let radius = params.radius;\r\n\r\n  let halfDistance;\r\n\r\n  // There are two modes: either we use scale, or we use radius and capsuleEndPointsDistance.\r\n  if (typeof radius === 'number' && typeof capsuleEndPointsDistance === 'number') {\r\n    halfDistance = capsuleEndPointsDistance / 2;\r\n  } else {\r\n    const copy = vec3.clone(scale);\r\n    copy.sort();\r\n\r\n    const length = copy[2];\r\n    radius = (copy[0] + copy[1]) / 2;\r\n    halfDistance = length / 2 - radius;\r\n  }\r\n\r\n  const orientation = quat.create();\r\n  if (scale[0] > scale[1]) {\r\n    if (scale[0] > scale[2]) {\r\n      vec3.rotateY(orientation, orientation, _geometry.HALF_PI);\r\n    } else {\r\n      // Do nothing; the capsule defaults to being aligned with the z-axis.\r\n    }\r\n  } else {\r\n    if (scale[1] > scale[2]) {\r\n      vec3.rotateX(orientation, orientation, -_geometry.HALF_PI);\r\n    } else {\r\n      // Do nothing; the capsule defaults to being aligned with the z-axis.\r\n    }\r\n  }\r\n\r\n  const capsule = new Capsule(halfDistance, radius, isStationary, physicsJob);\r\n  capsule.orientation = orientation;\r\n\r\n  return capsule;\r\n}\r\n\r\n/**\r\n * @param {CollidableShapeConfig} params\r\n * @param {CollidablePhysicsJob} [physicsJob]\r\n * @returns {Collidable}\r\n */\r\nfunction createSphereOrCapsuleFromRenderableShape(params, physicsJob) {\r\n  const scale = params.scale;\r\n  const radius = params.radius;\r\n  const capsuleEndPointsDistance = params.capsuleEndPointsDistance;\r\n\r\n  const halfLengthX = scale[0] * radius;\r\n  const halfLengthY = scale[1] * radius;\r\n  const halfLengthZ = scale[2] * (radius + capsuleEndPointsDistance) / 2;\r\n\r\n  const minLength = Math.min(Math.min(halfLengthX, halfLengthY), halfLengthZ);\r\n  const maxLength = Math.max(Math.max(halfLengthX, halfLengthY), halfLengthZ);\r\n\r\n  if (maxLength / minLength >= _SPHERE_VS_CAPSULE_ASPECT_RATIO_THRESHOLD) {\r\n    return createCapsuleFromRenderableShape(params, physicsJob);\r\n  } else {\r\n    return createSphereFromRenderableShape(params, physicsJob);\r\n  }\r\n}\r\n\r\nconst _SPHERE_VS_CAPSULE_ASPECT_RATIO_THRESHOLD = 2;\r\n\r\nconst _collidableCreators = {\r\n  'CUBE': createObbFromRenderableShape,\r\n  'SPHERE_OR_CAPSULE': createSphereOrCapsuleFromRenderableShape,\r\n  'SPHERE': createSphereFromRenderableShape,\r\n  'CAPSULE': createCapsuleFromRenderableShape,\r\n};\r\n\r\nexport {\r\n  createCapsuleFromRenderableShape,\r\n  createCollidableFromRenderableShape,\r\n  createObbFromRenderableShape,\r\n  createSphereFromRenderableShape,\r\n  createSphereOrCapsuleFromRenderableShape,\r\n};\r\n\r\n/**\r\n * @typedef {Object} CollidableShapeConfig\r\n * @property {string} collidableShapeId The ID of the type of collidable shape.\r\n * @property {vec3} [scale]\r\n * @property {boolean} [isStationary=false] Whether the collidable is fixed in place.\r\n */\r\n\r\n/**\r\n * @typedef {CollidableShapeConfig} SphericalCollidableShapeParams\r\n * @property {number} radius\r\n */\r\n\r\n/**\r\n * @typedef {SphericalCollidableShapeParams} CapsuleCollidableShapeParams\r\n * @property {number} capsuleEndPointsDistance The distance between the centers of the spheres on either end\r\n * of the capsule.\r\n */\r\n","import {createCollidableFromRenderableShape} from './collidable-factories';\r\nimport {collidableStore} from './collidable-store';\r\nimport {PhysicsJob} from '../../src/physics-job';\r\nimport {createForCollidable} from '../../util';\r\n\r\n/**\r\n * A CollidablePhysicsJob extends the standard PhysicsJob with a collidable geometry.\r\n */\r\nclass CollidablePhysicsJob extends PhysicsJob {\r\n  /**\r\n   * @param {CollidableShapeConfig} collidableParams\r\n   * @param {PhysicsState} state\r\n   * @param {Array.<ForceApplier>} forceAppliers\r\n   * @param {Object} controller\r\n   * @param {CollisionHandler} collisionHandler\r\n   */\r\n  constructor(collidableParams, state, forceAppliers, controller, collisionHandler) {\r\n    super(forceAppliers, state);\r\n\r\n    collidableParams.scale = collidableParams.scale || vec3.fromValues(1, 1, 1);\r\n    this.collidable = createCollidableFromRenderableShape(collidableParams, this);\r\n    this.currentState.unrotatedInertiaTensor =\r\n        createForCollidable(this.collidable, this.currentState.mass);\r\n    this.currentState.updateDependentFields();\r\n    this.isAtRest = false;\r\n    this.controller = controller;\r\n    this._collisionHandler = collisionHandler;\r\n  }\r\n\r\n  /**\r\n   * @param {ForceApplier} forceApplier\r\n   */\r\n  addForceApplier(forceApplier) {\r\n    super.addForceApplier(forceApplier);\r\n    this.isAtRest = false;\r\n  }\r\n\r\n  /**\r\n   * @param {ForceApplier} forceApplier\r\n   */\r\n  removeForceApplier(forceApplier) {\r\n    super.removeForceApplier(forceApplier);\r\n    this.isAtRest = false;\r\n  }\r\n\r\n  /**\r\n   * This callback is triggered in response to a collision.\r\n   *\r\n   * @param {Collision} collision\r\n   * @returns {boolean} True if this needs the standard collision restitution to proceed.\r\n   */\r\n  handleCollision(collision) {\r\n    return this._collisionHandler(collision);\r\n  }\r\n\r\n  /**\r\n   * @param {number} [startTime]\r\n   * @override\r\n   */\r\n  start(startTime) {\r\n    super.start(startTime);\r\n    collidableStore.registerCollidable(this.collidable);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  finish() {\r\n    super.finish();\r\n    collidableStore.unregisterCollidable(this.collidable);\r\n  }\r\n\r\n  /** @returns {vec3} */\r\n  get position() {\r\n    return this.currentState.position;\r\n  }\r\n\r\n  /** @param {vec3} value */\r\n  set position(value) {\r\n    this.currentState.position = vec3.clone(value);\r\n    this.collidable.position = vec3.clone(value);\r\n  }\r\n}\r\n\r\nexport {CollidablePhysicsJob};\r\n\r\n/**\r\n * @typedef {Function} CollisionHandler\r\n * @param {Collision} collision\r\n * @returns {boolean} True if this needs the standard collision restitution to proceed.\r\n */\r\n","import {detectBoundingVolumeIntersection} from './collision-utils';\r\n\r\n// TODO: Implement some form of bounding volume hierarchy to make searching for potential collisions\r\n// more efficient.\r\n\r\n/**\r\n * This class registers and retrieves all Collidables within a scene.\r\n */\r\nclass CollidableStore {\r\n  constructor() {\r\n    this._collidables = [];\r\n  }\r\n\r\n  /**\r\n   * Caches the given program wrapper.\r\n   *\r\n   * This method is idempotent; a given program will only be cached once.\r\n   *\r\n   * @param {Collidable} collidable\r\n   */\r\n  registerCollidable(collidable) {\r\n    this._collidables.push(collidable);\r\n  }\r\n\r\n  /**\r\n   * @param {Collidable} collidable\r\n   */\r\n  unregisterCollidable(collidable) {\r\n    const index = this._collidables.indexOf(collidable);\r\n    if (index >= 0) {\r\n      this._collidables.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Collidable} collidable\r\n   * @returns {Array.<Collidable>}\r\n   */\r\n  getPossibleCollisionsForCollidable(collidable) {\r\n    return this._collidables.filter(other =>\r\n      collidable !== other &&\r\n      detectBoundingVolumeIntersection(collidable, other));\r\n  }\r\n\r\n  /**\r\n   * @returns {Array.<Collision>}\r\n   */\r\n  getPossibleCollisionsForAllCollidables() {\r\n    const result = [];\r\n    for (let i = 0, count = this._collidables.length; i < count; i++) {\r\n      const collidableA = this._collidables[i];\r\n      for (let j = i + 1; j < count; j++) {\r\n        const collidableB = this._collidables[j];\r\n        if (detectBoundingVolumeIntersection(collidableA, collidableB)) {\r\n          result.push({collidableA: collidableA, collidableB: collidableB});\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @param {Function} callback\r\n   */\r\n  forEach(callback) {\r\n    this._collidables.forEach(callback);\r\n  }\r\n}\r\n\r\nconst collidableStore = new CollidableStore();\r\nexport {collidableStore};\r\n\r\n/**\r\n * @typedef {Object} Collision\r\n * @property {Collidable} collidableA\r\n * @property {Collidable} collidableB\r\n * @property {vec3} [contactPoint] In world coordinates.\r\n * @property {vec3} [contactNormal] Points away from body A and toward body B.\r\n * @property {number} [time]\r\n */\r\n","import {\r\n  areVec3sClose,\r\n  tmpVec1,\r\n  tmpVec2,\r\n  tmpVec3,\r\n  tmpVec4,\r\n} from '../../util';\r\n\r\nimport {collidableStore} from './collidable-store';\r\nimport {detectIntersection, calculateContact} from './collision-utils';\r\n\r\n/**\r\n * This module defines a collision pipeline.\r\n *\r\n * These functions will detect collisions between collidable bodies and update their momenta in\r\n * response to the collisions.\r\n *\r\n * - Consists of an efficient broad-phase collision detection step followed by a precise\r\n *   narrow-phase step.\r\n * - Calculates the position, surface normal, and time of each contact.\r\n * - Calculates the impulse of a collision and updates the bodies' linear and angular momenta in\r\n *   response.\r\n * - Applies Coulomb friction to colliding bodies.\r\n * - Sub-divides the time step to more precisely determine when and where a collision occurs.\r\n * - Supports multiple collisions with a single body in a single time step.\r\n * - Efficiently supports bodies coming to rest against each other.\r\n * - Bodies will never penetrate one another.\r\n * - This does not address the tunnelling problem. That is, it is possible for two fast-moving\r\n *   bodies to pass through each other as long as they did not intersect each other during any time\r\n *   step.\r\n * - This only supports collisions between certain types of shapes. Fortunately, this set provides\r\n *   reasonable approximations for most other shapes. The supported types of shapes are: spheres,\r\n *   capsules, AABBs, and OBBs.\r\n *\r\n * ## Objects that come to rest\r\n *\r\n * An important efficiency improvement is to not process objects through the physics engine pipeline\r\n * after they have come to rest. The isAtRest field indicates when a body has come to rest.\r\n *\r\n * isAtRest is set to true after a physics frame is finished if the collisions, forces, position,\r\n * and orientation of a job have not changed from the previous to the current state.\r\n *\r\n * isAtRest is set to false from two possible events: after a physics frame is finished if the\r\n * collisions have changed from the previous to the current state, or when a force is added to\r\n * removed from the job.\r\n *\r\n * ## Collision calculations do not consider velocity\r\n *\r\n * Collision detection works by waiting until two bodies intersect. However, because time frames are\r\n * not infinitely small, when an intersection is detected, it's already past the exact instance of\r\n * collision. To alleviate problems from this, the velocity of each body can be considered when\r\n * calculating the collision time, position, and contact normal. However, taking velocity into\r\n * account makes the contact calculations much more complex, so we do not consider velocity in our\r\n * calculations.\r\n *\r\n * A notable consequence of this is that the calculated contact normals can be incorrect. Consider\r\n * the following moving squares. At time t2 they are found to have collided. The calculated contact\r\n * point will be somewhere within the intersection of the corners. But the calculated contact normal\r\n * will point upwards, while the true contact normal should point to the right. This is because the\r\n * contact calculations do not consider velocity and instead only consider the shallowest direction\r\n * of overlap.\r\n *\r\n * // Time t1\r\n *                    +------------+\r\n *                    |            |\r\n *                    |            |\r\n *                <-- |      B     |\r\n *                    |            |\r\n *  +------------+    |            |\r\n *  |            |    +------------+\r\n *  |            |\r\n *  |      A     | -->\r\n *  |            |\r\n *  |            |\r\n *  +------------+\r\n *\r\n * // Time t2\r\n *         +------------+\r\n *         |            |\r\n *         |            |\r\n *         |      B     |\r\n *         |            |\r\n *  +------------+      |\r\n *  |      +-----|------+\r\n *  |            |\r\n *  |      A     |\r\n *  |            |\r\n *  |            |\r\n *  +------------+\r\n */\r\n\r\n/**\r\n * Detect and handle any collisions between a given job and all other collidable bodies.\r\n *\r\n * @param {CollidablePhysicsJob} job\r\n * @param {DOMHighResTimeStamp} elapsedTime\r\n * @param {PhysicsConfig} physicsParams\r\n */\r\nfunction handleCollisionsForJob(job, elapsedTime, physicsParams) {\r\n  const collidable = job.collidable;\r\n\r\n  // Clear any previous collision info.\r\n  collidable.previousCollisions = collidable.collisions;\r\n  collidable.collisions = [];\r\n\r\n  // Find all colliding collidables.\r\n  const collidingCollidables = findIntersectingCollidablesForCollidable(collidable);\r\n\r\n  // Store the time of collision for each collision.\r\n  const collisions = _recordCollisions(collidable, collidingCollidables, elapsedTime);\r\n\r\n  // Calculate the points of contact for each collision.\r\n  _calculatePointsOfContact(collisions);\r\n\r\n  // Collision resolution.\r\n  _resolveCollisions(collisions, physicsParams);\r\n}\r\n\r\n/**\r\n * Finds all other collidables that intersect with the given collidable.\r\n *\r\n * @param {Collidable} collidable\r\n * @returns {Array.<Collidable>}\r\n */\r\nfunction findIntersectingCollidablesForCollidable(collidable) {\r\n  // Broad-phase collision detection (pairs whose bounding volumes intersect).\r\n  const collidingCollidables = collidableStore.getPossibleCollisionsForCollidable(collidable);\r\n\r\n  // Narrow-phase collision detection (pairs that actually intersect).\r\n  return _detectPreciseCollisionsFromCollidingCollidables(collidable, collidingCollidables);\r\n}\r\n\r\n/**\r\n * @param {Array.<CollidablePhysicsJob>} jobs\r\n */\r\nfunction determineJobsAtRest(jobs) {\r\n  jobs.forEach(job => job.isAtRest = _isJobAtRest(job));\r\n}\r\n\r\nfunction recordOldCollisionsForDevModeForAllCollidables() {\r\n  collidableStore.forEach(_recordOldCollisionsForDevModeForCollidable);\r\n}\r\n\r\n/**\r\n * Logs a warning message for any pair of objects that intersect.\r\n */\r\nfunction checkThatNoObjectsCollide() {\r\n  // Broad-phase collision detection (pairs whose bounding volumes intersect).\r\n  let collisions = collidableStore.getPossibleCollisionsForAllCollidables();\r\n\r\n  // Narrow-phase collision detection (pairs that actually intersect).\r\n  collisions = _detectPreciseCollisionsFromCollisions(collisions);\r\n\r\n  collisions.forEach(collision => {\r\n    console.warn('Objects still intersect after collision resolution', collision);\r\n  });\r\n}\r\n\r\n/**\r\n * Create collision objects that record the time of collision and the collidables in the collision.\r\n *\r\n * Also record references to these collisions on the collidables.\r\n *\r\n * @param {Collidable} collidable\r\n * @param {Array.<Collidable>} collidingCollidables\r\n * @param {DOMHighResTimeStamp} elapsedTime\r\n * @returns {Array.<Collision>}\r\n * @private\r\n */\r\nfunction _recordCollisions(collidable, collidingCollidables, elapsedTime) {\r\n  return collidingCollidables.map(other => {\r\n    const collision = {\r\n      collidableA: collidable,\r\n      collidableB: other,\r\n      time: elapsedTime\r\n    };\r\n\r\n    // Record the fact that these objects collided (the ModelController may want to handle this).\r\n    collision.collidableA.collisions.push(collision);\r\n    collision.collidableB.collisions.push(collision);\r\n\r\n    return collision;\r\n  });\r\n}\r\n\r\n/**\r\n * Narrow-phase collision detection.\r\n *\r\n * Given a list of possible collision pairs, filter out which pairs are actually colliding.\r\n *\r\n * @param {Array.<Collision>} collisions\r\n * @returns {Array.<Collision>}\r\n * @private\r\n */\r\nfunction _detectPreciseCollisionsFromCollisions(collisions) {\r\n  return collisions.filter(collision => {\r\n    // TODO:\r\n    // - Use temporal bisection with discrete sub-time steps to find time of collision (use\r\n    //       x-vs-y-specific intersection detection methods).\r\n    // - Make sure the collision object is set up with the \"previousState\" from the sub-step\r\n    //   before collision and the time from the sub-step after collision (determined from the\r\n    //   previous temporal bisection search...)\r\n\r\n    return detectIntersection(collision.collidableA, collision.collidableB);\r\n  });\r\n}\r\n\r\n/**\r\n * Narrow-phase collision detection.\r\n *\r\n * Given a list of possible collision pairs, filter out which pairs are actually colliding.\r\n *\r\n * @param {Collidable} collidable\r\n * @param {Array.<Collidable>} collidingCollidables\r\n * @returns {Array.<Collidable>}\r\n * @private\r\n */\r\nfunction _detectPreciseCollisionsFromCollidingCollidables(collidable, collidingCollidables) {\r\n  return collidingCollidables.filter(other => {\r\n    // TODO:\r\n    // - Use temporal bisection with discrete sub-time steps to find time of collision (use\r\n    //       x-vs-y-specific intersection detection methods).\r\n    // - Make sure the collision object is set up with the \"previousState\" from the sub-step\r\n    //   before collision and the time from the sub-step after collision (determined from the\r\n    //   previous temporal bisection search...)\r\n\r\n    return detectIntersection(collidable, other);\r\n  });\r\n}\r\n\r\n/**\r\n * Calculate the intersection position and contact normal of each collision.\r\n *\r\n * @param {Array.<Collision>} collisions\r\n * @private\r\n */\r\nfunction _calculatePointsOfContact(collisions) {\r\n  collisions.forEach(calculateContact);\r\n}\r\n\r\n/**\r\n * Updates the linear and angular momenta of each body in response to its collision.\r\n *\r\n * @param {Array.<Collision>} collisions\r\n * @param {PhysicsConfig} physicsParams\r\n * @private\r\n */\r\nfunction _resolveCollisions(collisions, physicsParams) {\r\n  collisions.forEach(collision => {\r\n    // If neither physics job needs the standard collision restitution, then don't do it.\r\n    if (_notifyPhysicsJobsOfCollision(collision)) {\r\n      if (collision.collidableA.physicsJob && collision.collidableB.physicsJob) {\r\n        // Neither of the collidables is stationary.\r\n        _resolveCollision(collision, physicsParams);\r\n      } else {\r\n        // One of the two collidables is stationary.\r\n        _resolveCollisionWithStationaryObject(collision, physicsParams);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @param {Collision} collision\r\n * @returns {boolean} True if one of the PhysicsJobs need the standard collision restitution to\r\n * proceed.\r\n * @private\r\n */\r\nfunction _notifyPhysicsJobsOfCollision(collision) {\r\n  return collision.collidableA.physicsJob.handleCollision(collision) ||\r\n      collision.collidableB.physicsJob.handleCollision(collision)\r\n}\r\n\r\n/**\r\n * Resolve a collision between two moving, physics-based objects.\r\n *\r\n * This is based on collision-response algorithms from Wikipedia\r\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model).\r\n *\r\n * @param {Collision} collision\r\n * @param {PhysicsConfig} physicsParams\r\n * @private\r\n */\r\nfunction _resolveCollision(collision, physicsParams) {\r\n  const collidableA = collision.collidableA;\r\n  const collidableB = collision.collidableB;\r\n  const previousStateA = collidableA.physicsJob.previousState;\r\n  const previousStateB = collidableB.physicsJob.previousState;\r\n  const nextStateA = collidableA.physicsJob.currentState;\r\n  const nextStateB = collidableB.physicsJob.currentState;\r\n  const centerA = collidableA.centerOfMass;\r\n  const centerB = collidableB.centerOfMass;\r\n  const contactPoint = collision.contactPoint;\r\n\r\n  const contactPointOffsetA = tmpVec3;\r\n  vec3.subtract(contactPointOffsetA, contactPoint, centerA);\r\n  const contactPointOffsetB = tmpVec4;\r\n  vec3.subtract(contactPointOffsetB, contactPoint, centerB);\r\n\r\n  //\r\n  // Calculate the relative velocity of the bodies at the point of contact.\r\n  //\r\n  // We use the velocity from the previous state, since it is the velocity that led to the\r\n  // collision.\r\n  //\r\n\r\n  const velocityA = tmpVec1;\r\n  vec3.cross(tmpVec1, previousStateA.angularVelocity, contactPointOffsetA);\r\n  vec3.add(velocityA, previousStateA.velocity, tmpVec1);\r\n\r\n  const velocityB = tmpVec2;\r\n  vec3.cross(tmpVec2, previousStateB.angularVelocity, contactPointOffsetB);\r\n  vec3.add(velocityB, previousStateB.velocity, tmpVec2);\r\n\r\n  const relativeVelocity = vec3.create();\r\n  vec3.subtract(relativeVelocity, velocityB, velocityA);\r\n\r\n  if (vec3.dot(relativeVelocity, collision.contactNormal) >= 0) {\r\n    // If the relative velocity is not pointing against the normal, then the normal was calculated\r\n    // incorrectly (this is likely due to the time step being too large and the fact that our\r\n    // contact calculations don't consider velocity). So update the contact normal to be in the\r\n    // direction of the relative velocity.\r\n\r\n    // TODO: Check that this works as expected.\r\n\r\n    // console.warn('Non-collision because objects are moving away from each other.');\r\n\r\n    vec3.copy(collision.contactNormal, relativeVelocity);\r\n    vec3.normalize(collision.contactNormal, collision.contactNormal);\r\n    vec3.negate(collision.contactNormal, collision.contactNormal);\r\n  }\r\n\r\n  _applyImpulseFromCollision(collision, relativeVelocity, contactPointOffsetA,\r\n      contactPointOffsetB, physicsParams);\r\n\r\n  // NOTE: This state reversion is only applied to collidableA. This assumes that only A is moving\r\n  // during this iteration of the collision pipeline.\r\n\r\n  // Revert to the position and orientation from immediately before the collision.\r\n  vec3.copy(nextStateA.position, previousStateA.position);\r\n  quat.copy(nextStateA.orientation, previousStateA.orientation);\r\n\r\n  // Also revert the collidables' position and orientation.\r\n  collidableA.position = previousStateA.position;\r\n  collidableA.orientation = previousStateA.orientation;\r\n\r\n  nextStateA.updateDependentFields();\r\n  nextStateB.updateDependentFields();\r\n}\r\n\r\n/**\r\n * Resolve a collision between one moving, physics-based object and one stationary object.\r\n *\r\n * @param {Collision} collision\r\n * @param {PhysicsConfig} physicsParams\r\n * @private\r\n */\r\nfunction _resolveCollisionWithStationaryObject(collision, physicsParams) {\r\n  const contactNormal = collision.contactNormal;\r\n\r\n  let physicsCollidable;\r\n  if (collision.collidableA.physicsJob) {\r\n    physicsCollidable = collision.collidableA;\r\n  } else {\r\n    physicsCollidable = collision.collidableB;\r\n    vec3.negate(contactNormal, contactNormal);\r\n  }\r\n\r\n  const previousState = physicsCollidable.physicsJob.previousState;\r\n  const nextState = physicsCollidable.physicsJob.currentState;\r\n  const center = physicsCollidable.centerOfMass;\r\n  const contactPoint = collision.contactPoint;\r\n\r\n  const contactPointOffset = tmpVec3;\r\n  vec3.subtract(contactPointOffset, contactPoint, center);\r\n\r\n  // Calculate the relative velocity of the bodies at the point of contact. We use the velocity from\r\n  // the previous state, since it is the velocity that led to the collision.\r\n  const velocity = vec3.create();\r\n  vec3.cross(tmpVec1, previousState.angularVelocity, contactPointOffset);\r\n  vec3.add(velocity, previousState.velocity, tmpVec1);\r\n\r\n  if (vec3.dot(velocity, contactNormal) <= 0) {\r\n    // If the relative velocity is not pointing against the normal, then the normal was calculated\r\n    // incorrectly (this is likely due to the time step being too large and the fact that our\r\n    // contact calculations don't consider velocity). So update the contact normal to be in the\r\n    // direction of the relative velocity.\r\n\r\n    // TODO: Check that this works as expected.\r\n\r\n    console.warn('Non-collision because object is moving away from stationary object.');\r\n\r\n    vec3.copy(collision.contactNormal, velocity);\r\n    vec3.normalize(collision.contactNormal, collision.contactNormal);\r\n    vec3.negate(collision.contactNormal, collision.contactNormal);\r\n  }\r\n\r\n  _applyImpulseFromCollisionWithStationaryObject(physicsCollidable, collision, velocity,\r\n      contactPointOffset, physicsParams);\r\n\r\n  // Revert to the position and orientation from immediately before the collision.\r\n  vec3.copy(nextState.position, previousState.position);\r\n  quat.copy(nextState.orientation, previousState.orientation);\r\n\r\n  // Also revert the collidable's position and orientation.\r\n  physicsCollidable.position = previousState.position;\r\n  physicsCollidable.orientation = previousState.orientation;\r\n\r\n  nextState.updateDependentFields();\r\n}\r\n\r\n/**\r\n * This is based on collision-response algorithms from Wikipedia\r\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model). This algorithm\r\n * has been simplified by assuming the stationary body has infinite mass and zero velocity.\r\n *\r\n * @param {Collision} collision\r\n * @param {vec3} relativeVelocity\r\n * @param {vec3} contactPointOffsetA\r\n * @param {vec3} contactPointOffsetB\r\n * @param {PhysicsConfig} physicsParams\r\n * @private\r\n */\r\nfunction _applyImpulseFromCollision(collision, relativeVelocity, contactPointOffsetA,\r\n                                    contactPointOffsetB, physicsParams) {\r\n  const collidableA = collision.collidableA;\r\n  const collidableB = collision.collidableB;\r\n\r\n  const stateA = collidableA.physicsJob.currentState;\r\n  const stateB = collidableB.physicsJob.currentState;\r\n\r\n  const contactNormal = collision.contactNormal;\r\n\r\n  //\r\n  // Calculate and apply the main collision impulse.\r\n  //\r\n\r\n  vec3.scale(tmpVec1, relativeVelocity, -(1 + physicsParams.coefficientOfRestitution));\r\n  const numerator = vec3.dot(tmpVec1, contactNormal);\r\n\r\n  vec3.cross(tmpVec1, contactPointOffsetA, contactNormal);\r\n  vec3.transformMat3(tmpVec1, tmpVec1, stateA.inverseInertiaTensor);\r\n  vec3.cross(tmpVec1, tmpVec1, contactPointOffsetA);\r\n\r\n  vec3.cross(tmpVec2, contactPointOffsetB, contactNormal);\r\n  vec3.transformMat3(tmpVec2, tmpVec2, stateB.inverseInertiaTensor);\r\n  vec3.cross(tmpVec2, tmpVec2, contactPointOffsetB);\r\n\r\n  vec3.add(tmpVec1, tmpVec1, tmpVec2);\r\n  const denominator = vec3.dot(tmpVec1, contactNormal) + stateA.inverseMass + stateB.inverseMass;\r\n\r\n  const impulseMagnitude = numerator / denominator;\r\n\r\n  _applyImpulse(stateA, -impulseMagnitude, contactNormal, contactPointOffsetA);\r\n  _applyImpulse(stateB, impulseMagnitude, contactNormal, contactPointOffsetB);\r\n\r\n  //\r\n  // Calculate and apply a dynamic friction impulse.\r\n  //\r\n\r\n  const frictionImpulseMagnitude = impulseMagnitude * physicsParams.coefficientOfFriction;\r\n\r\n  const tangent = tmpVec2;\r\n  vec3.scale(tmpVec1, contactNormal, vec3.dot(relativeVelocity, contactNormal));\r\n  vec3.subtract(tangent, relativeVelocity, tmpVec1);\r\n  vec3.normalize(tangent, tangent);\r\n\r\n  _applyImpulse(stateA, frictionImpulseMagnitude, tangent, contactPointOffsetA);\r\n  _applyImpulse(stateB, -frictionImpulseMagnitude, tangent, contactPointOffsetB);\r\n}\r\n\r\n/**\r\n * This is based on collision-response algorithms from Wikipedia\r\n * (https://en.wikipedia.org/wiki/Collision_response#Impulse-based_reaction_model). This algorithm\r\n * has been simplified by assuming the stationary body has infinite mass and zero velocity.\r\n *\r\n * @param {Collidable} physicsCollidable\r\n * @param {Collision} collision\r\n * @param {vec3} velocity\r\n * @param {vec3} contactPointOffset\r\n * @param {PhysicsConfig} physicsParams\r\n * @private\r\n */\r\nfunction _applyImpulseFromCollisionWithStationaryObject(physicsCollidable, collision, velocity,\r\n                                                        contactPointOffset, physicsParams) {\r\n  const state = physicsCollidable.physicsJob.currentState;\r\n  const contactNormal = collision.contactNormal;\r\n\r\n  //\r\n  // Calculate and apply the main collision impulse.\r\n  //\r\n\r\n  vec3.scale(tmpVec1, velocity, -(1 + physicsParams.coefficientOfRestitution));\r\n  const numerator = vec3.dot(tmpVec1, contactNormal);\r\n\r\n  vec3.cross(tmpVec1, contactPointOffset, contactNormal);\r\n  vec3.transformMat3(tmpVec1, tmpVec1, state.inverseInertiaTensor);\r\n  vec3.cross(tmpVec1, tmpVec1, contactPointOffset);\r\n  const denominator = vec3.dot(tmpVec1, contactNormal) + state.inverseMass;\r\n\r\n  const impulseMagnitude = numerator / denominator;\r\n\r\n  _applyImpulse(state, impulseMagnitude, contactNormal, contactPointOffset);\r\n\r\n  //\r\n  // Calculate and apply a dynamic friction impulse.\r\n  //\r\n\r\n  const frictionImpulseMagnitude = impulseMagnitude * physicsParams.coefficientOfFriction;\r\n\r\n  const tangent = tmpVec2;\r\n  vec3.scale(tmpVec1, contactNormal, vec3.dot(velocity, contactNormal));\r\n  vec3.subtract(tangent, velocity, tmpVec1);\r\n  vec3.normalize(tangent, tangent);\r\n\r\n  _applyImpulse(state, frictionImpulseMagnitude, tangent, contactPointOffset);\r\n}\r\n\r\n/**\r\n * @param {PhysicsState} state\r\n * @param {number} impulseMagnitude\r\n * @param {vec3} impulseDirection\r\n * @param {vec3} contactPointOffset\r\n * @private\r\n */\r\nfunction _applyImpulse(state, impulseMagnitude, impulseDirection, contactPointOffset) {\r\n  // Calculate the updated linear momenta.\r\n  const finalLinearMomentum = vec3.create();\r\n  vec3.scaleAndAdd(finalLinearMomentum, state.momentum, impulseDirection, impulseMagnitude);\r\n\r\n  // Calculate the updated angular momenta.\r\n  const finalAngularMomentum = vec3.create();\r\n  vec3.cross(tmpVec1, contactPointOffset, impulseDirection);\r\n  vec3.scaleAndAdd(finalAngularMomentum, state.angularMomentum, tmpVec1, impulseMagnitude);\r\n\r\n  // Apply the updated momenta.\r\n  vec3.copy(state.momentum, finalLinearMomentum);\r\n  vec3.copy(state.angularMomentum, finalAngularMomentum);\r\n}\r\n\r\n/**\r\n * @param {CollidablePhysicsJob} job\r\n * @returns {boolean}\r\n * @private\r\n */\r\nfunction _isJobAtRest(job) {\r\n  return areVec3sClose(job.currentState.position, job.previousState.position) &&\r\n      areVec3sClose(job.currentState.velocity, job.previousState.velocity) &&\r\n      areVec3sClose(job.currentState.orientation, job.previousState.orientation) &&\r\n      _doCollisionsMatch(job.collidable.collisions, job.collidable.previousCollisions);\r\n}\r\n\r\n/**\r\n * @param {Array.<Collision>} collisionsA\r\n * @param {Array.<Collision>} collisionsB\r\n * @returns {boolean}\r\n * @private\r\n */\r\nfunction _doCollisionsMatch(collisionsA, collisionsB) {\r\n  const count = collisionsA.length;\r\n\r\n  if (count !== collisionsB.length) return false;\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const collisionA = collisionsA[i];\r\n    const collisionB = collisionsB[i];\r\n    if (collisionA.collidableA !== collisionB.collidableA ||\r\n        collisionA.collidableB !== collisionB.collidableB ||\r\n        !areVec3sClose(collisionA.contactPoint, collisionB.contactPoint) ||\r\n        !areVec3sClose(collisionA.contactNormal, collisionB.contactNormal)) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * @param {Collidable} collidable\r\n * @private\r\n */\r\nfunction _recordOldCollisionsForDevModeForCollidable(collidable) {\r\n  if (!collidable.extraPreviousCollisions) {\r\n    collidable.extraPreviousCollisions = [];\r\n  }\r\n\r\n  for (let i = 3; i > 0; i--) {\r\n    collidable.extraPreviousCollisions[i] = collidable.extraPreviousCollisions[i - 1];\r\n  }\r\n  collidable.extraPreviousCollisions[0] = collidable.previousCollisions;\r\n}\r\n\r\n/**\r\n * @param {Collision} collision\r\n * @param {Object} thisController\r\n * @returns {Object}\r\n */\r\nfunction getOtherControllerFromCollision(collision, thisController) {\r\n  const controllerA = collision.collidableA.physicsJob.controller;\r\n  const controllerB = collision.collidableB.physicsJob.controller;\r\n  if (controllerA === thisController) {\r\n    return controllerB;\r\n  } else if (controllerB === thisController) {\r\n    return controllerA;\r\n  } else {\r\n    throw new Error('Neither collidable corresponds to the given controller');\r\n  }\r\n}\r\n\r\nexport {\r\n  handleCollisionsForJob,\r\n  findIntersectingCollidablesForCollidable,\r\n  determineJobsAtRest,\r\n  recordOldCollisionsForDevModeForAllCollidables,\r\n  checkThatNoObjectsCollide,\r\n  getOtherControllerFromCollision,\r\n};\r\n","import {\r\n  Aabb,\r\n  Capsule,\r\n  Obb,\r\n  Sphere\r\n} from '../collidables';\r\n\r\nimport {\r\n  aabbCollisionDetection,\r\n  capsuleCollisionDetection,\r\n  obbCollisionDetection,\r\n  sphereCollisionDetection,\r\n} from '../collision-detection';\r\n\r\nimport {\r\n  aabbContactCalculation,\r\n  capsuleContactCalculation,\r\n  obbContactCalculation,\r\n  sphereContactCalculation,\r\n} from '../contact-calculation';\r\n\r\n/**\r\n * This module defines a collection of static utility functions for detecting and responding to\r\n * collisions.\r\n */\r\n\r\n/**\r\n * @param {Collidable} a\r\n * @param {Collidable} b\r\n * @returns {boolean}\r\n */\r\nfunction detectIntersection(a, b) {\r\n  if (a instanceof Sphere) {\r\n    if (b instanceof Sphere) {\r\n      return sphereCollisionDetection.sphereVsSphere(a, b);\r\n    } else if (b instanceof Aabb) {\r\n      return sphereCollisionDetection.sphereVsAabb(a, b);\r\n    } else if (b instanceof Capsule) {\r\n      return sphereCollisionDetection.sphereVsCapsule(a, b);\r\n    } else if (b instanceof Obb) {\r\n      return sphereCollisionDetection.sphereVsObb(a, b);\r\n    } else {\r\n      return sphereCollisionDetection.sphereVsPoint(a, b);\r\n    }\r\n  } else if (a instanceof Aabb) {\r\n    if (b instanceof Sphere) {\r\n      return aabbCollisionDetection.aabbVsSphere(a, b);\r\n    } else if (b instanceof Aabb) {\r\n      return aabbCollisionDetection.aabbVsAabb(a, b);\r\n    } else if (b instanceof Capsule) {\r\n      return aabbCollisionDetection.aabbVsCapsule(a, b);\r\n    } else if (b instanceof Obb) {\r\n      return aabbCollisionDetection.aabbVsObb(a, b);\r\n    } else {\r\n      return aabbCollisionDetection.aabbVsPoint(a, b);\r\n    }\r\n  } else if (a instanceof Capsule) {\r\n    if (b instanceof Sphere) {\r\n      return capsuleCollisionDetection.capsuleVsSphere(a, b);\r\n    } else if (b instanceof Aabb) {\r\n      return capsuleCollisionDetection.capsuleVsAabb(a, b);\r\n    } else if (b instanceof Capsule) {\r\n      return capsuleCollisionDetection.capsuleVsCapsule(a, b);\r\n    } else if (b instanceof Obb) {\r\n      return capsuleCollisionDetection.capsuleVsObb(a, b);\r\n    } else {\r\n      return capsuleCollisionDetection.capsuleVsPoint(a, b);\r\n    }\r\n  } else if (a instanceof Obb) {\r\n    if (b instanceof Sphere) {\r\n      return obbCollisionDetection.obbVsSphere(a, b);\r\n    } else if (b instanceof Aabb) {\r\n      return obbCollisionDetection.obbVsAabb(a, b);\r\n    } else if (b instanceof Capsule) {\r\n      return obbCollisionDetection.obbVsCapsule(a, b);\r\n    } else if (b instanceof Obb) {\r\n      return obbCollisionDetection.obbVsObb(a, b);\r\n    } else {\r\n      return obbCollisionDetection.obbVsPoint(a, b);\r\n    }\r\n  } else {\r\n    if (b instanceof Sphere) {\r\n      return sphereCollisionDetection.sphereVsPoint(b, a);\r\n    } else if (b instanceof Aabb) {\r\n      return aabbCollisionDetection.aabbVsPoint(b, a);\r\n    } else if (b instanceof Capsule) {\r\n      return capsuleCollisionDetection.capsuleVsPoint(b, a);\r\n    } else if (b instanceof Obb) {\r\n      return obbCollisionDetection.obbVsPoint(b, a);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Collision} collision\r\n */\r\nfunction calculateContact(collision) {\r\n  const a = collision.collidableA;\r\n  const b = collision.collidableB;\r\n  const contactPoint = vec3.create();\r\n  const contactNormal = vec3.create();\r\n\r\n  if (a instanceof Sphere) {\r\n    if (b instanceof Sphere) {\r\n      sphereContactCalculation.sphereVsSphere(contactPoint, contactNormal, a, b);\r\n    } else if (b instanceof Aabb) {\r\n      sphereContactCalculation.sphereVsAabb(contactPoint, contactNormal, a, b);\r\n    } else if (b instanceof Capsule) {\r\n      sphereContactCalculation.sphereVsCapsule(contactPoint, contactNormal, a, b);\r\n    } else if (b instanceof Obb) {\r\n      sphereContactCalculation.sphereVsObb(contactPoint, contactNormal, a, b);\r\n    } else {\r\n      sphereContactCalculation.sphereVsPoint(contactPoint, contactNormal, a, b);\r\n    }\r\n  } else if (a instanceof Aabb) {\r\n    if (b instanceof Sphere) {\r\n      aabbContactCalculation.aabbVsSphere(contactPoint, contactNormal, a, b);\r\n    } else if (b instanceof Aabb) {\r\n      aabbContactCalculation.aabbVsAabb(contactPoint, contactNormal, a, b);\r\n    } else if (b instanceof Capsule) {\r\n      aabbContactCalculation.aabbVsCapsule(contactPoint, contactNormal, a, b);\r\n    } else if (b instanceof Obb) {\r\n      aabbContactCalculation.aabbVsObb(contactPoint, contactNormal, a, b);\r\n    } else {\r\n      aabbContactCalculation.aabbVsPoint(contactPoint, contactNormal, a, b);\r\n    }\r\n  } else if (a instanceof Capsule) {\r\n    if (b instanceof Sphere) {\r\n      capsuleContactCalculation.capsuleVsSphere(contactPoint, contactNormal, a, b);\r\n    } else if (b instanceof Aabb) {\r\n      capsuleContactCalculation.capsuleVsAabb(contactPoint, contactNormal, a, b);\r\n    } else if (b instanceof Capsule) {\r\n      capsuleContactCalculation.capsuleVsCapsule(contactPoint, contactNormal, a, b);\r\n    } else if (b instanceof Obb) {\r\n      capsuleContactCalculation.capsuleVsObb(contactPoint, contactNormal, a, b);\r\n    } else {\r\n      capsuleContactCalculation.capsuleVsPoint(contactPoint, contactNormal, a, b);\r\n    }\r\n  } else if (a instanceof Obb) {\r\n    if (b instanceof Sphere) {\r\n      obbContactCalculation.obbVsSphere(contactPoint, contactNormal, a, b);\r\n    } else if (b instanceof Aabb) {\r\n      obbContactCalculation.obbVsAabb(contactPoint, contactNormal, a, b);\r\n    } else if (b instanceof Capsule) {\r\n      obbContactCalculation.obbVsCapsule(contactPoint, contactNormal, a, b);\r\n    } else if (b instanceof Obb) {\r\n      obbContactCalculation.obbVsObb(contactPoint, contactNormal, a, b);\r\n    } else {\r\n      obbContactCalculation.obbVsPoint(contactPoint, contactNormal, a, b);\r\n    }\r\n  } else {\r\n    if (b instanceof Sphere) {\r\n      sphereContactCalculation.sphereVsPoint(contactPoint, contactNormal, b, a);\r\n    } else if (b instanceof Aabb) {\r\n      aabbContactCalculation.aabbVsPoint(contactPoint, contactNormal, b, a);\r\n    } else if (b instanceof Capsule) {\r\n      capsuleContactCalculation.capsuleVsPoint(contactPoint, contactNormal, b, a);\r\n    } else if (b instanceof Obb) {\r\n      obbContactCalculation.obbVsPoint(contactPoint, contactNormal, b, a);\r\n    } else {}\r\n    vec3.negate(contactNormal, contactNormal);\r\n  }\r\n\r\n  collision.contactPoint = contactPoint;\r\n  collision.contactNormal = contactNormal;\r\n}\r\n\r\n/**\r\n * @param {Collidable} a\r\n * @param {Collidable} b\r\n * @returns {boolean}\r\n */\r\nfunction detectBoundingVolumeIntersection(a, b) {\r\n  return detectIntersection(a.boundingVolume, b.boundingVolume);\r\n}\r\n\r\nexport {\r\n  detectIntersection,\r\n  calculateContact,\r\n  detectBoundingVolumeIntersection,\r\n};\r\n","/**\r\n * This module re-exports all of the exports in the grafx framework. This makes the entire framework\r\n * conveniently accessible via this single module.\r\n */\r\n\r\nexport * from './collisions';\r\nexport * from './integrator';\r\nexport * from './util';\r\n\r\nexport * from './src/physics-engine';\r\nexport * from './src/physics-job';\r\nexport * from './src/physics-state';\r\n","export * from './src/integrator';\r\nexport * from './src/rk4-integrator';\r\n","/**\r\n * This class numerically integrates the equations of motion. That is, an integrator implements\r\n * physics simulations by updating position and velocity values for each time step.\r\n *\r\n * @abstract\r\n */\r\nclass Integrator {\r\n  constructor() {\r\n    // Integrator is an abstract class. It should not be instantiated directly.\r\n    if (new.target === Integrator) {\r\n      throw new TypeError('Cannot construct Integrator instances directly');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Integrate the state from t to t + dt.\r\n   *\r\n   * @param {PhysicsJob} job\r\n   * @param {number} t Total elapsed time.\r\n   * @param {number} dt Duration of the current time step.\r\n   * @abstract\r\n   */\r\n  integrate(job, t, dt) {\r\n    // Extending classes should implement this method.\r\n    throw new TypeError('Method not implemented');\r\n  }\r\n\r\n  /**\r\n   * @returns {PhysicsDerivative}\r\n   */\r\n  static createDerivative() {\r\n    return {\r\n      velocity: vec3.create(),\r\n      force: vec3.create(),\r\n      spin: quat.create(),\r\n      torque: vec3.create()\r\n    };\r\n  }\r\n}\r\n\r\nexport {Integrator};\r\n\r\n/**\r\n * @typedef {Object} PhysicsDerivative\r\n * @property {vec3} velocity Derivative of position.\r\n * @property {vec3} force Derivative of momentum.\r\n * @property {quat} spin Derivative of orientation.\r\n * @property {vec3} torque Derivative of angular momentum.\r\n */\r\n\r\n/**\r\n * @typedef {Object} ForceApplierOutput\r\n * @property {vec3} force\r\n * @property {vec3} torque\r\n */\r\n\r\n/**\r\n * @typedef {Object} ForceApplierInput\r\n * @property {PhysicsState} state\r\n * @property {number} t\r\n * @property {number} dt\r\n */\r\n","import {_geometry, _util} from '../../util';\r\nimport {Integrator} from './integrator';\r\nimport {PhysicsState} from '../../src/physics-state';\r\n\r\n// TODO: Account for the fact that collisions take place between time steps; integration should\r\n// really consider the previous state as being the time and state at the moment of collision.\r\n\r\n/**\r\n * This class numerically integrates the equations of motion. That is, this implements physics\r\n * simulations by updating position and velocity values for each time step.\r\n *\r\n * This integrator is an implementation of the classical Runge-Kutta method (RK4)\r\n * (https://en.wikipedia.org/wiki/Runge_kutta).\r\n *\r\n * This integrator causes energy to be lost at a small rate. This is a common problem for numerical\r\n * integrators, and is usually negligible.\r\n */\r\nclass RK4Integrator extends Integrator {\r\n  constructor() {\r\n    super();\r\n    if (_util.isInDevMode) {\r\n      this._wrapForDevMode();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Integrate the state from t to t + dt.\r\n   *\r\n   * @param {PhysicsJob} job\r\n   * @param {number} t Total elapsed time.\r\n   * @param {number} dt Duration of the current time step.\r\n   */\r\n  integrate(job, t, dt) {\r\n    const state = job.currentState;\r\n    _tempState.copy(state);\r\n\r\n    _calculateDerivative(_a, _tempState, job, t, 0, _EMPTY_DERIVATIVE);\r\n    _calculateDerivative(_b, _tempState, job, t, dt * 0.5, _a);\r\n    _calculateDerivative(_c, _tempState, job, t, dt * 0.5, _b);\r\n    _calculateDerivative(_d, _tempState, job, t, dt, _c);\r\n\r\n    _calculateVec3DerivativeWeightedSum(\r\n        _positionDerivative, _a.velocity, _b.velocity, _c.velocity, _d.velocity);\r\n    _calculateVec3DerivativeWeightedSum(\r\n        _momentumDerivative, _a.force, _b.force, _c.force, _d.force);\r\n    _calculateQuatDerivativeWeightedSum(_orientationDerivative, _a.spin, _b.spin, _c.spin, _d.spin);\r\n    _calculateVec3DerivativeWeightedSum(\r\n        _angularMomentumDerivative, _a.torque, _b.torque, _c.torque, _d.torque);\r\n\r\n    vec3.scaleAndAdd(state.position, state.position, _positionDerivative, dt);\r\n    vec3.scaleAndAdd(state.momentum, state.momentum, _momentumDerivative, dt);\r\n    _geometry.scaleAndAddQuat(state.orientation, state.orientation, _orientationDerivative, dt);\r\n    vec3.scaleAndAdd(state.angularMomentum, state.angularMomentum, _angularMomentumDerivative, dt);\r\n\r\n    state.updateDependentFields();\r\n  }\r\n\r\n  /**\r\n   * Wraps the integrate method and check for NaN values after each integration.\r\n   *\r\n   * @private\r\n   */\r\n  _wrapForDevMode() {\r\n    const unguardedIntegrate = this.integrate.bind(this);\r\n    this.integrate = (job, t, dt) => {\r\n      unguardedIntegrate(job, t, dt);\r\n      _checkForStateError(job.currentState);\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Calculate the derivative from the given state with the given time step.\r\n *\r\n * @param {PhysicsDerivative} out\r\n * @param {PhysicsState} state\r\n * @param {PhysicsJob} job\r\n * @param {number} t\r\n * @param {number} dt\r\n * @param {PhysicsDerivative} d\r\n * @private\r\n */\r\nfunction _calculateDerivative(out, state, job, t, dt, d) {\r\n  vec3.scaleAndAdd(state.position, state.position, d.velocity, dt);\r\n  vec3.scaleAndAdd(state.momentum, state.momentum, d.force, dt);\r\n  _geometry.scaleAndAddQuat(state.orientation, state.orientation, d.spin, dt);\r\n  vec3.scaleAndAdd(state.angularMomentum, state.angularMomentum, d.torque, dt);\r\n\r\n  state.updateDependentFields();\r\n\r\n  out.velocity = state.velocity;\r\n  out.spin = state.spin;\r\n  vec3.set(out.force, 0, 0, 0);\r\n  vec3.set(out.torque, 0, 0, 0);\r\n\r\n  _forceApplierOutput.force = out.force;\r\n  _forceApplierOutput.torque = out.torque;\r\n  _forceApplierInput.state = state;\r\n  _forceApplierInput.t = t + dt;\r\n  _forceApplierInput.dt = dt;\r\n\r\n  job.applyForces(_forceApplierOutput, _forceApplierInput);\r\n}\r\n\r\nconst _EMPTY_DERIVATIVE = Integrator.createDerivative();\r\n\r\nconst _tempState = new PhysicsState();\r\nconst _a = Integrator.createDerivative();\r\nconst _b = Integrator.createDerivative();\r\nconst _c = Integrator.createDerivative();\r\nconst _d = Integrator.createDerivative();\r\n\r\nconst _positionDerivative = vec3.create();\r\nconst _momentumDerivative = vec3.create();\r\nconst _orientationDerivative = quat.create();\r\nconst _angularMomentumDerivative = vec3.create();\r\n\r\nconst _forceApplierOutput = {};\r\nconst _forceApplierInput = {};\r\n\r\n/**\r\n * @param {vec3} out\r\n * @param {vec3} a\r\n * @param {vec3} b\r\n * @param {vec3} c\r\n * @param {vec3} d\r\n * @private\r\n */\r\nfunction _calculateVec3DerivativeWeightedSum(out, a, b, c, d) {\r\n  out[0] = 1 / 6 * (a[0] + 2 * (b[0] + c[0]) + d[0]);\r\n  out[1] = 1 / 6 * (a[1] + 2 * (b[1] + c[1]) + d[1]);\r\n  out[2] = 1 / 6 * (a[2] + 2 * (b[2] + c[2]) + d[2]);\r\n}\r\n\r\n/**\r\n * @param {quat} out\r\n * @param {quat} a\r\n * @param {quat} b\r\n * @param {quat} c\r\n * @param {quat} d\r\n * @private\r\n */\r\nfunction _calculateQuatDerivativeWeightedSum(out, a, b, c, d) {\r\n  out[0] = 1 / 6 * (a[0] + 2 * (b[0] + c[0]) + d[0]);\r\n  out[1] = 1 / 6 * (a[1] + 2 * (b[1] + c[1]) + d[1]);\r\n  out[2] = 1 / 6 * (a[2] + 2 * (b[2] + c[2]) + d[2]);\r\n  out[3] = 1 / 6 * (a[3] + 2 * (b[3] + c[3]) + d[3]);\r\n}\r\n\r\n/**\r\n * @param {PhysicsState} state\r\n * @private\r\n */\r\nfunction _checkForStateError(state) {\r\n  const errorProperties = [\r\n    'position',\r\n    'momentum',\r\n    'orientation',\r\n    'angularMomentum',\r\n  ].filter(property => _containsNaN(state[property]));\r\n  const property = errorProperties[0];\r\n  if (property) {\r\n    throw new Error(`${property} contains a NaN value after integrating: ${state[property]}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Determines whether the given vector contains a NaN value.\r\n *\r\n * @param {vec3} v\r\n * @private\r\n */\r\nfunction _containsNaN(v) {\r\n  return isNaN(v[0]) || isNaN(v[1]) || isNaN(v[2]);\r\n}\r\n\r\nconst rk4Integrator = new RK4Integrator();\r\n\r\nexport {rk4Integrator};\r\n","import {FrameLatencyProfiler, PersistentAnimationJob} from 'lsl-animatex';\r\nimport {_util} from '../util';\r\n\r\nimport {\r\n  checkThatNoObjectsCollide,\r\n  CollidablePhysicsJob,\r\n  determineJobsAtRest,\r\n  handleCollisionsForJob,\r\n  recordOldCollisionsForDevModeForAllCollidables,\r\n} from '../collisions';\r\nimport {PhysicsState} from './physics-state';\r\nimport {rk4Integrator} from '../integrator';\r\n\r\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\r\nconst _LATENCY_LOG_LABEL = 'Physics frame duration';\r\n\r\n/**\r\n * This physics engine simulates high-performance, three-dimensional rigid-body dynamics.\r\n *\r\n * Notable features:\r\n * - Includes collision detection with impulse-based resolution.\r\n * - Decouples the physics simulation and animation rendering time steps, and uses a fixed timestep\r\n * for the physics loop. This gives us numerical stability and precise reproducibility.\r\n * - Suppresses linear and angular momenta below a certain threshold.\r\n *\r\n * The engine consists primarily of a collection of individual physics jobs and an update loop. This\r\n * update loop is in turn controlled by the animation loop. However, whereas the animation loop\r\n * renders each job once per frame loop--regardless of how much time actually elapsed since the\r\n * previous frame--the physics loop updates its jobs at a constant rate. To reconcile these frame\r\n * rates, the physics loop runs as many times as is needed in order to catch up to the time of the\r\n * current animation frame. The physics frame rate should be much higher than the animation frame\r\n * rate.\r\n *\r\n * It is VERY IMPORTANT for a PhysicsJob to minimize the runtime of its update step.\r\n *\r\n * ## A note on job order\r\n *\r\n * The integration+collision pipeline handle one job at a time. A consequence of this design\r\n * is that half of the collisions technically represent a false interaction between the state of the\r\n * first object at time t and the state of the second object at time t - 1.\r\n *\r\n * This implementation prevents a more problematic issue. If all objects were first integrated, then\r\n * all objects were checked for collisions, then all collisions were resolved, then the following\r\n * scenario could arise:\r\n * - The next position of object A collides with the previous position of object B, but not with the\r\n *   next position of object B, so object A moves successfully to its new position.\r\n * - The next position of object B collides with the next position of object C, so objects B and C\r\n *   are reset to their previous positions.\r\n * - Object B and C now intersect.\r\n */\r\nclass PhysicsEngine extends PersistentAnimationJob {\r\n  /**\r\n   * Clients should call PhysicsEngine.create instead of instantiating a PhysicsEngine directly.\r\n   *\r\n   * @param {PhysicsConfig} physicsParams\r\n   */\r\n  constructor(physicsParams) {\r\n    super();\r\n\r\n    if (_physicsEngine) {\r\n      throw new Error('Can\\'t instantiate multiple instances of PhysicsEngine.');\r\n    }\r\n\r\n    _physicsEngine = this;\r\n\r\n    this._physicsParams = physicsParams;\r\n    this.integrator = rk4Integrator;\r\n    this._elapsedTime = 0.0;\r\n    this._remainingTime = 0.0;\r\n    this._nonCollidableJobs = [];\r\n    this._collidableJobs = [];\r\n\r\n    if (_util.isInDevMode) {\r\n      this._setUpForInDevMode();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PhysicsConfig} physicsParams\r\n   */\r\n  static create(physicsParams) {\r\n    new PhysicsEngine(physicsParams);\r\n  }\r\n\r\n  reset() {\r\n    this._elapsedTime = 0.0;\r\n    this._remainingTime = 0.0;\r\n    this._nonCollidableJobs = [];\r\n    this._collidableJobs = [];\r\n  }\r\n\r\n  /**\r\n   * Adds the given PhysicsJob.\r\n   *\r\n   * @param {PhysicsJob} job\r\n   */\r\n  addJob(job) {\r\n    // console.debug(`Starting PhysicsJob`);\r\n\r\n    if (job instanceof CollidablePhysicsJob) {\r\n      this._collidableJobs.push(job);\r\n    } else {\r\n      this._nonCollidableJobs.push(job);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the given PhysicsJob.\r\n   *\r\n   * Throws no error if the job is not registered.\r\n   *\r\n   * @param {PhysicsJob} job\r\n   */\r\n  removeJob(job) {\r\n    // console.debug(`Cancelling PhysicsJob`);\r\n    this._removeJob(job);\r\n  }\r\n\r\n  /**\r\n   * Wraps the draw and update methods in a profiler function that will track the frame latencies.\r\n   *\r\n   * @private\r\n   */\r\n  _setUpForInDevMode() {\r\n    const unwrappedUpdate = this.update.bind(this);\r\n    const latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD, \r\n        this._physicsParams.timeStepDuration, _LATENCY_LOG_LABEL);\r\n    latencyProfiler.start();\r\n\r\n    this.update = (...args) => {\r\n      const beforeTime = performance.now();\r\n      unwrappedUpdate(...args);\r\n      const deltaTime = performance.now() - beforeTime;\r\n      latencyProfiler.recordFrameLatency(deltaTime);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update the physics state for the current animation update frame.\r\n   *\r\n   * @param {DOMHighResTimeStamp} currentTime\r\n   * @param {DOMHighResTimeStamp} deltaTime\r\n   */\r\n  update(currentTime, deltaTime) {\r\n    this._remainingTime += deltaTime;\r\n\r\n    // Run as many constant-interval physics updates as are needed for the given animation frame\r\n    // interval.\r\n    while (this._remainingTime >= this._physicsParams.timeStepDuration) {\r\n      this._updateToNextPhysicsFrame();\r\n      this._elapsedTime += this._physicsParams.timeStepDuration;\r\n      this._remainingTime -= this._physicsParams.timeStepDuration;\r\n    }\r\n\r\n    // Calculate the intermediate physics state to use for rendering the current animation frame.\r\n    const partialRatio = this._remainingTime / this._physicsParams.timeStepDuration;\r\n    this._setPartialStateForRenderTimeStepForAllJobs(partialRatio);\r\n  }\r\n\r\n  _updateToNextPhysicsFrame() {\r\n    if (_util.isInDevMode) {\r\n      this._recordOldStatesForAllJobsForDevMode();\r\n      recordOldCollisionsForDevModeForAllCollidables();\r\n    }\r\n\r\n    this._nonCollidableJobs.forEach(this._integratePhysicsStateForJob.bind(this));\r\n    this._collidableJobs.forEach(job => {\r\n      if (!job.isAtRest) {\r\n        this._integratePhysicsStateForCollidableJob(job);\r\n        handleCollisionsForJob(job, this._elapsedTime, this._physicsParams);\r\n      }\r\n    });\r\n\r\n    if (_util.isInDevMode) {\r\n      checkThatNoObjectsCollide();\r\n    }\r\n\r\n    this._suppressLowMomentaForAllJobs();\r\n\r\n    determineJobsAtRest(this._collidableJobs);\r\n  }\r\n\r\n  /**\r\n   * Removes the given job from the collection of active jobs if it exists.\r\n   *\r\n   * @param {PhysicsJob} job\r\n   * @param {number} [index=-1]\r\n   * @private\r\n   */\r\n  _removeJob(job, index = -1) {\r\n    if (job instanceof CollidablePhysicsJob) {\r\n      _removeJobFromCollection(job, index, this._collidableJobs);\r\n    } else {\r\n      _removeJobFromCollection(job, index, this._nonCollidableJobs);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the current physics state for a job for the current physics update frame.\r\n   *\r\n   * This includes applying all forces that have been registered with the physics job.\r\n   *\r\n   * @param {CollidablePhysicsJob} job\r\n   * @private\r\n   */\r\n  _integratePhysicsStateForCollidableJob(job) {\r\n    this._integratePhysicsStateForJob(job);\r\n\r\n    // Update the collidable's position and orientation.\r\n    job.collidable.position = job.currentState.position;\r\n    job.collidable.orientation = job.currentState.orientation;\r\n  }\r\n\r\n  /**\r\n   * Update the current physics state for a job for the current physics update frame.\r\n   *\r\n   * This includes applying all forces that have been registered with the physics job.\r\n   *\r\n   * @param {PhysicsJob} job\r\n   * @private\r\n   */\r\n  _integratePhysicsStateForJob(job) {\r\n    job.previousState.copy(job.currentState);\r\n    this.integrator.integrate(job, this._elapsedTime, this._physicsParams.timeStepDuration);\r\n  }\r\n\r\n  _suppressLowMomentaForAllJobs() {\r\n    this._collidableJobs.forEach(job => _suppressLowMomentaForJob(job,\r\n        this._physicsParams.lowMomentumSuppressionThreshold,\r\n        this._physicsParams.lowAngularMomentumSuppressionThreshold));\r\n    this._nonCollidableJobs.forEach(job => _suppressLowMomentaForJob(job,\r\n        this._physicsParams.lowMomentumSuppressionThreshold,\r\n        this._physicsParams.lowAngularMomentumSuppressionThreshold));\r\n  }\r\n\r\n  /**\r\n   * Calculate the intermediate physics state to use for rendering the current animation frame. The\r\n   * given ratio specifies how far the current render frame is between the previous and current\r\n   * physics update frames.\r\n   *\r\n   * @param {number} partialRatio\r\n   * @private\r\n   */\r\n  _setPartialStateForRenderTimeStepForAllJobs(partialRatio) {\r\n    this._collidableJobs.forEach(_setPartialStateForRenderTimeStepForJob.bind(null, partialRatio));\r\n    this._nonCollidableJobs.forEach(_setPartialStateForRenderTimeStepForJob.bind(null, partialRatio));\r\n  }\r\n\r\n  _recordOldStatesForAllJobsForDevMode() {\r\n    this._collidableJobs.forEach(_recordOldStatesForJob);\r\n    this._nonCollidableJobs.forEach(_recordOldStatesForJob);\r\n  }\r\n\r\n  draw() {}\r\n\r\n  /**\r\n   * @returns {PhysicsEngine}\r\n   */\r\n  static get instance() {\r\n    if (!_physicsEngine) {\r\n      throw new Error('Can\\'t access PhysicsEngine.instance before it has been instantiated.');\r\n    }\r\n    return _physicsEngine;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {PhysicsJob} job\r\n * @param {number} lowMomentumSuppressionThreshold\r\n * @param {number} lowAngularMomentumSuppressionThreshold\r\n * @private\r\n */\r\nfunction _suppressLowMomentaForJob(job, lowMomentumSuppressionThreshold,\r\n                                   lowAngularMomentumSuppressionThreshold) {\r\n  const currentState = job.currentState;\r\n\r\n  if (vec3.squaredLength(currentState.momentum) < lowMomentumSuppressionThreshold) {\r\n    vec3.set(currentState.momentum, 0, 0, 0);\r\n  }\r\n\r\n  if (vec3.squaredLength(currentState.angularMomentum) < lowAngularMomentumSuppressionThreshold) {\r\n    vec3.set(currentState.angularMomentum, 0, 0, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {PhysicsJob} job\r\n * @param {number} index\r\n * @param {Array.<PhysicsJob>} jobs\r\n * @private\r\n */\r\nfunction _removeJobFromCollection(job, index, jobs) {\r\n  if (index >= 0) {\r\n    jobs.splice(index, 1);\r\n  } else {\r\n    const count = jobs.length;\r\n    for (index = 0; index < count; index++) {\r\n      if (jobs[index] === job) {\r\n        jobs.splice(index, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} partialRatio\r\n * @param {PhysicsJob} job\r\n * @private\r\n */\r\nfunction _setPartialStateForRenderTimeStepForJob(partialRatio, job) {\r\n  job.renderState.lerp(job.previousState, job.currentState, partialRatio);\r\n}\r\n\r\n/**\r\n * @param {PhysicsJob} job\r\n * @private\r\n */\r\nfunction _recordOldStatesForJob(job) {\r\n  if (!job.extraPreviousStates) {\r\n    job.extraPreviousStates = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      job.extraPreviousStates[i] = new PhysicsState();\r\n    }\r\n  }\r\n\r\n  for (let i = 3; i > 0; i--) {\r\n    job.extraPreviousStates[i].copy(job.extraPreviousStates[i - 1]);\r\n  }\r\n  job.extraPreviousStates[0].copy(job.previousState);\r\n}\r\n\r\nlet _physicsEngine = null;\r\n\r\nexport {PhysicsEngine};\r\n","import {animator} from 'lsl-animatex';\r\nimport {PhysicsEngine} from './physics-engine';\r\nimport {PhysicsState} from './physics-state';\r\nimport {_util} from '../util';\r\n\r\n/**\r\n * A PhysicsJob maintains a current force/momentum state and defines a method for applying forces at\r\n * a given physics time step.\r\n */\r\nclass PhysicsJob {\r\n  /**\r\n   * @param {Array.<ForceApplier>} [forceAppliers]\r\n   * @param {PhysicsState} [state]\r\n   */\r\n  constructor(forceAppliers, state) {\r\n    forceAppliers = forceAppliers || [];\r\n    state = state || new PhysicsState();\r\n\r\n    this.startTime = null;\r\n    this.currentState = state;\r\n    this.previousState = null;\r\n    this.renderState = null;\r\n    this._forceAppliers = forceAppliers;\r\n  }\r\n\r\n  /**\r\n   * @param {ForceApplierOutput} outputParams\r\n   * @param {ForceApplierInput} inputParams\r\n   */\r\n  applyForces(outputParams, inputParams) {\r\n    this._forceAppliers.forEach(forceApplier => forceApplier(outputParams, inputParams));\r\n  }\r\n\r\n  /**\r\n   * @param {ForceApplier} forceApplier\r\n   * @param {number} [index=0] The index to add the given force applier in the current list of\r\n   * appliers.\r\n   */\r\n  addForceApplier(forceApplier, index = 0) {\r\n    this._forceAppliers.splice(index, 0, forceApplier);\r\n  }\r\n\r\n  /**\r\n   * @param {ForceApplier} forceApplier\r\n   */\r\n  removeForceApplier(forceApplier) {\r\n    this._forceAppliers.splice(this._forceAppliers.indexOf(forceApplier), 1);\r\n  }\r\n\r\n  /**\r\n   * Registers this PhysicsJob and all of its descendant child jobs with the physics engine.\r\n   *\r\n   * @param {number} [startTime]\r\n   */\r\n  start(startTime) {\r\n    this.startTime = startTime || animator.currentTime;\r\n\r\n    const previousState = new PhysicsState();\r\n    previousState.copy(this.currentState);\r\n    const renderState = new PhysicsState();\r\n    renderState.copy(this.currentState);\r\n\r\n    this.previousState = previousState;\r\n    this.renderState = renderState;\r\n\r\n    if (_util.isInDevMode) {\r\n      // It is useful for debugging to be able to trace the states back to their jobs.\r\n      this.currentState.job = this;\r\n      this.previousState.job = this;\r\n      this.renderState.job = this;\r\n    }\r\n\r\n    PhysicsEngine.instance.addJob(this);\r\n  }\r\n\r\n  /**\r\n   * Unregisters this PhysicsJob and all of its descendant child jobs with the physics engine.\r\n   *\r\n   * Throws no error if the job is not registered.\r\n   */\r\n  finish() {\r\n    PhysicsEngine.instance.removeJob(this);\r\n  }\r\n\r\n  /**\r\n   * @param {number} [startTime]\r\n   */\r\n  restart(startTime) {\r\n    this.finish();\r\n    this.start(startTime);\r\n  }\r\n}\r\n\r\nexport {PhysicsJob};\r\n\r\n/**\r\n * @typedef {Function} ForceApplier\r\n * @property {vec3} force Output.\r\n * @property {vec3} torque Output.\r\n * @property {PhysicsState} state Input.\r\n * @property {number} t Input.\r\n * @property {number} dt Input.\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhysicsConfig\r\n * @property {number} timeStepDuration\r\n * @property {number} gravity\r\n * @property {vec3} _gravityVec\r\n * @property {number} linearDragCoefficient\r\n * @property {number} angularDragCoefficient\r\n * @property {number} coefficientOfRestitution\r\n * @property {number} coefficientOfFriction\r\n * @property {number} lowMomentumSuppressionThreshold\r\n * @property {number} lowAngularMomentumSuppressionThreshold\r\n */\r\n","import {rotateTensor, createBoxInertiaTensor} from '../util';\r\n\r\n/**\r\n * This class represents the state of an object that is needed for a physics simulation (such as\r\n * position, momentum, and mass).\r\n */\r\nclass PhysicsState {\r\n  /**\r\n   * @param {DynamicsConfig} [dynamicsParams={}]\r\n   */\r\n  constructor(dynamicsParams = {}) {\r\n    const position = dynamicsParams.position || vec3.create();\r\n    const momentum = dynamicsParams.momentum || vec3.create();\r\n    const orientation = dynamicsParams.orientation || quat.create();\r\n    const angularMomentum = dynamicsParams.angularMomentum || vec3.create();\r\n    const mass = dynamicsParams.mass || 1;\r\n    const unrotatedInertiaTensor = dynamicsParams.unrotatedInertiaTensor || createBoxInertiaTensor(1, 1, 1, mass);\r\n\r\n    // Constant fields.\r\n\r\n    this.mass = mass;\r\n    this.inverseMass = 1 / mass;\r\n    this.unrotatedInertiaTensor = unrotatedInertiaTensor;\r\n\r\n    // Independent fields.\r\n\r\n    this.position = position;\r\n    this.momentum = momentum;\r\n    this.orientation = orientation;\r\n    this.angularMomentum = angularMomentum;\r\n\r\n    // Dependent fields.\r\n\r\n    // Linear velocity.\r\n    this.velocity = vec3.create();\r\n    // Quaternion-based representation of the rate of change in orientation.\r\n    this.spin = quat.create();\r\n    // Vector-based representation of the angular velocity.\r\n    this.angularVelocity = vec3.create();\r\n    // The inverse inertia tensor rotated to the world coordinate frame.\r\n    this.inverseInertiaTensor = mat3.create();\r\n\r\n    this.updateDependentFields();\r\n  }\r\n\r\n  updateDependentFields() {// TODO: Test this somehow...\r\n    // Update linear velocity.\r\n    vec3.scale(this.velocity, this.momentum, this.inverseMass);\r\n\r\n    // Update angular velocity.\r\n    quat.normalize(this.orientation, this.orientation);\r\n    rotateTensor(this.inverseInertiaTensor, this.unrotatedInertiaTensor, this.orientation);\r\n    mat3.invert(this.inverseInertiaTensor, this.unrotatedInertiaTensor);\r\n    vec3.transformMat3(this.angularVelocity, this.angularMomentum, this.inverseInertiaTensor);\r\n    quat.set(this.spin, this.angularVelocity[0], this.angularVelocity[1],\r\n        this.angularVelocity[2], 0);\r\n    quat.scale(this.spin, this.spin, 0.5);\r\n    quat.multiply(this.spin, this.spin, this.orientation);\r\n  }\r\n\r\n  /**\r\n   * Perform a deep copy.\r\n   *\r\n   * @param {PhysicsState} other\r\n   */\r\n  copy(other) {\r\n    this.mass = other.mass;\r\n    this.inverseMass = other.inverseMass;\r\n    mat3.copy(this.unrotatedInertiaTensor, other.unrotatedInertiaTensor);\r\n    mat3.copy(this.inverseInertiaTensor, other.inverseInertiaTensor);\r\n    vec3.copy(this.position, other.position);\r\n    vec3.copy(this.momentum, other.momentum);\r\n    quat.copy(this.orientation, other.orientation);\r\n    vec3.copy(this.angularMomentum, other.angularMomentum);\r\n    vec3.copy(this.velocity, other.velocity);\r\n    quat.copy(this.spin, other.spin);\r\n    vec3.copy(this.angularVelocity, other.angularVelocity);\r\n  }\r\n\r\n  /**\r\n   * @param {PhysicsState} a\r\n   * @param {PhysicsState} b\r\n   * @param {number} partialRatio\r\n   */\r\n  lerp(a, b, partialRatio) {\r\n    vec3.lerp(this.position, a.position, b.position, partialRatio);\r\n    vec3.lerp(this.momentum, a.momentum, b.momentum, partialRatio);\r\n    quat.slerp(this.orientation, a.orientation, b.orientation, partialRatio);\r\n    quat.normalize(this.orientation, this.orientation);\r\n    vec3.lerp(this.angularMomentum, a.angularMomentum, b.angularMomentum, partialRatio);\r\n    this.updateDependentFields();\r\n  }\r\n}\r\n\r\nexport {PhysicsState};\r\n\r\n/**\r\n * @typedef {Object} DynamicsConfig\r\n * @property {vec3} [position]\r\n * @property {vec3} [momentum]\r\n * @property {quat} [orientation]\r\n * @property {vec3} [angularMomentum]\r\n * @property {number} [mass]\r\n * @property {mat3} [unrotatedInertiaTensor]\r\n */\r\n","export * from './src/force-utils';\r\nexport * from './src/geometry';\r\nexport * from './src/inertia-tensor-utils';\r\nexport * from './src/util';\r\n","/**\r\n * This module defines a collection of static general utility functions for calculating forces.\r\n */\r\n\r\n/**\r\n * @param {GravityApplierConfig} config\r\n * @param {ForceApplierOutput} output\r\n * @param {ForceApplierInput} input\r\n */\r\nfunction applyGravity(config, output, input) {\r\n  vec3.scaleAndAdd(output.force, output.force, config._gravityVec, input.state.mass);\r\n}\r\n\r\n/**\r\n * @param {LinearDragApplierConfig} config\r\n * @param {ForceApplierOutput} output\r\n * @param {ForceApplierInput} input\r\n */\r\nfunction applyLinearDrag(config, output, input) {\r\n  const dragMagnitude = -vec3.squaredLength(input.state.velocity) * config.linearDragCoefficient;\r\n  vec3.normalize(_vec3, input.state.velocity);\r\n  vec3.scaleAndAdd(output.force, output.force, _vec3, dragMagnitude);\r\n}\r\n\r\n/**\r\n * @param {AngularDragApplierConfig} config\r\n * @param {ForceApplierOutput} output\r\n * @param {ForceApplierInput} input\r\n */\r\nfunction applyAngularDrag(config, output, input) {\r\n  vec3.scaleAndAdd(output.torque, output.torque, input.state.angularVelocity,\r\n      config.angularDragCoefficient);\r\n}\r\n\r\n/**\r\n * Applies a simple linear spring force (using Hooke's law).\r\n *\r\n * force = displacement * coefficient\r\n *\r\n * @param {LinearSpringForceApplierConfig} config\r\n * @param {ForceApplierOutput} output\r\n * @param {ForceApplierInput} input\r\n */\r\nfunction applyLinearSpringForce(config, output, input) {\r\n  vec3.subtract(_vec3, config.getIntendedPosition(), input.state.position);\r\n  vec3.scaleAndAdd(output.force, output.force, _vec3, config.springCoefficient);\r\n}\r\n\r\n/**\r\n * @param {SpringDampingApplierConfig} config\r\n * @param {ForceApplierOutput} output\r\n * @param {ForceApplierInput} input\r\n */\r\nfunction applySpringDamping(config, output, input) {\r\n  vec3.scale(_vec3, input.state.velocity, -config.dampingCoefficient);\r\n  vec3.add(output.force, output.force, _vec3);\r\n}\r\n\r\nconst _vec3 = vec3.create();\r\n\r\nexport {\r\n  applyAngularDrag,\r\n  applyGravity,\r\n  applyLinearDrag,\r\n  applyLinearSpringForce,\r\n  applySpringDamping,\r\n}\r\n\r\n/**\r\n * @typedef {Object} GravityApplierConfig\r\n * @property {vec3} _gravityVec\r\n */\r\n\r\n/**\r\n * @typedef {Object} LinearDragApplierConfig\r\n * @property {number} linearDragCoefficient\r\n */\r\n\r\n/**\r\n * @typedef {Object} AngularDragApplierConfig\r\n * @property {number} angularDragCoefficient\r\n */\r\n\r\n/**\r\n * @typedef {Object} LinearSpringForceApplierConfig\r\n * @property {number} springCoefficient\r\n * @property {Function.<vec3>} getIntendedPosition\r\n */\r\n\r\n/**\r\n * @typedef {Object} SpringDampingApplierConfig\r\n * @property {number} dampingCoefficient\r\n */\r\n","/**\r\n * This module defines a collection of static geometry utility functions.\r\n */\r\n\r\nconst EPSILON = 0.0000001;\r\nconst HALF_PI = Math.PI / 2;\r\nconst TWO_PI = Math.PI * 2;\r\n\r\n/**\r\n * Finds the minimum squared distance between two line segments.\r\n *\r\n * @param {LineSegment} segmentA\r\n * @param {LineSegment} segmentB\r\n * @returns {number}\r\n */\r\nfunction findSquaredDistanceBetweenSegments(segmentA, segmentB) {\r\n  findClosestPointsFromSegmentToSegment(_segmentDistance_tmpVecA, _segmentDistance_tmpVecB,\r\n      segmentA, segmentB);\r\n  return vec3.squaredDistance(_segmentDistance_tmpVecA, _segmentDistance_tmpVecB);\r\n}\r\n\r\n/**\r\n * Finds the minimum squared distance between a line segment and a point.\r\n *\r\n * @param {LineSegment} segment\r\n * @param {vec3} point\r\n * @returns {number}\r\n */\r\nfunction findSquaredDistanceFromSegmentToPoint(segment, point) {\r\n  findClosestPointOnSegmentToPoint(_segmentDistance_tmpVecA, segment, point);\r\n  return vec3.squaredDistance(_segmentDistance_tmpVecA, point);\r\n}\r\n\r\nconst _segmentDistance_tmpVecA = vec3.create();\r\nconst _segmentDistance_tmpVecB = vec3.create();\r\n\r\n/**\r\n * @param {vec3} outputPoint Output parameter.\r\n * @param {Aabb} aabb\r\n * @param {vec3} targetPoint\r\n */\r\nfunction findClosestPointFromAabbToPoint(outputPoint, aabb, targetPoint) {\r\n  outputPoint[0] = aabb.minX > targetPoint[0]\r\n      ? aabb.minX\r\n      : aabb.maxX < targetPoint[0]\r\n          ? aabb.maxX\r\n          : targetPoint[0];\r\n  outputPoint[1] = aabb.minY > targetPoint[1]\r\n      ? aabb.minY\r\n      : aabb.maxY < targetPoint[1]\r\n          ? aabb.maxY\r\n          : targetPoint[1];\r\n  outputPoint[2] = aabb.minZ > targetPoint[2]\r\n      ? aabb.minZ\r\n      : aabb.maxZ < targetPoint[2]\r\n          ? aabb.maxZ\r\n          : targetPoint[2];\r\n}\r\n\r\n/**\r\n * @param {vec3} outputPoint Output parameter.\r\n * @param {Aabb} aabb\r\n * @param {vec3} targetPoint\r\n */\r\nfunction findClosestPointFromAabbSurfaceToPoint(outputPoint, aabb, targetPoint) {\r\n  findClosestPointFromAabbToPoint(outputPoint, aabb, targetPoint);\r\n\r\n  // If the calculated point lies within the AABB, then we need to adjust one coordinate to lie\r\n  // along the edge of the AABB.\r\n  if (aabbVsPoint(aabb, outputPoint)) {\r\n    // Calculate the closest vertex.\r\n    _tmpVec1[0] = targetPoint[0] - aabb.minX < aabb.maxX - targetPoint[0]\r\n        ? aabb.minX\r\n        : aabb.maxX;\r\n    _tmpVec1[1] = targetPoint[1] - aabb.minY < aabb.maxY - targetPoint[1]\r\n        ? aabb.minY\r\n        : aabb.maxY;\r\n    _tmpVec1[2] = targetPoint[2] - aabb.minZ < aabb.maxZ - targetPoint[2]\r\n        ? aabb.minZ\r\n        : aabb.maxZ;\r\n\r\n    // Calculate the distance to the vertex along each dimension.\r\n    _tmpVec2[0] = _tmpVec1[0] - outputPoint[0];\r\n    _tmpVec2[0] = _tmpVec2[0] < 0 ? -_tmpVec2[0] : _tmpVec2[0];\r\n    _tmpVec2[1] = _tmpVec1[1] - outputPoint[1];\r\n    _tmpVec2[1] = _tmpVec2[1] < 1 ? -_tmpVec2[1] : _tmpVec2[1];\r\n    _tmpVec2[2] = _tmpVec1[2] - outputPoint[2];\r\n    _tmpVec2[2] = _tmpVec2[2] < 2 ? -_tmpVec2[2] : _tmpVec2[2];\r\n\r\n    // Determine along which dimension the point is closest to the AABB.\r\n    const index = _tmpVec2[0] < _tmpVec2[1]\r\n        ? (_tmpVec2[0] < _tmpVec2[2]\r\n            ? 0\r\n            : 2)\r\n        : (_tmpVec2[1] < _tmpVec2[2]\r\n            ? 1\r\n            : 2);\r\n\r\n    outputPoint[index] = _tmpVec1[index];\r\n  }\r\n}\r\n\r\n/**\r\n * Finds the point of intersection between a line segment and a coplanar quadrilateral.\r\n *\r\n * This assumes the region is not degenerate (has non-zero side lengths).\r\n *\r\n * @param {vec3} poi Output param. Null if there is no intersection.\r\n * @param {LineSegment} segment\r\n * @param {vec3} planeVertex1\r\n * @param {vec3} planeVertex2\r\n * @param {vec3} planeVertex3\r\n * @param {vec3} planeVertex4\r\n * @returns {boolean} True if there is an intersection.\r\n */\r\nfunction findPoiBetweenSegmentAndPlaneRegion(poi, segment, planeVertex1, planeVertex2, planeVertex3,\r\n                                             planeVertex4) {\r\n  return findPoiBetweenSegmentAndTriangle(poi, segment, planeVertex1, planeVertex2, planeVertex3) ||\r\n      findPoiBetweenSegmentAndTriangle(poi, segment, planeVertex1, planeVertex3, planeVertex4);\r\n}\r\n\r\n/**\r\n * Finds the point of intersection between a line segment and a triangle.\r\n *\r\n * This assumes the triangle is not degenerate (has non-zero side lengths).\r\n *\r\n * ----------------------------------------------------------------------------\r\n * Originally based on Dan Sunday's algorithms at http://geomalgorithms.com/a06-_intersect-2.html.\r\n *\r\n * Copyright 2001 softSurfer, 2012 Dan Sunday\r\n * This code may be freely used and modified for any purpose\r\n * providing that this copyright notice is included with it.\r\n * SoftSurfer makes no warranty for this code, and cannot be held\r\n * liable for any real or imagined damage resulting from its use.\r\n * Users of this code must verify correctness for their application.\r\n * ----------------------------------------------------------------------------\r\n *\r\n * @param {vec3} poi Output param. Null if there is no intersection.\r\n * @param {LineSegment} segment\r\n * @param {vec3} triangleVertex1\r\n * @param {vec3} triangleVertex2\r\n * @param {vec3} triangleVertex3\r\n * @returns {boolean} True if there is an intersection.\r\n */\r\nfunction findPoiBetweenSegmentAndTriangle(poi, segment, triangleVertex1, triangleVertex2,\r\n                                          triangleVertex3) {\r\n  //\r\n  // Find the point of intersection between the segment and the triangle's plane.\r\n  //\r\n\r\n  // First triangle edge.\r\n  vec3.subtract(_tmpVec1, triangleVertex2, triangleVertex1);\r\n  // Second triangle edge.\r\n  vec3.subtract(_tmpVec2, triangleVertex3, triangleVertex1);\r\n  // Triangle normal.\r\n  vec3.cross(_tmpVec3, _tmpVec1, _tmpVec2);\r\n  // Triangle to segment.\r\n  vec3.subtract(_tmpVec4, segment.start, triangleVertex1);\r\n\r\n  const normalToSegmentProj = vec3.dot(_tmpVec3, segment.dir);\r\n\r\n  if (normalToSegmentProj < EPSILON && normalToSegmentProj > -EPSILON) {\r\n    // The line segment is parallel to the triangle.\r\n    return false;\r\n  }\r\n\r\n  const normalToDiffProj = -vec3.dot(_tmpVec3, _tmpVec4);\r\n  const segmentNormalizedDistance = normalToDiffProj / normalToSegmentProj;\r\n\r\n  if (segmentNormalizedDistance < 0 || segmentNormalizedDistance > 1) {\r\n    // The line segment ends before intersecting the plane.\r\n    return false;\r\n  }\r\n\r\n  vec3.scaleAndAdd(poi, segment.start, segment.dir, segmentNormalizedDistance);\r\n\r\n  //\r\n  // Determine whether the point of intersection lies within the triangle.\r\n  //\r\n\r\n  const edge1DotEdge1 = vec3.dot(_tmpVec1, _tmpVec1);\r\n  const edge1DotEdge2 = vec3.dot(_tmpVec1, _tmpVec2);\r\n  const edge2DotEdge2 = vec3.dot(_tmpVec2, _tmpVec2);\r\n  // Triangle to point of intersection.\r\n  vec3.subtract(_tmpVec3, poi, triangleVertex1);\r\n  const diffDotEdge1 = vec3.dot(_tmpVec3, _tmpVec1);\r\n  const diffDotEdge2 = vec3.dot(_tmpVec3, _tmpVec2);\r\n  const denominator = edge1DotEdge2 * edge1DotEdge2 - edge1DotEdge1 * edge2DotEdge2;\r\n\r\n  // Check the triangle's parametric coordinates.\r\n  const s = (edge1DotEdge2 * diffDotEdge2 - edge2DotEdge2 * diffDotEdge1) / denominator;\r\n  if (s < 0 || s > 1) {\r\n    return false;\r\n  }\r\n  const t = (edge1DotEdge2 * diffDotEdge1 - edge1DotEdge1 * diffDotEdge2) / denominator;\r\n  if (t < 0 || s + t > 1) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * ----------------------------------------------------------------------------\r\n * Originally based on Jukka Jylänki's algorithm at\r\n * https://github.com/juj/MathGeoLib/blob/1093e39d91def7ff6905fb7489893190d7d81353/src/Geometry/OBB.cpp.\r\n *\r\n * Copyright 2011 Jukka Jylänki\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * ----------------------------------------------------------------------------\r\n *\r\n * @param {vec3} outputPoint Output parameter.\r\n * @param {Obb} obb\r\n * @param {vec3} targetPoint\r\n */\r\nfunction findClosestPointFromObbToPoint(outputPoint, obb, targetPoint) {\r\n  vec3.subtract(_tmpVec1, targetPoint, obb.centerOfVolume);\r\n  vec3.copy(outputPoint, obb.centerOfVolume);\r\n  for (let i = 0; i < 3; i++) {\r\n    // Compute the displacement along this axis.\r\n    let projection = vec3.dot(obb.axes[i], _tmpVec1);\r\n    projection = projection > obb.halfSideLengths[i] ? obb.halfSideLengths[i] :\r\n        (projection < -obb.halfSideLengths[i] ? -obb.halfSideLengths[i] : projection);\r\n    vec3.scaleAndAdd(outputPoint, outputPoint, obb.axes[i], projection);\r\n  }\r\n}\r\n\r\n/**\r\n * Finds the closest position on one line segment to the other line segment, and vice versa.\r\n *\r\n * ----------------------------------------------------------------------------\r\n * Originally based on Jukka Jylänki's algorithm at\r\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/LineSegment.cpp.\r\n *\r\n * Copyright 2011 Jukka Jylänki\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * ----------------------------------------------------------------------------\r\n *\r\n * @param {vec3} closestA Output param.\r\n * @param {vec3} closestB Output param.\r\n * @param {LineSegment} segmentA\r\n * @param {LineSegment} segmentB\r\n */\r\nfunction findClosestPointsFromSegmentToSegment(closestA, closestB, segmentA, segmentB) {\r\n  const {distA, distB} = findClosestPointsFromLineToLine(\r\n      segmentA.start, segmentA.dir, segmentB.start, segmentB.dir);\r\n\r\n  const isDistAInBounds = distA >= 0 && distA <= 1;\r\n  const isDistBInBounds = distB >= 0 && distB <= 1;\r\n\r\n  if (isDistAInBounds) {\r\n    if (isDistBInBounds) {\r\n      // The distances along both line segments are within bounds.\r\n      vec3.scaleAndAdd(closestA, segmentA.start, segmentA.dir, distA);\r\n      vec3.scaleAndAdd(closestB, segmentB.start, segmentB.dir, distB);\r\n    } else {\r\n      // Only the distance along the first line segment is within bounds.\r\n      if (distB < 0) {\r\n        vec3.copy(closestB, segmentB.start);\r\n      } else {\r\n        vec3.copy(closestB, segmentB.end);\r\n      }\r\n      findClosestPointOnSegmentToPoint(closestA, segmentA, closestB);\r\n    }\r\n  } else {\r\n    if (isDistBInBounds) {\r\n      // Only the distance along the second line segment is within bounds.\r\n      if (distA < 0) {\r\n        vec3.copy(closestA, segmentA.start);\r\n      } else {\r\n        vec3.copy(closestA, segmentA.end);\r\n      }\r\n      findClosestPointOnSegmentToPoint(closestB, segmentB, closestA);\r\n    } else {\r\n      // Neither of the distances along either line segment are within bounds.\r\n      if (distA < 0) {\r\n        vec3.copy(closestA, segmentA.start);\r\n      } else {\r\n        vec3.copy(closestA, segmentA.end);\r\n      }\r\n\r\n      if (distB < 0) {\r\n        vec3.copy(closestB, segmentB.start);\r\n      } else {\r\n        vec3.copy(closestB, segmentB.end);\r\n      }\r\n\r\n      const altClosestA = vec3.create();\r\n      const altClosestB = vec3.create();\r\n\r\n      findClosestPointOnSegmentToPoint(altClosestA, segmentA, closestB);\r\n      findClosestPointOnSegmentToPoint(altClosestB, segmentB, closestA);\r\n\r\n      if (vec3.squaredDistance(altClosestA, closestB) <\r\n          vec3.squaredDistance(altClosestB, closestA)) {\r\n        vec3.copy(closestA, altClosestA);\r\n      } else {\r\n        vec3.copy(closestB, altClosestB);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Finds the closest position on a line segment to a point.\r\n *\r\n * ----------------------------------------------------------------------------\r\n * Originally based on Jukka Jylänki's algorithm at\r\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/LineSegment.cpp.\r\n *\r\n * Copyright 2011 Jukka Jylänki\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * ----------------------------------------------------------------------------\r\n *\r\n * @param {vec3} closestPoint Output param.\r\n * @param {LineSegment} segment\r\n * @param {vec3} point\r\n * @private\r\n */\r\nfunction findClosestPointOnSegmentToPoint(closestPoint, segment, point) {\r\n  const dirSquaredLength = vec3.squaredLength(segment.dir);\r\n\r\n  if (!dirSquaredLength) {\r\n    // The point is at the segment start.\r\n    vec3.copy(closestPoint, segment.start);\r\n  } else {\r\n    // Calculate the projection of the point onto the line extending through the segment.\r\n    vec3.subtract(_tmpVec1, point, segment.start);\r\n    const t = vec3.dot(_tmpVec1, segment.dir) / dirSquaredLength;\r\n\r\n    if (t < 0) {\r\n      // The point projects beyond the segment start.\r\n      vec3.copy(closestPoint, segment.start);\r\n    } else if (t > 1) {\r\n      // The point projects beyond the segment end.\r\n      vec3.copy(closestPoint, segment.end);\r\n    } else {\r\n      // The point projects between the start and end of the segment.\r\n      vec3.scaleAndAdd(closestPoint, segment.start, segment.dir, t);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Finds the closest position on one line to the other line, and vice versa.\r\n *\r\n * The positions are represented as scalar-value distances from the \"start\" positions of each line.\r\n * These are scaled according to the given direction vectors.\r\n *\r\n * ----------------------------------------------------------------------------\r\n * Originally based on Jukka Jylänki's algorithm at\r\n * https://github.com/juj/MathGeoLib/blob/ff2d348a167008c831ae304483b824647f71fbf6/src/Geometry/Line.cpp.\r\n *\r\n * Copyright 2011 Jukka Jylänki\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * ----------------------------------------------------------------------------\r\n *\r\n * @param {vec3} startA The start position of line A.\r\n * @param {vec3} dirA The (unnormalized) direction of line A. Cannot be zero.\r\n * @param {vec3} startB The start position of line B.\r\n * @param {vec3} dirB The (unnormalized) direction of line B. Cannot be zero.\r\n * @returns {{distA: Number, distB: Number}}\r\n */\r\nfunction findClosestPointsFromLineToLine(startA, dirA, startB, dirB) {\r\n  vec3.subtract(_tmpVec1, startA, startB);\r\n  const dirBDotDirAToB = vec3.dot(dirB, _tmpVec1);\r\n  const dirADotDirAToB = vec3.dot(dirA, _tmpVec1);\r\n\r\n  const sqrLenDirB = vec3.squaredLength(dirB);\r\n  const sqrLenDirA = vec3.squaredLength(dirA);\r\n\r\n  const dirADotDirB = vec3.dot(dirA, dirB);\r\n\r\n  const denominator = sqrLenDirA * sqrLenDirB - dirADotDirB * dirADotDirB;\r\n\r\n  const distA = denominator < EPSILON\r\n      ? 0\r\n      : (dirADotDirB * dirBDotDirAToB - sqrLenDirB * dirADotDirAToB) / denominator;\r\n  const distB = (dirBDotDirAToB + dirADotDirB * distA) / sqrLenDirB;\r\n\r\n  return {\r\n    distA: distA,\r\n    distB: distB\r\n  };\r\n}\r\n\r\n/**\r\n * A good description of why we need these special operations for rotating tensors can be found\r\n * here: http://www.randygaul.net/2014/04/09/transformations-change-of-basis-matrix/.\r\n *\r\n * @param {mat3} output Output param.\r\n * @param {mat3} tensor\r\n * @param {quat} rotation\r\n */\r\nfunction rotateTensor(output, tensor, rotation) {// TODO: Test this somehow...\r\n  mat3.fromQuat(_tmpMat, rotation);\r\n  mat3.multiply(output, _tmpMat, tensor);\r\n  mat3.invert(_tmpMat, _tmpMat);\r\n  mat3.multiply(output, output, _tmpMat);\r\n}\r\n\r\n/**\r\n * @param {Aabb} aabb\r\n * @param {vec3} point\r\n * @returns {boolean}\r\n */\r\nfunction aabbVsPoint(aabb, point) {\r\n  return point[0] >= aabb.minX && point[0] <= aabb.maxX &&\r\n      point[1] >= aabb.minY && point[1] <= aabb.maxY &&\r\n      point[2] >= aabb.minZ && point[2] <= aabb.maxZ\r\n}\r\n\r\n/**\r\n * @param {quat} out\r\n * @param {quat} a\r\n * @param {quat} b\r\n * @param {number} scale\r\n * @returns {quat}\r\n */\r\nfunction scaleAndAddQuat(out, a, b, scale) {\r\n  return quat.set(out,\r\n      a[0] + b[0] * scale,\r\n      a[1] + b[1] * scale,\r\n      a[2] + b[2] * scale,\r\n      a[3] + b[3] * scale);\r\n}\r\n\r\n/**\r\n * @param {vec3} a\r\n * @param {vec3} b\r\n * @returns {boolean}\r\n */\r\nfunction areVec3sClose(a, b) {\r\n  for (let i = 0; i < 3; i++) {\r\n    if (a[i] - b[i] > EPSILON || b[i] - a[i] > EPSILON) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Re-used across the geometry utility functions, so we don't instantiate as many vec3 objects.\r\nconst _tmpVec1 = vec3.create();\r\nconst _tmpVec2 = vec3.create();\r\nconst _tmpVec3 = vec3.create();\r\nconst _tmpVec4 = vec3.create();\r\nconst _tmpMat = mat3.create();\r\n\r\n// Exposed to consumers, so they don't have to instantiate as many vec3 objects.\r\nconst tmpVec1 = vec3.create();\r\nconst tmpVec2 = vec3.create();\r\nconst tmpVec3 = vec3.create();\r\nconst tmpVec4 = vec3.create();\r\n\r\nconst _geometry = {\r\n  EPSILON,\r\n  HALF_PI,\r\n  TWO_PI,\r\n  scaleAndAddQuat,\r\n};\r\n\r\nexport {\r\n  _geometry,\r\n  tmpVec1,\r\n  tmpVec2,\r\n  tmpVec3,\r\n  tmpVec4,\r\n  findSquaredDistanceBetweenSegments,\r\n  findSquaredDistanceFromSegmentToPoint,\r\n  findClosestPointFromAabbToPoint,\r\n  findClosestPointFromAabbSurfaceToPoint,\r\n  findPoiBetweenSegmentAndTriangle,\r\n  findPoiBetweenSegmentAndPlaneRegion,\r\n  findClosestPointFromObbToPoint,\r\n  findClosestPointsFromSegmentToSegment,\r\n  findClosestPointOnSegmentToPoint,\r\n  findClosestPointsFromLineToLine,\r\n  rotateTensor,\r\n  aabbVsPoint,\r\n  areVec3sClose,\r\n};\r\n","/**\r\n * This module defines a collection of static utility functions for calculating inertia tensors.\r\n */\r\n\r\nimport {_geometry, rotateTensor} from './geometry';\r\n\r\n/**\r\n * @param {number} radius\r\n * @param {number} mass\r\n * @returns {mat3}\r\n */\r\nfunction createSphereInertiaTensor(radius, mass) {// TODO: Test this somehow...\r\n  const tensor = mat3.create();\r\n  const moment = 2 / 5 * mass * radius * radius;\r\n  tensor[0] = moment;\r\n  tensor[4] = moment;\r\n  tensor[8] = moment;\r\n  return tensor;\r\n}\r\n\r\n/**\r\n * @param {number} rangeX\r\n * @param {number} rangeY\r\n * @param {number} rangeZ\r\n * @param {number} mass\r\n * @returns {mat3}\r\n */\r\nfunction createBoxInertiaTensor(rangeX, rangeY, rangeZ, mass) {// TODO: Test this somehow...\r\n  const tensor = mat3.create();\r\n  const tmp = mass / 12;\r\n  const xRangeSquared = rangeX * rangeX;\r\n  const yRangeSquared = rangeY * rangeY;\r\n  const zRangeSquared = rangeZ * rangeZ;\r\n  tensor[0] = tmp * (yRangeSquared + zRangeSquared);\r\n  tensor[4] = tmp * (xRangeSquared + yRangeSquared);\r\n  tensor[8] = tmp * (xRangeSquared + zRangeSquared);\r\n  return tensor;\r\n}\r\n\r\n/**\r\n * ----------------------------------------------------------------------------\r\n * Originally based on Bojan Lovrovic's algorithm at\r\n * http://www.gamedev.net/page/resources/_/technical/math-and-physics/capsule-inertia-tensor-r3856.\r\n *\r\n * Copyright 2014 Bojan Lovrovic\r\n *\r\n * GameDev.net Open License\r\n * (http://www.gamedev.net/page/resources/_/gdnethelp/gamedevnet-open-license-r2956)\r\n *\r\n * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n *\r\n * 1. Definitions.\r\n *\r\n * \"Article\" shall refer to any body of text written by Author which describes and documents the use\r\n * and/or operation of Source. It specifically does not refer to any accompanying Source either\r\n * embedded within the body of text or attached to the article as a file.\r\n *\r\n * \"Author\" means the individual or entity that offers the Work under the terms of this License.\r\n *\r\n * \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined\r\n * by Sections 1 through 9 of this document.\r\n *\r\n * \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is\r\n * granting the License.\r\n *\r\n * \"You\" (or \"Your\") shall mean an individual or entity exercising permissions granted by this\r\n * License.\r\n *\r\n * \"Source\" shall include all software text source code and configuration files used to create\r\n * executable software\r\n *\r\n * \"Object\" shall mean any Source which has been converted into a machine executable software\r\n *\r\n * \"Work\" consists of both the Article and Source\r\n *\r\n * \"Publisher\" refers to GameDev.net LLC\r\n *\r\n * This agreement is between You and Author, the owner and creator of the Work located at\r\n * Gamedev.net.\r\n *\r\n * 2. Fair Dealing Rights.\r\n *\r\n * Nothing in this License is intended to reduce, limit, or restrict any uses free from copyright or\r\n * rights arising from limitations or exceptions that are provided for in connection with the\r\n * copyright protection under copyright law or other applicable laws.\r\n *\r\n * 3. Grant of Copyright License.\r\n *\r\n * Subject to the terms and conditions of this License, the Author hereby grants to You a perpetual,\r\n * worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to the Work\r\n * under the following stated terms:\r\n * You may not reproduce the Article on any other website outside of Gamedev.net without express\r\n * written permission from the Author\r\n * You may use, copy, link, modify and distribute under Your own terms, binary Object code versions\r\n * based on the Work in your own software\r\n * You may reproduce, prepare derivative Works of, publicly display, publicly perform, sublicense,\r\n * and distribute the Source and such derivative Source in Source form only as part of a larger\r\n * software distribution and provided that attribution to the original Author is granted.\r\n * The origin of this Work must not be misrepresented; you must not claim that you wrote the\r\n * original Source. If you use this Source in a product, an acknowledgment of the Author name would\r\n * be appreciated but is not required.\r\n *\r\n * 4. Restrictions.\r\n *\r\n * The license granted in Section 3 above is expressly made subject to and limited by the following\r\n * restrictions:\r\n * Altered Source versions must be plainly marked as such, and must not be misrepresented as being\r\n * the original software.\r\n * This License must be visibly linked to from any online distribution of the Article by URI and\r\n * using the descriptive text \"Licensed under the GameDev.net Open License\"\r\n * Neither the name of the Author of this Work, nor any of their trademarks or service marks, may be\r\n * used to endorse or promote products derived from this Work without express prior permission of\r\n * the Author\r\n * Except as expressly stated herein, nothing in this License grants any license to Author's\r\n * trademarks, copyrights, patents, trade secrets or any other intellectual property. No license is\r\n * granted to the trademarks of Author even if such marks are included in the Work. Nothing in this\r\n * License shall be interpreted to prohibit Author from licensing under terms different from this\r\n * License any Work that Author otherwise would have a right to license.\r\n *\r\n * 5. Grant of Patent License.\r\n *\r\n * Subject to the terms and conditions of this License, each Contributor hereby grants to You a\r\n * perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in\r\n * this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise\r\n * transfer the Work, where such license applies only to those patent claims licensable by such\r\n * Contributor that are necessarily infringed by their Contribution(s) alone or by combination of\r\n * their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute\r\n * patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit)\r\n * alleging that the Work or Source incorporated within the Work constitutes direct or contributory\r\n * patent infringement, then any patent licenses granted to You under this License for that Work\r\n * shall terminate as of the date such litigation is filed.\r\n *\r\n * 6. Limitation of Liability.\r\n *\r\n * In no event and under no legal theory, whether in tort (including negligence), contract, or\r\n * otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or\r\n * agreed to in writing, shall any Author or Publisher be liable to You for damages, including any\r\n * direct, indirect, special, incidental, or consequential damages of any character arising as a\r\n * result of this License or out of the use or inability to use the Work (including but not limited\r\n * to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all\r\n * other commercial damages or losses), even if such Author has been advised of the possibility of\r\n * such damages.\r\n *\r\n * 7. DISCLAIMER OF WARRANTY\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\r\n * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n * 8. Publisher.\r\n *\r\n * The parties hereby confirm that the Publisher shall not, under any circumstances, be responsible\r\n * for and shall not have any liability in respect of the subject matter of this License. The\r\n * Publisher makes no warranty whatsoever in connection with the Work and shall not be liable to You\r\n * or any party on any legal theory for any damages whatsoever, including without limitation any\r\n * general, special, incidental or consequential damages arising in connection to this license. The\r\n * Publisher reserves the right to cease making the Work available to You at any time without notice\r\n *\r\n * 9. Termination\r\n *\r\n * This License and the rights granted hereunder will terminate automatically upon any breach by You\r\n * of the terms of this License. Individuals or entities who have received Deriviative Works from\r\n * You under this License, however, will not have their licenses terminated provided such\r\n * individuals or entities remain in full compliance with those licenses. Sections 1, 2, 6, 7, 8 and\r\n * 9 will survive any termination of this License.\r\n * Subject to the above terms and conditions, the license granted here is perpetual (for the\r\n * duration of the applicable copyright in the Work). Notwithstanding the above, Licensor reserves\r\n * the right to release the Work under different license terms or to stop distributing the Work at\r\n * any time; provided, however that any such election will not serve to withdraw this License (or\r\n * any other license that has been, or is required to be, granted under the terms of this License),\r\n * and this License will continue in full force and effect unless terminated as stated above.\r\n * ----------------------------------------------------------------------------\r\n *\r\n * @param {number} halfDistance\r\n * @param {number} radius\r\n * @param {number} mass\r\n * @returns {mat3}\r\n */\r\nfunction createCapsuleInertiaTensor(halfDistance, radius, mass) {// TODO: Test this somehow...\r\n  const tensor = mat3.create();\r\n\r\n  const cylinderHeight = halfDistance * 2;\r\n  const radiusSquared = radius * radius;\r\n  const cylinderVolume = Math.PI * radiusSquared * cylinderHeight;\r\n  const hemisphereCombinedVolume = 4 / 3 * Math.PI * radiusSquared;\r\n  const cylinderMass = cylinderVolume / (cylinderVolume * hemisphereCombinedVolume) * mass;\r\n  const hemisphereMass = (mass - cylinderMass) / 2;\r\n\r\n  // Contribution from the cylinder.\r\n  tensor[4] = radiusSquared * cylinderMass / 2;\r\n  tensor[0] = tensor[4] / 2 + cylinderMass * cylinderHeight * cylinderHeight / 12;\r\n  tensor[8] = tensor[0];\r\n\r\n  // Contributions from the hemispheres.\r\n  const tmp1 = hemisphereMass * 2 * radiusSquared / 5;\r\n  tensor[4] += tmp1 * 2;\r\n  const tmp2 =\r\n      (tmp1 + hemisphereMass * (halfDistance * halfDistance + 3 / 8 * cylinderHeight * radius)) * 2;\r\n  tensor[0] += tmp2;\r\n  tensor[8] += tmp2;\r\n\r\n  // The above calculations assume the capsule is aligned along the y-axis. However, our default\r\n  // capsule orientation is aligned along the z-axis.\r\n  const rotation = quat.create();\r\n  quat.rotateX(rotation, rotation, _geometry.HALF_PI);\r\n  rotateTensor(tensor, tensor, rotation);\r\n\r\n  return tensor;\r\n}\r\n\r\n/**\r\n * @param {Collidable} collidable\r\n * @param {number} mass\r\n * @returns {mat3}\r\n */\r\nfunction createForCollidable(collidable, mass) {\r\n  switch (collidable.constructor.name) {\r\n    case 'Sphere':\r\n      return createSphereInertiaTensor(collidable.radius, mass);\r\n    case 'Aabb':\r\n      return createBoxInertiaTensor(collidable.rangeX, collidable.rangeY, collidable.rangeZ, mass);\r\n    case 'Capsule':\r\n      return createCapsuleInertiaTensor(collidable.halfDistance, collidable.radius, mass);\r\n    case 'Obb':\r\n      return createBoxInertiaTensor(collidable.halfSideLengths[0] * 2,\r\n          collidable.halfSideLengths[1] * 2, collidable.halfSideLengths[2] * 2, mass);\r\n  }\r\n}\r\n\r\nexport {\r\n  createSphereInertiaTensor,\r\n  createBoxInertiaTensor,\r\n  createCapsuleInertiaTensor,\r\n  createForCollidable,\r\n};\r\n","/**\r\n * This module defines a collection of static general utility functions.\r\n */\r\n\r\n// TODO: This should be set from somewhere else (probably as a param to controller like before; but then I need to make this updatable)\r\nconst isInDevMode = true;\r\n\r\nconst _util = {\r\n  isInDevMode: isInDevMode\r\n};\r\n\r\nexport {\r\n  _util,\r\n};\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}